
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000164  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c9  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b6  00000000  00000000  0000092d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fb  00000000  00000000  00000ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  000011e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000355  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  000015ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000017c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_1>
   8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_2>
   c:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 40 00 	call	0x80	; 0x80 <main>
  64:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIo_init>:
}

void GPIo_init(void)
{
	//configure pin PB2 direction as input
	DDRB &= ~(1<<2);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	8b 7f       	andi	r24, 0xFB	; 251
  70:	87 bb       	out	0x17, r24	; 23
	//configure pins PD2,PD3 direction as input
	DDRD &= ~(0b11<<2);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	83 7f       	andi	r24, 0xF3	; 243
  76:	81 bb       	out	0x11, r24	; 17
	//configure pins PD5,PD6,PD7 direction as output
	DDRD |= (0b111<<5);
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	80 6e       	ori	r24, 0xE0	; 224
  7c:	81 bb       	out	0x11, r24	; 17
  7e:	08 95       	ret

00000080 <main>:
//prototypes
void GPIo_init(void);

int main (void)
{
	GPIo_init();
  80:	0e 94 36 00 	call	0x6c	; 0x6c <GPIo_init>
	PORTD = 0x00;
  84:	12 ba       	out	0x12, r1	; 18
	//Enable external interrupt for INT0,INT1,INT2 in interrupt_unit module
	GICR |= (0b111<<5);
  86:	8b b7       	in	r24, 0x3b	; 59
  88:	80 6e       	ori	r24, 0xE0	; 224
  8a:	8b bf       	out	0x3b, r24	; 59
	//Enable interrupt to CPU
	SREG |= 1<<7;
  8c:	8f b7       	in	r24, 0x3f	; 63
  8e:	80 68       	ori	r24, 0x80	; 128
  90:	8f bf       	out	0x3f, r24	; 63
	//configure INT1 as rising edge
	MCUCR |= (0b11<<2);
  92:	85 b7       	in	r24, 0x35	; 53
  94:	8c 60       	ori	r24, 0x0C	; 12
  96:	85 bf       	out	0x35, r24	; 53
	//configure INT0 as any logical change
	MCUCR |= 1<<0;
  98:	85 b7       	in	r24, 0x35	; 53
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	85 bf       	out	0x35, r24	; 53
	//configure INT1 as falling edge
	MCUCSR &= ~(1<<6);
  9e:	84 b7       	in	r24, 0x34	; 52
  a0:	8f 7b       	andi	r24, 0xBF	; 191
  a2:	84 bf       	out	0x34, r24	; 52
	while(1)
	{
		//turn off led at portD pin 7
		PORTD &= ~(1<<5);
  a4:	82 b3       	in	r24, 0x12	; 18
  a6:	8f 7d       	andi	r24, 0xDF	; 223
  a8:	82 bb       	out	0x12, r24	; 18
		//turn off led at portD pin 6
		PORTD &= ~(1<<6);
  aa:	82 b3       	in	r24, 0x12	; 18
  ac:	8f 7b       	andi	r24, 0xBF	; 191
  ae:	82 bb       	out	0x12, r24	; 18
		//turn off led at portD pin 7
		PORTD &= ~(1<<7);
  b0:	82 b3       	in	r24, 0x12	; 18
  b2:	8f 77       	andi	r24, 0x7F	; 127
  b4:	82 bb       	out	0x12, r24	; 18
  b6:	f6 cf       	rjmp	.-20     	; 0xa4 <main+0x24>

000000b8 <__vector_1>:
	//configure pins PD5,PD6,PD7 direction as output
	DDRD |= (0b111<<5);
}

ISR(INT0_vect)
{
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	2f 93       	push	r18
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
	//turn on led at portD pin 5
	PORTD |= 1<<5;
  c8:	82 b3       	in	r24, 0x12	; 18
  ca:	80 62       	ori	r24, 0x20	; 32
  cc:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	89 e6       	ldi	r24, 0x69	; 105
  d2:	98 e1       	ldi	r25, 0x18	; 24
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <__vector_1+0x1c>
  dc:	00 c0       	rjmp	.+0      	; 0xde <__vector_1+0x26>
  de:	00 00       	nop
	//delay for 1 sec
	_delay_ms(1000);
}
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	2f 91       	pop	r18
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <__vector_2>:

ISR(INT1_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	2f 93       	push	r18
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
	//turn on led at portD pin 6
	PORTD |= 1<<6;
 100:	82 b3       	in	r24, 0x12	; 18
 102:	80 64       	ori	r24, 0x40	; 64
 104:	82 bb       	out	0x12, r24	; 18
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	89 e6       	ldi	r24, 0x69	; 105
 10a:	98 e1       	ldi	r25, 0x18	; 24
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <__vector_2+0x1c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <__vector_2+0x26>
 116:	00 00       	nop
	//delay for 1 sec
	_delay_ms(1000);
}
 118:	9f 91       	pop	r25
 11a:	8f 91       	pop	r24
 11c:	2f 91       	pop	r18
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <__vector_3>:

ISR(INT2_vect)
{
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	2f 93       	push	r18
 134:	8f 93       	push	r24
 136:	9f 93       	push	r25
	//turn on led at portD pin 7
	PORTD |= 1<<7;
 138:	82 b3       	in	r24, 0x12	; 18
 13a:	80 68       	ori	r24, 0x80	; 128
 13c:	82 bb       	out	0x12, r24	; 18
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	89 e6       	ldi	r24, 0x69	; 105
 142:	98 e1       	ldi	r25, 0x18	; 24
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <__vector_3+0x1c>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <__vector_3+0x26>
 14e:	00 00       	nop
	//delay for 1 sec
	_delay_ms(1000);
}
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	2f 91       	pop	r18
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
