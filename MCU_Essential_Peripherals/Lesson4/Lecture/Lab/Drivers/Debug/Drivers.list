
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d04  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000e34  08000e34  00010e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e5c  08000e5c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08000e5c  08000e5c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e5c  08000e5c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e5c  08000e5c  00010e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e60  08000e60  00010e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08000e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000010  08000e74  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08000e74  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000033bc  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000839  00000000  00000000  000233f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a14  00000000  00000000  00023c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a8  00000000  00000000  00024648  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000160  00000000  00000000  000247f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000230f  00000000  00000000  00024950  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001bf9  00000000  00000000  00026c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009345  00000000  00000000  00028858  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00031b9d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000054c  00000000  00000000  00031c18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e1c 	.word	0x08000e1c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	08000e1c 	.word	0x08000e1c

08000170 <delay_ms>:
GPIO_Pinconfig_t  pin_cfg;
uint16_t LCD_data_pins[] = {GPIO_PIN_0,GPIO_PIN_1,GPIO_PIN_2,GPIO_PIN_3,
							GPIO_PIN_4,GPIO_PIN_5,GPIO_PIN_6,GPIO_PIN_7};

void delay_ms(uint32_t time)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0; i<time; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay_ms+0x26>
		for(j=0; j<255; j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay_ms+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bfe      	cmp	r3, #254	; 0xfe
 800018e:	d9f9      	bls.n	8000184 <delay_ms+0x14>
	for(i=0; i<time; i++)
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <delay_ms+0xe>
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <lcd_init>:

void lcd_init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b082      	sub	sp, #8
 80001ac:	af00      	add	r7, sp, #0
	delay_ms(20);
 80001ae:	2014      	movs	r0, #20
 80001b0:	f7ff ffde 	bl	8000170 <delay_ms>
	//LCD data set as output
	int i;
	for(i=0; i<8; i++)
 80001b4:	2300      	movs	r3, #0
 80001b6:	607b      	str	r3, [r7, #4]
 80001b8:	e012      	b.n	80001e0 <lcd_init+0x38>
	{
		pin_cfg.PinNumber= LCD_data_pins[i];
 80001ba:	4a39      	ldr	r2, [pc, #228]	; (80002a0 <lcd_init+0xf8>)
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80001c2:	4b38      	ldr	r3, [pc, #224]	; (80002a4 <lcd_init+0xfc>)
 80001c4:	801a      	strh	r2, [r3, #0]
		pin_cfg.Mode = GPIO_MODE_Output_PP;
 80001c6:	4b37      	ldr	r3, [pc, #220]	; (80002a4 <lcd_init+0xfc>)
 80001c8:	2204      	movs	r2, #4
 80001ca:	709a      	strb	r2, [r3, #2]
		pin_cfg.Output_speed = GPIO_SPEED_10M;
 80001cc:	4b35      	ldr	r3, [pc, #212]	; (80002a4 <lcd_init+0xfc>)
 80001ce:	2201      	movs	r2, #1
 80001d0:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(lcd_data_dir, &pin_cfg);
 80001d2:	4934      	ldr	r1, [pc, #208]	; (80002a4 <lcd_init+0xfc>)
 80001d4:	4834      	ldr	r0, [pc, #208]	; (80002a8 <lcd_init+0x100>)
 80001d6:	f000 fd4c 	bl	8000c72 <MCAL_GPIO_Init>
	for(i=0; i<8; i++)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	3301      	adds	r3, #1
 80001de:	607b      	str	r3, [r7, #4]
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2b07      	cmp	r3, #7
 80001e4:	dde9      	ble.n	80001ba <lcd_init+0x12>
	}

	//set RS SWITCH as output
	pin_cfg.PinNumber = RS;
 80001e6:	4b2f      	ldr	r3, [pc, #188]	; (80002a4 <lcd_init+0xfc>)
 80001e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001ec:	801a      	strh	r2, [r3, #0]
	pin_cfg.Mode = GPIO_MODE_Output_PP;
 80001ee:	4b2d      	ldr	r3, [pc, #180]	; (80002a4 <lcd_init+0xfc>)
 80001f0:	2204      	movs	r2, #4
 80001f2:	709a      	strb	r2, [r3, #2]
	pin_cfg.Output_speed = GPIO_SPEED_10M;
 80001f4:	4b2b      	ldr	r3, [pc, #172]	; (80002a4 <lcd_init+0xfc>)
 80001f6:	2201      	movs	r2, #1
 80001f8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(lcd_ctrl_dir, &pin_cfg);
 80001fa:	492a      	ldr	r1, [pc, #168]	; (80002a4 <lcd_init+0xfc>)
 80001fc:	482b      	ldr	r0, [pc, #172]	; (80002ac <lcd_init+0x104>)
 80001fe:	f000 fd38 	bl	8000c72 <MCAL_GPIO_Init>
	//set RW SWITCH as output
	pin_cfg.PinNumber = RW;
 8000202:	4b28      	ldr	r3, [pc, #160]	; (80002a4 <lcd_init+0xfc>)
 8000204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000208:	801a      	strh	r2, [r3, #0]
	pin_cfg.Mode = GPIO_MODE_Output_PP;
 800020a:	4b26      	ldr	r3, [pc, #152]	; (80002a4 <lcd_init+0xfc>)
 800020c:	2204      	movs	r2, #4
 800020e:	709a      	strb	r2, [r3, #2]
	pin_cfg.Output_speed = GPIO_SPEED_10M;
 8000210:	4b24      	ldr	r3, [pc, #144]	; (80002a4 <lcd_init+0xfc>)
 8000212:	2201      	movs	r2, #1
 8000214:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(lcd_ctrl_dir, &pin_cfg);
 8000216:	4923      	ldr	r1, [pc, #140]	; (80002a4 <lcd_init+0xfc>)
 8000218:	4824      	ldr	r0, [pc, #144]	; (80002ac <lcd_init+0x104>)
 800021a:	f000 fd2a 	bl	8000c72 <MCAL_GPIO_Init>
	//set ENABLE SWITCH as output
	pin_cfg.PinNumber = EN;
 800021e:	4b21      	ldr	r3, [pc, #132]	; (80002a4 <lcd_init+0xfc>)
 8000220:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000224:	801a      	strh	r2, [r3, #0]
	pin_cfg.Mode = GPIO_MODE_Output_PP;
 8000226:	4b1f      	ldr	r3, [pc, #124]	; (80002a4 <lcd_init+0xfc>)
 8000228:	2204      	movs	r2, #4
 800022a:	709a      	strb	r2, [r3, #2]
	pin_cfg.Output_speed = GPIO_SPEED_10M;
 800022c:	4b1d      	ldr	r3, [pc, #116]	; (80002a4 <lcd_init+0xfc>)
 800022e:	2201      	movs	r2, #1
 8000230:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(lcd_ctrl_dir, &pin_cfg);
 8000232:	491c      	ldr	r1, [pc, #112]	; (80002a4 <lcd_init+0xfc>)
 8000234:	481d      	ldr	r0, [pc, #116]	; (80002ac <lcd_init+0x104>)
 8000236:	f000 fd1c 	bl	8000c72 <MCAL_GPIO_Init>
	//clear RS,RW,EN
	MCAL_GPIO_WritePin(lcd_ctrl_port, RS, WRITE_PIN_LOW);
 800023a:	2200      	movs	r2, #0
 800023c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000240:	481a      	ldr	r0, [pc, #104]	; (80002ac <lcd_init+0x104>)
 8000242:	f000 fd9b 	bl	8000d7c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_ctrl_port, RW, WRITE_PIN_LOW);
 8000246:	2200      	movs	r2, #0
 8000248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800024c:	4817      	ldr	r0, [pc, #92]	; (80002ac <lcd_init+0x104>)
 800024e:	f000 fd95 	bl	8000d7c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_ctrl_port, EN, WRITE_PIN_LOW);
 8000252:	2200      	movs	r2, #0
 8000254:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000258:	4814      	ldr	r0, [pc, #80]	; (80002ac <lcd_init+0x104>)
 800025a:	f000 fd8f 	bl	8000d7c <MCAL_GPIO_WritePin>

	lcd_write_command(0x30);
 800025e:	2030      	movs	r0, #48	; 0x30
 8000260:	f000 f8da 	bl	8000418 <lcd_write_command>
	delay_ms(10);
 8000264:	200a      	movs	r0, #10
 8000266:	f7ff ff83 	bl	8000170 <delay_ms>
	lcd_write_command(0x30);
 800026a:	2030      	movs	r0, #48	; 0x30
 800026c:	f000 f8d4 	bl	8000418 <lcd_write_command>
	delay_ms(1);
 8000270:	2001      	movs	r0, #1
 8000272:	f7ff ff7d 	bl	8000170 <delay_ms>
	lcd_write_command(0x30);
 8000276:	2030      	movs	r0, #48	; 0x30
 8000278:	f000 f8ce 	bl	8000418 <lcd_write_command>

#ifdef EIGHT_BIT_MODE
//select 8-bit mode
	lcd_write_command(function_set_8bit);
 800027c:	2038      	movs	r0, #56	; 0x38
 800027e:	f000 f8cb 	bl	8000418 <lcd_write_command>
	lcd_write_command(0x02);
	lcd_write_command(function_set_4bit);
	lcd_write_command(0x08);
#endif
	//display off
	lcd_write_command(display_off_cursor_off);
 8000282:	2008      	movs	r0, #8
 8000284:	f000 f8c8 	bl	8000418 <lcd_write_command>
	//clear display
	lcd_clear();
 8000288:	f000 f914 	bl	80004b4 <lcd_clear>
	//entry mode set
	lcd_write_command(Entry_mode);
 800028c:	2006      	movs	r0, #6
 800028e:	f000 f8c3 	bl	8000418 <lcd_write_command>
	//display on cursor blinking
	lcd_write_command(Display_on_Cursor_blinking);
 8000292:	200f      	movs	r0, #15
 8000294:	f000 f8c0 	bl	8000418 <lcd_write_command>
}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	20000000 	.word	0x20000000
 80002a4:	20000030 	.word	0x20000030
 80002a8:	40010800 	.word	0x40010800
 80002ac:	40010c00 	.word	0x40010c00

080002b0 <lcd_kick>:


void lcd_kick(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(lcd_ctrl_port, EN, WRITE_PIN_HIGH);
 80002b4:	2201      	movs	r2, #1
 80002b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ba:	4807      	ldr	r0, [pc, #28]	; (80002d8 <lcd_kick+0x28>)
 80002bc:	f000 fd5e 	bl	8000d7c <MCAL_GPIO_WritePin>
	delay_ms(10);
 80002c0:	200a      	movs	r0, #10
 80002c2:	f7ff ff55 	bl	8000170 <delay_ms>
	MCAL_GPIO_WritePin(lcd_ctrl_port, EN, WRITE_PIN_LOW);
 80002c6:	2200      	movs	r2, #0
 80002c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002cc:	4802      	ldr	r0, [pc, #8]	; (80002d8 <lcd_kick+0x28>)
 80002ce:	f000 fd55 	bl	8000d7c <MCAL_GPIO_WritePin>
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40010c00 	.word	0x40010c00

080002dc <lcd_write_char>:

void lcd_write_char(unsigned char data)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
#ifdef EIGHT_BIT_MODE
	lcd_is_busy();
 80002e6:	f000 f84b 	bl	8000380 <lcd_is_busy>
	//make LCD in write mode
	MCAL_GPIO_WritePin(lcd_ctrl_port, RS, WRITE_PIN_HIGH);
 80002ea:	2201      	movs	r2, #1
 80002ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002f0:	480a      	ldr	r0, [pc, #40]	; (800031c <lcd_write_char+0x40>)
 80002f2:	f000 fd43 	bl	8000d7c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_ctrl_port, RW, WRITE_PIN_LOW);
 80002f6:	2200      	movs	r2, #0
 80002f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002fc:	4807      	ldr	r0, [pc, #28]	; (800031c <lcd_write_char+0x40>)
 80002fe:	f000 fd3d 	bl	8000d7c <MCAL_GPIO_WritePin>
	//write data
	MCAL_GPIO_WritePort(lcd_data_port, data);
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	b29b      	uxth	r3, r3
 8000306:	4619      	mov	r1, r3
 8000308:	4805      	ldr	r0, [pc, #20]	; (8000320 <lcd_write_char+0x44>)
 800030a:	f000 fd55 	bl	8000db8 <MCAL_GPIO_WritePort>
	lcd_kick();
 800030e:	f7ff ffcf 	bl	80002b0 <lcd_kick>
	MCAL_GPIO_WritePin(lcd_ctrl_port, RW, WRITE_PIN_LOW);
	tmp_data = (data << 4);
	MCAL_GPIO_WritePort(lcd_data_port, tmp_data);
	lcd_kick();
#endif
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40010c00 	.word	0x40010c00
 8000320:	40010800 	.word	0x40010800

08000324 <lcd_write_string>:

void lcd_write_string(char *str)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	int character_counter = 0;
 800032c:	2300      	movs	r3, #0
 800032e:	60fb      	str	r3, [r7, #12]
	while(*str != '\0')
 8000330:	e01e      	b.n	8000370 <lcd_write_string+0x4c>
	{
		character_counter++;
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	3301      	adds	r3, #1
 8000336:	60fb      	str	r3, [r7, #12]
		if(character_counter == 17)
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	2b11      	cmp	r3, #17
 800033c:	d104      	bne.n	8000348 <lcd_write_string+0x24>
		{
			//go to second line position 0
			lcd_goto_xy(2,0);
 800033e:	2100      	movs	r1, #0
 8000340:	2002      	movs	r0, #2
 8000342:	f000 f88d 	bl	8000460 <lcd_goto_xy>
 8000346:	e00b      	b.n	8000360 <lcd_write_string+0x3c>
		}
		else if(character_counter > 32)
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	2b20      	cmp	r3, #32
 800034c:	dd08      	ble.n	8000360 <lcd_write_string+0x3c>
		{
			//clear display
			lcd_write_command(clear_display);
 800034e:	2001      	movs	r0, #1
 8000350:	f000 f862 	bl	8000418 <lcd_write_command>
			//go to first line position 0
			lcd_goto_xy(1,0);
 8000354:	2100      	movs	r1, #0
 8000356:	2001      	movs	r0, #1
 8000358:	f000 f882 	bl	8000460 <lcd_goto_xy>
			character_counter = 0;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
		}
		lcd_write_char(*str);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	4618      	mov	r0, r3
 8000366:	f7ff ffb9 	bl	80002dc <lcd_write_char>
		str++;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	3301      	adds	r3, #1
 800036e:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d1dc      	bne.n	8000332 <lcd_write_string+0xe>
	}
}
 8000378:	bf00      	nop
 800037a:	3710      	adds	r7, #16
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <lcd_is_busy>:

void lcd_is_busy(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
	//make data lines as input
	int i;
	for(i=0; i<8; i++)
 8000386:	2300      	movs	r3, #0
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	e00f      	b.n	80003ac <lcd_is_busy+0x2c>
	{
		pin_cfg.PinNumber= LCD_data_pins[i];
 800038c:	4a1e      	ldr	r2, [pc, #120]	; (8000408 <lcd_is_busy+0x88>)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000394:	4b1d      	ldr	r3, [pc, #116]	; (800040c <lcd_is_busy+0x8c>)
 8000396:	801a      	strh	r2, [r3, #0]
		pin_cfg.Mode = GPIO_MODE_Input_FLU;
 8000398:	4b1c      	ldr	r3, [pc, #112]	; (800040c <lcd_is_busy+0x8c>)
 800039a:	2201      	movs	r2, #1
 800039c:	709a      	strb	r2, [r3, #2]
		MCAL_GPIO_Init(lcd_data_dir, &pin_cfg);
 800039e:	491b      	ldr	r1, [pc, #108]	; (800040c <lcd_is_busy+0x8c>)
 80003a0:	481b      	ldr	r0, [pc, #108]	; (8000410 <lcd_is_busy+0x90>)
 80003a2:	f000 fc66 	bl	8000c72 <MCAL_GPIO_Init>
	for(i=0; i<8; i++)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	3301      	adds	r3, #1
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2b07      	cmp	r3, #7
 80003b0:	ddec      	ble.n	800038c <lcd_is_busy+0xc>
	}
	//make LCD in read mode RS = 0, RW = 1
	MCAL_GPIO_WritePin(lcd_ctrl_port, RS, WRITE_PIN_LOW);
 80003b2:	2200      	movs	r2, #0
 80003b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003b8:	4816      	ldr	r0, [pc, #88]	; (8000414 <lcd_is_busy+0x94>)
 80003ba:	f000 fcdf 	bl	8000d7c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_ctrl_port, RW, WRITE_PIN_HIGH);
 80003be:	2201      	movs	r2, #1
 80003c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003c4:	4813      	ldr	r0, [pc, #76]	; (8000414 <lcd_is_busy+0x94>)
 80003c6:	f000 fcd9 	bl	8000d7c <MCAL_GPIO_WritePin>
	lcd_kick();
 80003ca:	f7ff ff71 	bl	80002b0 <lcd_kick>
	//make data lines as output
	for(i=0; i<8; i++)
 80003ce:	2300      	movs	r3, #0
 80003d0:	607b      	str	r3, [r7, #4]
 80003d2:	e012      	b.n	80003fa <lcd_is_busy+0x7a>
	{
		pin_cfg.PinNumber= LCD_data_pins[i];
 80003d4:	4a0c      	ldr	r2, [pc, #48]	; (8000408 <lcd_is_busy+0x88>)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80003dc:	4b0b      	ldr	r3, [pc, #44]	; (800040c <lcd_is_busy+0x8c>)
 80003de:	801a      	strh	r2, [r3, #0]
		pin_cfg.Mode = GPIO_MODE_Output_PP;
 80003e0:	4b0a      	ldr	r3, [pc, #40]	; (800040c <lcd_is_busy+0x8c>)
 80003e2:	2204      	movs	r2, #4
 80003e4:	709a      	strb	r2, [r3, #2]
		pin_cfg.Output_speed = GPIO_SPEED_10M;
 80003e6:	4b09      	ldr	r3, [pc, #36]	; (800040c <lcd_is_busy+0x8c>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	70da      	strb	r2, [r3, #3]
		MCAL_GPIO_Init(lcd_data_dir, &pin_cfg);
 80003ec:	4907      	ldr	r1, [pc, #28]	; (800040c <lcd_is_busy+0x8c>)
 80003ee:	4808      	ldr	r0, [pc, #32]	; (8000410 <lcd_is_busy+0x90>)
 80003f0:	f000 fc3f 	bl	8000c72 <MCAL_GPIO_Init>
	for(i=0; i<8; i++)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	3301      	adds	r3, #1
 80003f8:	607b      	str	r3, [r7, #4]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2b07      	cmp	r3, #7
 80003fe:	dde9      	ble.n	80003d4 <lcd_is_busy+0x54>
	}
}
 8000400:	bf00      	nop
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	20000000 	.word	0x20000000
 800040c:	20000030 	.word	0x20000030
 8000410:	40010800 	.word	0x40010800
 8000414:	40010c00 	.word	0x40010c00

08000418 <lcd_write_command>:

void lcd_write_command(unsigned char command)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
#ifdef EIGHT_BIT_MODE
	lcd_is_busy();
 8000422:	f7ff ffad 	bl	8000380 <lcd_is_busy>
	//switch to write mode and select instruction reg to send command
	MCAL_GPIO_WritePin(lcd_ctrl_port, RS, WRITE_PIN_LOW);
 8000426:	2200      	movs	r2, #0
 8000428:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800042c:	480a      	ldr	r0, [pc, #40]	; (8000458 <lcd_write_command+0x40>)
 800042e:	f000 fca5 	bl	8000d7c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_ctrl_port, RW, WRITE_PIN_LOW);
 8000432:	2200      	movs	r2, #0
 8000434:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000438:	4807      	ldr	r0, [pc, #28]	; (8000458 <lcd_write_command+0x40>)
 800043a:	f000 fc9f 	bl	8000d7c <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePort(lcd_data_port, command);
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	b29b      	uxth	r3, r3
 8000442:	4619      	mov	r1, r3
 8000444:	4805      	ldr	r0, [pc, #20]	; (800045c <lcd_write_command+0x44>)
 8000446:	f000 fcb7 	bl	8000db8 <MCAL_GPIO_WritePort>
	lcd_kick();
 800044a:	f7ff ff31 	bl	80002b0 <lcd_kick>
	MCAL_GPIO_WritePin(lcd_ctrl_port, RW, WRITE_PIN_LOW);
	tmp_cmd = (command << 4);
	MCAL_GPIO_WritePort(lcd_data_port, tmp_cmd);
	lcd_kick();
#endif
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40010c00 	.word	0x40010c00
 800045c:	40010800 	.word	0x40010800

08000460 <lcd_goto_xy>:


void lcd_goto_xy(int line, int position)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	6039      	str	r1, [r7, #0]
	if(line == 1)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	2b01      	cmp	r3, #1
 800046e:	d10d      	bne.n	800048c <lcd_goto_xy+0x2c>
	{
		if(position >= 0 && position < 16)
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	2b00      	cmp	r3, #0
 8000474:	db1a      	blt.n	80004ac <lcd_goto_xy+0x4c>
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	2b0f      	cmp	r3, #15
 800047a:	dc17      	bgt.n	80004ac <lcd_goto_xy+0x4c>
		{
			lcd_write_command(cursor_first_line + position);
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	b2db      	uxtb	r3, r3
 8000480:	3b80      	subs	r3, #128	; 0x80
 8000482:	b2db      	uxtb	r3, r3
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ffc7 	bl	8000418 <lcd_write_command>
		if(position >= 0 && position < 16)
		{
			lcd_write_command(cursor_second_line + position);
		}
	}
}
 800048a:	e00f      	b.n	80004ac <lcd_goto_xy+0x4c>
	else if (line == 2)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2b02      	cmp	r3, #2
 8000490:	d10c      	bne.n	80004ac <lcd_goto_xy+0x4c>
		if(position >= 0 && position < 16)
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	db09      	blt.n	80004ac <lcd_goto_xy+0x4c>
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	2b0f      	cmp	r3, #15
 800049c:	dc06      	bgt.n	80004ac <lcd_goto_xy+0x4c>
			lcd_write_command(cursor_second_line + position);
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	3b40      	subs	r3, #64	; 0x40
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff ffb6 	bl	8000418 <lcd_write_command>
}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <lcd_clear>:

void lcd_clear(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	lcd_write_command(clear_display);
 80004b8:	2001      	movs	r0, #1
 80004ba:	f7ff ffad 	bl	8000418 <lcd_write_command>
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}

080004c2 <delay>:


uint32_t IRQ_Flag = 0;

void delay(uint32_t time)
{
 80004c2:	b480      	push	{r7}
 80004c4:	b085      	sub	sp, #20
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0; i<time; i++)
 80004ca:	2300      	movs	r3, #0
 80004cc:	60fb      	str	r3, [r7, #12]
 80004ce:	e00b      	b.n	80004e8 <delay+0x26>
		for(j=0; j<255; j++);
 80004d0:	2300      	movs	r3, #0
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	e002      	b.n	80004dc <delay+0x1a>
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	3301      	adds	r3, #1
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	2bfe      	cmp	r3, #254	; 0xfe
 80004e0:	d9f9      	bls.n	80004d6 <delay+0x14>
	for(i=0; i<time; i++)
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	3301      	adds	r3, #1
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fa      	ldr	r2, [r7, #12]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d3ef      	bcc.n	80004d0 <delay+0xe>
}
 80004f0:	bf00      	nop
 80004f2:	3714      	adds	r7, #20
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr
	...

080004fc <EXTI9_CALLBACK>:


void EXTI9_CALLBACK(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	lcd_write_string("IRQ EXTI9 IS HAPPEN _|- ");
 8000500:	4805      	ldr	r0, [pc, #20]	; (8000518 <EXTI9_CALLBACK+0x1c>)
 8000502:	f7ff ff0f 	bl	8000324 <lcd_write_string>
	delay(2000);
 8000506:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800050a:	f7ff ffda 	bl	80004c2 <delay>
	IRQ_Flag = 1;
 800050e:	4b03      	ldr	r3, [pc, #12]	; (800051c <EXTI9_CALLBACK+0x20>)
 8000510:	2201      	movs	r2, #1
 8000512:	601a      	str	r2, [r3, #0]
}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	08000e34 	.word	0x08000e34
 800051c:	2000002c 	.word	0x2000002c

08000520 <clock_init>:

void clock_init(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <clock_init+0x30>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a09      	ldr	r2, [pc, #36]	; (8000550 <clock_init+0x30>)
 800052a:	f043 0304 	orr.w	r3, r3, #4
 800052e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <clock_init+0x30>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a06      	ldr	r2, [pc, #24]	; (8000550 <clock_init+0x30>)
 8000536:	f043 0308 	orr.w	r3, r3, #8
 800053a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <clock_init+0x30>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a03      	ldr	r2, [pc, #12]	; (8000550 <clock_init+0x30>)
 8000542:	f043 0301 	orr.w	r3, r3, #1
 8000546:	6193      	str	r3, [r2, #24]
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	40021000 	.word	0x40021000

08000554 <main>:


int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0
	clock_init();
 800055a:	f7ff ffe1 	bl	8000520 <clock_init>
	lcd_init();
 800055e:	f7ff fe23 	bl	80001a8 <lcd_init>
	lcd_clear();
 8000562:	f7ff ffa7 	bl	80004b4 <lcd_clear>
	EXTI_PINCONFIG_t pin_config;
	pin_config.EXTI_PIN = EXTI9PB9;
 8000566:	4a0e      	ldr	r2, [pc, #56]	; (80005a0 <main+0x4c>)
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	ca07      	ldmia	r2, {r0, r1, r2}
 800056c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	pin_config.Trigger_Case = EXTI_TRIGGER_RISING;
 8000570:	2301      	movs	r3, #1
 8000572:	743b      	strb	r3, [r7, #16]
	pin_config.P_IRQ_callback = EXTI9_CALLBACK;
 8000574:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <main+0x50>)
 8000576:	617b      	str	r3, [r7, #20]
	pin_config.IRQ_EN = EXTI_IRQ_ENABLE;
 8000578:	2301      	movs	r3, #1
 800057a:	747b      	strb	r3, [r7, #17]
	MCAL_EXTI_GPIO_Init(&pin_config);
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	4618      	mov	r0, r3
 8000580:	f000 f9f8 	bl	8000974 <MCAL_EXTI_GPIO_Init>
	IRQ_Flag = 1;
 8000584:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <main+0x54>)
 8000586:	2201      	movs	r2, #1
 8000588:	601a      	str	r2, [r3, #0]
	while(1)
	{
		if(IRQ_Flag)
 800058a:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <main+0x54>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d0fb      	beq.n	800058a <main+0x36>
		{
			lcd_clear();
 8000592:	f7ff ff8f 	bl	80004b4 <lcd_clear>
			IRQ_Flag = 0;
 8000596:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <main+0x54>)
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
		if(IRQ_Flag)
 800059c:	e7f5      	b.n	800058a <main+0x36>
 800059e:	bf00      	nop
 80005a0:	08000e50 	.word	0x08000e50
 80005a4:	080004fd 	.word	0x080004fd
 80005a8:	2000002c 	.word	0x2000002c

080005ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005ac:	480d      	ldr	r0, [pc, #52]	; (80005e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ae:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b4:	480c      	ldr	r0, [pc, #48]	; (80005e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005b6:	490d      	ldr	r1, [pc, #52]	; (80005ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b8:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <LoopForever+0xe>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005bc:	e002      	b.n	80005c4 <LoopCopyDataInit>

080005be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c2:	3304      	adds	r3, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c8:	d3f9      	bcc.n	80005be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ca:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005cc:	4c0a      	ldr	r4, [pc, #40]	; (80005f8 <LoopForever+0x16>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d0:	e001      	b.n	80005d6 <LoopFillZerobss>

080005d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d4:	3204      	adds	r2, #4

080005d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d8:	d3fb      	bcc.n	80005d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005da:	f000 fbfb 	bl	8000dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005de:	f7ff ffb9 	bl	8000554 <main>

080005e2 <LoopForever>:

LoopForever:
    b LoopForever
 80005e2:	e7fe      	b.n	80005e2 <LoopForever>
  ldr   r0, =_estack
 80005e4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80005e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80005f0:	08000e64 	.word	0x08000e64
  ldr r2, =_sbss
 80005f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80005f8:	20000074 	.word	0x20000074

080005fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005fc:	e7fe      	b.n	80005fc <ADC1_2_IRQHandler>
	...

08000600 <Enable_NVIC>:
 *=======================================================================
 *
*/

void Enable_NVIC(uint8_t LINE_NO)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
	switch(LINE_NO)
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	2b0f      	cmp	r3, #15
 800060e:	d854      	bhi.n	80006ba <Enable_NVIC+0xba>
 8000610:	a201      	add	r2, pc, #4	; (adr r2, 8000618 <Enable_NVIC+0x18>)
 8000612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000616:	bf00      	nop
 8000618:	08000659 	.word	0x08000659
 800061c:	08000667 	.word	0x08000667
 8000620:	08000675 	.word	0x08000675
 8000624:	08000683 	.word	0x08000683
 8000628:	08000691 	.word	0x08000691
 800062c:	0800069f 	.word	0x0800069f
 8000630:	0800069f 	.word	0x0800069f
 8000634:	0800069f 	.word	0x0800069f
 8000638:	0800069f 	.word	0x0800069f
 800063c:	0800069f 	.word	0x0800069f
 8000640:	080006ad 	.word	0x080006ad
 8000644:	080006ad 	.word	0x080006ad
 8000648:	080006ad 	.word	0x080006ad
 800064c:	080006ad 	.word	0x080006ad
 8000650:	080006ad 	.word	0x080006ad
 8000654:	080006ad 	.word	0x080006ad
	{
	case EXTI0  :
	{
		NVIC_IRQ6_EXTI0_ENABLE;
 8000658:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <Enable_NVIC+0xc4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a19      	ldr	r2, [pc, #100]	; (80006c4 <Enable_NVIC+0xc4>)
 800065e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000662:	6013      	str	r3, [r2, #0]
		break;
 8000664:	e029      	b.n	80006ba <Enable_NVIC+0xba>
	}
	case EXTI1  :
	{
		NVIC_IRQ7_EXTI1_ENABLE;
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <Enable_NVIC+0xc4>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a16      	ldr	r2, [pc, #88]	; (80006c4 <Enable_NVIC+0xc4>)
 800066c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000670:	6013      	str	r3, [r2, #0]
		break;
 8000672:	e022      	b.n	80006ba <Enable_NVIC+0xba>
	}
	case EXTI2  :
	{
		NVIC_IRQ8_EXTI2_ENABLE;
 8000674:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <Enable_NVIC+0xc4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <Enable_NVIC+0xc4>)
 800067a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800067e:	6013      	str	r3, [r2, #0]
		break;
 8000680:	e01b      	b.n	80006ba <Enable_NVIC+0xba>
	}
	case EXTI3  :
	{
		NVIC_IRQ9_EXTI3_ENABLE;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <Enable_NVIC+0xc4>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a0f      	ldr	r2, [pc, #60]	; (80006c4 <Enable_NVIC+0xc4>)
 8000688:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800068c:	6013      	str	r3, [r2, #0]
		break;
 800068e:	e014      	b.n	80006ba <Enable_NVIC+0xba>
	}
	case EXTI4  :
	{
		NVIC_IRQ10_EXTI4_ENABLE;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <Enable_NVIC+0xc4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <Enable_NVIC+0xc4>)
 8000696:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800069a:	6013      	str	r3, [r2, #0]
		break;
 800069c:	e00d      	b.n	80006ba <Enable_NVIC+0xba>
	case EXTI6  :
	case EXTI7  :
	case EXTI8  :
	case EXTI9  :
	{
		NVIC_IRQ23_EXTI5_9_ENABLE;
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <Enable_NVIC+0xc4>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <Enable_NVIC+0xc4>)
 80006a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006a8:	6013      	str	r3, [r2, #0]
		break;
 80006aa:	e006      	b.n	80006ba <Enable_NVIC+0xba>
	case EXTI12  :
	case EXTI13  :
	case EXTI14  :
	case EXTI15  :
	{
		NVIC_IRQ40_EXTI10_15_ENABLE;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <Enable_NVIC+0xc8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a05      	ldr	r2, [pc, #20]	; (80006c8 <Enable_NVIC+0xc8>)
 80006b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b6:	6013      	str	r3, [r2, #0]
		break;
 80006b8:	bf00      	nop
	}
	}
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	e000e100 	.word	0xe000e100
 80006c8:	e000e104 	.word	0xe000e104

080006cc <Disable_NVIC>:


//=======================================================================

void Disable_NVIC(uint8_t LINE_NO)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
	switch(LINE_NO)
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b0f      	cmp	r3, #15
 80006da:	d854      	bhi.n	8000786 <Disable_NVIC+0xba>
 80006dc:	a201      	add	r2, pc, #4	; (adr r2, 80006e4 <Disable_NVIC+0x18>)
 80006de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e2:	bf00      	nop
 80006e4:	08000725 	.word	0x08000725
 80006e8:	08000733 	.word	0x08000733
 80006ec:	08000741 	.word	0x08000741
 80006f0:	0800074f 	.word	0x0800074f
 80006f4:	0800075d 	.word	0x0800075d
 80006f8:	0800076b 	.word	0x0800076b
 80006fc:	0800076b 	.word	0x0800076b
 8000700:	0800076b 	.word	0x0800076b
 8000704:	0800076b 	.word	0x0800076b
 8000708:	0800076b 	.word	0x0800076b
 800070c:	08000779 	.word	0x08000779
 8000710:	08000779 	.word	0x08000779
 8000714:	08000779 	.word	0x08000779
 8000718:	08000779 	.word	0x08000779
 800071c:	08000779 	.word	0x08000779
 8000720:	08000779 	.word	0x08000779
	{
	case EXTI0  :
	{
		NVIC_IRQ6_EXTI0_DISABLE;
 8000724:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <Disable_NVIC+0xc4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a19      	ldr	r2, [pc, #100]	; (8000790 <Disable_NVIC+0xc4>)
 800072a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800072e:	6013      	str	r3, [r2, #0]
		break;
 8000730:	e029      	b.n	8000786 <Disable_NVIC+0xba>
	}
	case EXTI1  :
	{
		NVIC_IRQ7_EXTI1_DISABLE;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <Disable_NVIC+0xc4>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a16      	ldr	r2, [pc, #88]	; (8000790 <Disable_NVIC+0xc4>)
 8000738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800073c:	6013      	str	r3, [r2, #0]
		break;
 800073e:	e022      	b.n	8000786 <Disable_NVIC+0xba>
	}
	case EXTI2  :
	{
		NVIC_IRQ8_EXTI2_DISABLE;
 8000740:	4b13      	ldr	r3, [pc, #76]	; (8000790 <Disable_NVIC+0xc4>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a12      	ldr	r2, [pc, #72]	; (8000790 <Disable_NVIC+0xc4>)
 8000746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800074a:	6013      	str	r3, [r2, #0]
		break;
 800074c:	e01b      	b.n	8000786 <Disable_NVIC+0xba>
	}
	case EXTI3  :
	{
		NVIC_IRQ9_EXTI3_DISABLE;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <Disable_NVIC+0xc4>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <Disable_NVIC+0xc4>)
 8000754:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000758:	6013      	str	r3, [r2, #0]
		break;
 800075a:	e014      	b.n	8000786 <Disable_NVIC+0xba>
	}
	case EXTI4  :
	{
		NVIC_IRQ10_EXTI4_DISABLE;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <Disable_NVIC+0xc4>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <Disable_NVIC+0xc4>)
 8000762:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000766:	6013      	str	r3, [r2, #0]
		break;
 8000768:	e00d      	b.n	8000786 <Disable_NVIC+0xba>
	case EXTI6  :
	case EXTI7  :
	case EXTI8  :
	case EXTI9  :
	{
		NVIC_IRQ23_EXTI5_9_DISABLE;
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <Disable_NVIC+0xc4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a08      	ldr	r2, [pc, #32]	; (8000790 <Disable_NVIC+0xc4>)
 8000770:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000774:	6013      	str	r3, [r2, #0]
		break;
 8000776:	e006      	b.n	8000786 <Disable_NVIC+0xba>
	case EXTI12  :
	case EXTI13  :
	case EXTI14  :
	case EXTI15  :
	{
		NVIC_IRQ40_EXTI10_15_DISABLE;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <Disable_NVIC+0xc8>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a05      	ldr	r2, [pc, #20]	; (8000794 <Disable_NVIC+0xc8>)
 800077e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000782:	6013      	str	r3, [r2, #0]
		break;
 8000784:	bf00      	nop
	}
	}
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	e000e180 	.word	0xe000e180
 8000794:	e000e184 	.word	0xe000e184

08000798 <EXTI_Update>:

//=======================================================================

void EXTI_Update(EXTI_PINCONFIG_t * EXTI_Config)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	//1- select GPIO pin as AF INPUT --> input floating
	GPIO_Pinconfig_t PIN_cfg;
	PIN_cfg.PinNumber = EXTI_Config->EXTI_PIN.GPIO_Pin;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	891b      	ldrh	r3, [r3, #8]
 80007a4:	813b      	strh	r3, [r7, #8]
	PIN_cfg.Mode = GPIO_MODE_Input_FLU;
 80007a6:	2301      	movs	r3, #1
 80007a8:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &PIN_cfg);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	f107 0208 	add.w	r2, r7, #8
 80007b2:	4611      	mov	r1, r2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 fa5c 	bl	8000c72 <MCAL_GPIO_Init>
	//===============================================================

	//2- Configure AFIO to route the selected pin to EXTI specified line

	uint8_t EXTICR_index = EXTI_Config->EXTI_PIN.EXTI_Line_No / 4 ;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	089b      	lsrs	r3, r3, #2
 80007c0:	73fb      	strb	r3, [r7, #15]
	uint8_t position = (EXTI_Config->EXTI_PIN.EXTI_Line_No % 4) * 4 ;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f003 0303 	and.w	r3, r3, #3
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	73bb      	strb	r3, [r7, #14]

	//clear four bits for selected EXTI line
	AFIO->EXTICR[EXTICR_index] &= ~(0xf << position);
 80007d0:	4a61      	ldr	r2, [pc, #388]	; (8000958 <EXTI_Update+0x1c0>)
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
 80007d4:	3302      	adds	r3, #2
 80007d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007da:	7bbb      	ldrb	r3, [r7, #14]
 80007dc:	210f      	movs	r1, #15
 80007de:	fa01 f303 	lsl.w	r3, r1, r3
 80007e2:	43db      	mvns	r3, r3
 80007e4:	4618      	mov	r0, r3
 80007e6:	495c      	ldr	r1, [pc, #368]	; (8000958 <EXTI_Update+0x1c0>)
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	4002      	ands	r2, r0
 80007ec:	3302      	adds	r3, #2
 80007ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//set EXTICR(0,1,2,3) registers value
	AFIO->EXTICR[EXTICR_index] |= ((AFIO_EXTI_MAPPING(EXTI_Config ->EXTI_PIN.GPIO_Port) & 0xF) << position);
 80007f2:	4a59      	ldr	r2, [pc, #356]	; (8000958 <EXTI_Update+0x1c0>)
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	3302      	adds	r3, #2
 80007f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	4956      	ldr	r1, [pc, #344]	; (800095c <EXTI_Update+0x1c4>)
 8000802:	428b      	cmp	r3, r1
 8000804:	d016      	beq.n	8000834 <EXTI_Update+0x9c>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	4955      	ldr	r1, [pc, #340]	; (8000960 <EXTI_Update+0x1c8>)
 800080c:	428b      	cmp	r3, r1
 800080e:	d00f      	beq.n	8000830 <EXTI_Update+0x98>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	4953      	ldr	r1, [pc, #332]	; (8000964 <EXTI_Update+0x1cc>)
 8000816:	428b      	cmp	r3, r1
 8000818:	d008      	beq.n	800082c <EXTI_Update+0x94>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	4952      	ldr	r1, [pc, #328]	; (8000968 <EXTI_Update+0x1d0>)
 8000820:	428b      	cmp	r3, r1
 8000822:	d101      	bne.n	8000828 <EXTI_Update+0x90>
 8000824:	2303      	movs	r3, #3
 8000826:	e006      	b.n	8000836 <EXTI_Update+0x9e>
 8000828:	2300      	movs	r3, #0
 800082a:	e004      	b.n	8000836 <EXTI_Update+0x9e>
 800082c:	2302      	movs	r3, #2
 800082e:	e002      	b.n	8000836 <EXTI_Update+0x9e>
 8000830:	2301      	movs	r3, #1
 8000832:	e000      	b.n	8000836 <EXTI_Update+0x9e>
 8000834:	2300      	movs	r3, #0
 8000836:	7bb9      	ldrb	r1, [r7, #14]
 8000838:	408b      	lsls	r3, r1
 800083a:	4618      	mov	r0, r3
 800083c:	4946      	ldr	r1, [pc, #280]	; (8000958 <EXTI_Update+0x1c0>)
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	4302      	orrs	r2, r0
 8000842:	3302      	adds	r3, #2
 8000844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//===============================================================

	//3- select trigger case(RISING, FALLING OR BOTH)
	//reset registers for specified EXTI line
	EXTI->RTSR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_Line_No) ;
 8000848:	4b48      	ldr	r3, [pc, #288]	; (800096c <EXTI_Update+0x1d4>)
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	7812      	ldrb	r2, [r2, #0]
 8000850:	4611      	mov	r1, r2
 8000852:	2201      	movs	r2, #1
 8000854:	408a      	lsls	r2, r1
 8000856:	43d2      	mvns	r2, r2
 8000858:	4611      	mov	r1, r2
 800085a:	4a44      	ldr	r2, [pc, #272]	; (800096c <EXTI_Update+0x1d4>)
 800085c:	400b      	ands	r3, r1
 800085e:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_Line_No) ;
 8000860:	4b42      	ldr	r3, [pc, #264]	; (800096c <EXTI_Update+0x1d4>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	7812      	ldrb	r2, [r2, #0]
 8000868:	4611      	mov	r1, r2
 800086a:	2201      	movs	r2, #1
 800086c:	408a      	lsls	r2, r1
 800086e:	43d2      	mvns	r2, r2
 8000870:	4611      	mov	r1, r2
 8000872:	4a3e      	ldr	r2, [pc, #248]	; (800096c <EXTI_Update+0x1d4>)
 8000874:	400b      	ands	r3, r1
 8000876:	60d3      	str	r3, [r2, #12]

	//select trigger case
	if (EXTI_Config->Trigger_Case == EXTI_TRIGGER_RISING)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	7b1b      	ldrb	r3, [r3, #12]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d10b      	bne.n	8000898 <EXTI_Update+0x100>
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_Line_No);
 8000880:	4b3a      	ldr	r3, [pc, #232]	; (800096c <EXTI_Update+0x1d4>)
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	7812      	ldrb	r2, [r2, #0]
 8000888:	4611      	mov	r1, r2
 800088a:	2201      	movs	r2, #1
 800088c:	408a      	lsls	r2, r1
 800088e:	4611      	mov	r1, r2
 8000890:	4a36      	ldr	r2, [pc, #216]	; (800096c <EXTI_Update+0x1d4>)
 8000892:	430b      	orrs	r3, r1
 8000894:	6093      	str	r3, [r2, #8]
 8000896:	e029      	b.n	80008ec <EXTI_Update+0x154>
	else if (EXTI_Config->Trigger_Case == EXTI_TRIGGER_FALLING)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	7b1b      	ldrb	r3, [r3, #12]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d10b      	bne.n	80008b8 <EXTI_Update+0x120>
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_Line_No);
 80008a0:	4b32      	ldr	r3, [pc, #200]	; (800096c <EXTI_Update+0x1d4>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	7812      	ldrb	r2, [r2, #0]
 80008a8:	4611      	mov	r1, r2
 80008aa:	2201      	movs	r2, #1
 80008ac:	408a      	lsls	r2, r1
 80008ae:	4611      	mov	r1, r2
 80008b0:	4a2e      	ldr	r2, [pc, #184]	; (800096c <EXTI_Update+0x1d4>)
 80008b2:	430b      	orrs	r3, r1
 80008b4:	60d3      	str	r3, [r2, #12]
 80008b6:	e019      	b.n	80008ec <EXTI_Update+0x154>
	else if (EXTI_Config->Trigger_Case == EXTI_TRIGGER_FALLINGAndRISING)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	7b1b      	ldrb	r3, [r3, #12]
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d115      	bne.n	80008ec <EXTI_Update+0x154>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_Line_No);
 80008c0:	4b2a      	ldr	r3, [pc, #168]	; (800096c <EXTI_Update+0x1d4>)
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	687a      	ldr	r2, [r7, #4]
 80008c6:	7812      	ldrb	r2, [r2, #0]
 80008c8:	4611      	mov	r1, r2
 80008ca:	2201      	movs	r2, #1
 80008cc:	408a      	lsls	r2, r1
 80008ce:	4611      	mov	r1, r2
 80008d0:	4a26      	ldr	r2, [pc, #152]	; (800096c <EXTI_Update+0x1d4>)
 80008d2:	430b      	orrs	r3, r1
 80008d4:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_Line_No);
 80008d6:	4b25      	ldr	r3, [pc, #148]	; (800096c <EXTI_Update+0x1d4>)
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	7812      	ldrb	r2, [r2, #0]
 80008de:	4611      	mov	r1, r2
 80008e0:	2201      	movs	r2, #1
 80008e2:	408a      	lsls	r2, r1
 80008e4:	4611      	mov	r1, r2
 80008e6:	4a21      	ldr	r2, [pc, #132]	; (800096c <EXTI_Update+0x1d4>)
 80008e8:	430b      	orrs	r3, r1
 80008ea:	60d3      	str	r3, [r2, #12]
	}
	//===============================================================

	//4- call call_back function in ISR
	GP_IRQ_callback[EXTI_Config->EXTI_PIN.EXTI_Line_No] = EXTI_Config->P_IRQ_callback;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	691b      	ldr	r3, [r3, #16]
 80008f6:	4a1e      	ldr	r2, [pc, #120]	; (8000970 <EXTI_Update+0x1d8>)
 80008f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//===============================================================

	//5- Enable or Disable EXTI IRQ and NVIC
	if (EXTI_Config->IRQ_EN == EXTI_IRQ_ENABLE)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	7b5b      	ldrb	r3, [r3, #13]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d110      	bne.n	8000926 <EXTI_Update+0x18e>
	{
		EXTI ->IMR |= (1 << EXTI_Config->EXTI_PIN.EXTI_Line_No);
 8000904:	4b19      	ldr	r3, [pc, #100]	; (800096c <EXTI_Update+0x1d4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	687a      	ldr	r2, [r7, #4]
 800090a:	7812      	ldrb	r2, [r2, #0]
 800090c:	4611      	mov	r1, r2
 800090e:	2201      	movs	r2, #1
 8000910:	408a      	lsls	r2, r1
 8000912:	4611      	mov	r1, r2
 8000914:	4a15      	ldr	r2, [pc, #84]	; (800096c <EXTI_Update+0x1d4>)
 8000916:	430b      	orrs	r3, r1
 8000918:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_Line_No) ;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fe6e 	bl	8000600 <Enable_NVIC>
	{
		EXTI ->IMR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_Line_No);
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_Line_No) ;
	}

}
 8000924:	e014      	b.n	8000950 <EXTI_Update+0x1b8>
	else if (EXTI_Config->IRQ_EN == EXTI_IRQ_DISABLE)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	7b5b      	ldrb	r3, [r3, #13]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d110      	bne.n	8000950 <EXTI_Update+0x1b8>
		EXTI ->IMR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_Line_No);
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <EXTI_Update+0x1d4>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	7812      	ldrb	r2, [r2, #0]
 8000936:	4611      	mov	r1, r2
 8000938:	2201      	movs	r2, #1
 800093a:	408a      	lsls	r2, r1
 800093c:	43d2      	mvns	r2, r2
 800093e:	4611      	mov	r1, r2
 8000940:	4a0a      	ldr	r2, [pc, #40]	; (800096c <EXTI_Update+0x1d4>)
 8000942:	400b      	ands	r3, r1
 8000944:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_Line_No) ;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff febe 	bl	80006cc <Disable_NVIC>
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40010000 	.word	0x40010000
 800095c:	40010800 	.word	0x40010800
 8000960:	40010c00 	.word	0x40010c00
 8000964:	40011000 	.word	0x40011000
 8000968:	40011400 	.word	0x40011400
 800096c:	40010400 	.word	0x40010400
 8000970:	20000034 	.word	0x20000034

08000974 <MCAL_EXTI_GPIO_Init>:
 * Note 			-	STM32f103c6 MCU has GPIO A,B,B,D,E modules
 *                      but LQFP48 Package has only A,B, Part of C,D
 *                      Also mandatory to enable RCC clock for AFIO and the corresponding GPIO
 */
void MCAL_EXTI_GPIO_Init(EXTI_PINCONFIG_t * EXTI_Config)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	EXTI_Update(EXTI_Config);
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff ff0b 	bl	8000798 <EXTI_Update>
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <EXTI0_IRQHandler>:
 *=======================================================================
 *
*/

void EXTI0_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	//clear pending register for specific EXTI line (clear by writing 1)
	EXTI->PR |= 1 << 0 ;
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <EXTI0_IRQHandler+0x1c>)
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <EXTI0_IRQHandler+0x1c>)
 8000996:	f043 0301 	orr.w	r3, r3, #1
 800099a:	6153      	str	r3, [r2, #20]
	//call IRQ call_back
	GP_IRQ_callback[0]();
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <EXTI0_IRQHandler+0x20>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4798      	blx	r3
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40010400 	.word	0x40010400
 80009ac:	20000034 	.word	0x20000034

080009b0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	//clear pending register for specific EXTI line (clear by writing 1)
	EXTI->PR |= 1 << 1 ;
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <EXTI1_IRQHandler+0x1c>)
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	4a04      	ldr	r2, [pc, #16]	; (80009cc <EXTI1_IRQHandler+0x1c>)
 80009ba:	f043 0302 	orr.w	r3, r3, #2
 80009be:	6153      	str	r3, [r2, #20]
	//call IRQ call_back
	GP_IRQ_callback[1]();
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <EXTI1_IRQHandler+0x20>)
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	4798      	blx	r3
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40010400 	.word	0x40010400
 80009d0:	20000034 	.word	0x20000034

080009d4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	//clear pending register for specific EXTI line (clear by writing 1)
	EXTI->PR |= 1 << 2 ;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <EXTI2_IRQHandler+0x1c>)
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <EXTI2_IRQHandler+0x1c>)
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	6153      	str	r3, [r2, #20]
	//call IRQ call_back
	GP_IRQ_callback[2]();
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <EXTI2_IRQHandler+0x20>)
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	4798      	blx	r3
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40010400 	.word	0x40010400
 80009f4:	20000034 	.word	0x20000034

080009f8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	//clear pending register for specific EXTI line (clear by writing 1)
	EXTI->PR |= 1 << 3 ;
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <EXTI3_IRQHandler+0x1c>)
 80009fe:	695b      	ldr	r3, [r3, #20]
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <EXTI3_IRQHandler+0x1c>)
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	6153      	str	r3, [r2, #20]
	//call IRQ call_back
	GP_IRQ_callback[3]();
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <EXTI3_IRQHandler+0x20>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	4798      	blx	r3
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40010400 	.word	0x40010400
 8000a18:	20000034 	.word	0x20000034

08000a1c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	//clear pending register for specific EXTI line (clear by writing 1)
	EXTI->PR |= 1 << 4 ;
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <EXTI4_IRQHandler+0x1c>)
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <EXTI4_IRQHandler+0x1c>)
 8000a26:	f043 0310 	orr.w	r3, r3, #16
 8000a2a:	6153      	str	r3, [r2, #20]
	//call IRQ call_back
	GP_IRQ_callback[4]();
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <EXTI4_IRQHandler+0x20>)
 8000a2e:	691b      	ldr	r3, [r3, #16]
 8000a30:	4798      	blx	r3
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40010400 	.word	0x40010400
 8000a3c:	20000034 	.word	0x20000034

08000a40 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 5)	{EXTI->PR |= (1 << 5) 	;GP_IRQ_callback[5]()	;	}
 8000a44:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a46:	695b      	ldr	r3, [r3, #20]
 8000a48:	f003 0320 	and.w	r3, r3, #32
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d008      	beq.n	8000a62 <EXTI9_5_IRQHandler+0x22>
 8000a50:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a52:	695b      	ldr	r3, [r3, #20]
 8000a54:	4a22      	ldr	r2, [pc, #136]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a56:	f043 0320 	orr.w	r3, r3, #32
 8000a5a:	6153      	str	r3, [r2, #20]
 8000a5c:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <EXTI9_5_IRQHandler+0xa4>)
 8000a5e:	695b      	ldr	r3, [r3, #20]
 8000a60:	4798      	blx	r3
	if(EXTI->PR & 1 << 6)	{EXTI->PR |= (1 << 6) 	;GP_IRQ_callback[6]()	;	}
 8000a62:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d008      	beq.n	8000a80 <EXTI9_5_IRQHandler+0x40>
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	4a1b      	ldr	r2, [pc, #108]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a78:	6153      	str	r3, [r2, #20]
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <EXTI9_5_IRQHandler+0xa4>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	4798      	blx	r3
	if(EXTI->PR & 1 << 7)	{EXTI->PR |= (1 << 7) 	;GP_IRQ_callback[7]()	;	}
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a82:	695b      	ldr	r3, [r3, #20]
 8000a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d008      	beq.n	8000a9e <EXTI9_5_IRQHandler+0x5e>
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	4a13      	ldr	r2, [pc, #76]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a96:	6153      	str	r3, [r2, #20]
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <EXTI9_5_IRQHandler+0xa4>)
 8000a9a:	69db      	ldr	r3, [r3, #28]
 8000a9c:	4798      	blx	r3
	if(EXTI->PR & 1 << 8)	{EXTI->PR |= (1 << 8) 	;GP_IRQ_callback[8]()	;	}
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d008      	beq.n	8000abc <EXTI9_5_IRQHandler+0x7c>
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	4a0c      	ldr	r2, [pc, #48]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab4:	6153      	str	r3, [r2, #20]
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <EXTI9_5_IRQHandler+0xa4>)
 8000ab8:	6a1b      	ldr	r3, [r3, #32]
 8000aba:	4798      	blx	r3
	if(EXTI->PR & 1 << 9)	{EXTI->PR |= (1 << 9) 	;GP_IRQ_callback[9]()	;	}
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d008      	beq.n	8000ada <EXTI9_5_IRQHandler+0x9a>
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000aca:	695b      	ldr	r3, [r3, #20]
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <EXTI9_5_IRQHandler+0xa0>)
 8000ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad2:	6153      	str	r3, [r2, #20]
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <EXTI9_5_IRQHandler+0xa4>)
 8000ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad8:	4798      	blx	r3
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40010400 	.word	0x40010400
 8000ae4:	20000034 	.word	0x20000034

08000ae8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1 << 10)	{EXTI->PR |= (1 << 10) 	;GP_IRQ_callback[10]()	;	}
 8000aec:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d008      	beq.n	8000b0a <EXTI15_10_IRQHandler+0x22>
 8000af8:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	4a29      	ldr	r2, [pc, #164]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b02:	6153      	str	r3, [r2, #20]
 8000b04:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <EXTI15_10_IRQHandler+0xc0>)
 8000b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b08:	4798      	blx	r3
	if(EXTI->PR & 1 << 11)	{EXTI->PR |= (1 << 11) 	;GP_IRQ_callback[11]()	;	}
 8000b0a:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d008      	beq.n	8000b28 <EXTI15_10_IRQHandler+0x40>
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	4a22      	ldr	r2, [pc, #136]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b20:	6153      	str	r3, [r2, #20]
 8000b22:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <EXTI15_10_IRQHandler+0xc0>)
 8000b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b26:	4798      	blx	r3
	if(EXTI->PR & 1 << 12)	{EXTI->PR |= (1 << 12) 	;GP_IRQ_callback[12]()	;	}
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d008      	beq.n	8000b46 <EXTI15_10_IRQHandler+0x5e>
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	4a1a      	ldr	r2, [pc, #104]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b3e:	6153      	str	r3, [r2, #20]
 8000b40:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <EXTI15_10_IRQHandler+0xc0>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	4798      	blx	r3
	if(EXTI->PR & 1 << 13)	{EXTI->PR |= (1 << 13) 	;GP_IRQ_callback[13]()	;	}
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b48:	695b      	ldr	r3, [r3, #20]
 8000b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d008      	beq.n	8000b64 <EXTI15_10_IRQHandler+0x7c>
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b5c:	6153      	str	r3, [r2, #20]
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <EXTI15_10_IRQHandler+0xc0>)
 8000b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b62:	4798      	blx	r3
	if(EXTI->PR & 1 << 14)	{EXTI->PR |= (1 << 14) 	;GP_IRQ_callback[14]()	;	}
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b66:	695b      	ldr	r3, [r3, #20]
 8000b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d008      	beq.n	8000b82 <EXTI15_10_IRQHandler+0x9a>
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b72:	695b      	ldr	r3, [r3, #20]
 8000b74:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b7a:	6153      	str	r3, [r2, #20]
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <EXTI15_10_IRQHandler+0xc0>)
 8000b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b80:	4798      	blx	r3
	if(EXTI->PR & 1 << 15)	{EXTI->PR |= (1 << 15) 	;GP_IRQ_callback[15]()	;	}
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b84:	695b      	ldr	r3, [r3, #20]
 8000b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d008      	beq.n	8000ba0 <EXTI15_10_IRQHandler+0xb8>
 8000b8e:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <EXTI15_10_IRQHandler+0xbc>)
 8000b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b98:	6153      	str	r3, [r2, #20]
 8000b9a:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <EXTI15_10_IRQHandler+0xc0>)
 8000b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b9e:	4798      	blx	r3

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40010400 	.word	0x40010400
 8000ba8:	20000034 	.word	0x20000034

08000bac <get_position>:

#include "stm32_f103c6_gpio_drivers.h"


uint8_t get_position(uint16_t pin_number)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	80fb      	strh	r3, [r7, #6]
	switch(pin_number)
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	2b80      	cmp	r3, #128	; 0x80
 8000bba:	d042      	beq.n	8000c42 <get_position+0x96>
 8000bbc:	2b80      	cmp	r3, #128	; 0x80
 8000bbe:	dc11      	bgt.n	8000be4 <get_position+0x38>
 8000bc0:	2b08      	cmp	r3, #8
 8000bc2:	d036      	beq.n	8000c32 <get_position+0x86>
 8000bc4:	2b08      	cmp	r3, #8
 8000bc6:	dc06      	bgt.n	8000bd6 <get_position+0x2a>
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d02e      	beq.n	8000c2a <get_position+0x7e>
 8000bcc:	2b04      	cmp	r3, #4
 8000bce:	d02e      	beq.n	8000c2e <get_position+0x82>
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d028      	beq.n	8000c26 <get_position+0x7a>
 8000bd4:	e047      	b.n	8000c66 <get_position+0xba>
 8000bd6:	2b20      	cmp	r3, #32
 8000bd8:	d02f      	beq.n	8000c3a <get_position+0x8e>
 8000bda:	2b40      	cmp	r3, #64	; 0x40
 8000bdc:	d02f      	beq.n	8000c3e <get_position+0x92>
 8000bde:	2b10      	cmp	r3, #16
 8000be0:	d029      	beq.n	8000c36 <get_position+0x8a>
 8000be2:	e040      	b.n	8000c66 <get_position+0xba>
 8000be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000be8:	d033      	beq.n	8000c52 <get_position+0xa6>
 8000bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bee:	dc09      	bgt.n	8000c04 <get_position+0x58>
 8000bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bf4:	d029      	beq.n	8000c4a <get_position+0x9e>
 8000bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bfa:	d028      	beq.n	8000c4e <get_position+0xa2>
 8000bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c00:	d021      	beq.n	8000c46 <get_position+0x9a>
 8000c02:	e030      	b.n	8000c66 <get_position+0xba>
 8000c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c08:	d027      	beq.n	8000c5a <get_position+0xae>
 8000c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c0e:	dc03      	bgt.n	8000c18 <get_position+0x6c>
 8000c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c14:	d01f      	beq.n	8000c56 <get_position+0xaa>
 8000c16:	e026      	b.n	8000c66 <get_position+0xba>
 8000c18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c1c:	d01f      	beq.n	8000c5e <get_position+0xb2>
 8000c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c22:	d01e      	beq.n	8000c62 <get_position+0xb6>
 8000c24:	e01f      	b.n	8000c66 <get_position+0xba>
	{
	case  GPIO_PIN_0 :
		return 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	e01e      	b.n	8000c68 <get_position+0xbc>
		break;
	case  GPIO_PIN_1 :
		return 4;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	e01c      	b.n	8000c68 <get_position+0xbc>
		break;
	case  GPIO_PIN_2 :
		return 8;
 8000c2e:	2308      	movs	r3, #8
 8000c30:	e01a      	b.n	8000c68 <get_position+0xbc>
		break;
	case  GPIO_PIN_3 :
		return 12;
 8000c32:	230c      	movs	r3, #12
 8000c34:	e018      	b.n	8000c68 <get_position+0xbc>
		break;
	case  GPIO_PIN_4 :
		return 16;
 8000c36:	2310      	movs	r3, #16
 8000c38:	e016      	b.n	8000c68 <get_position+0xbc>
		break;
	case  GPIO_PIN_5 :
		return 20;
 8000c3a:	2314      	movs	r3, #20
 8000c3c:	e014      	b.n	8000c68 <get_position+0xbc>
		break;
	case  GPIO_PIN_6 :
		return 24;
 8000c3e:	2318      	movs	r3, #24
 8000c40:	e012      	b.n	8000c68 <get_position+0xbc>
		break;
	case  GPIO_PIN_7 :
		return 28;
 8000c42:	231c      	movs	r3, #28
 8000c44:	e010      	b.n	8000c68 <get_position+0xbc>
		break;
	case  GPIO_PIN_8 :
		return 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	e00e      	b.n	8000c68 <get_position+0xbc>
		break;
	case  GPIO_PIN_9 :
		return 4;
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	e00c      	b.n	8000c68 <get_position+0xbc>
		break;
	case  GPIO_PIN_10 :
		return 8;
 8000c4e:	2308      	movs	r3, #8
 8000c50:	e00a      	b.n	8000c68 <get_position+0xbc>
		break;
	case  GPIO_PIN_11 :
		return 12;
 8000c52:	230c      	movs	r3, #12
 8000c54:	e008      	b.n	8000c68 <get_position+0xbc>
		break;
	case  GPIO_PIN_12 :
		return 16;
 8000c56:	2310      	movs	r3, #16
 8000c58:	e006      	b.n	8000c68 <get_position+0xbc>
		break;
	case  GPIO_PIN_13 :
		return 20;
 8000c5a:	2314      	movs	r3, #20
 8000c5c:	e004      	b.n	8000c68 <get_position+0xbc>
		break;
	case  GPIO_PIN_14 :
		return 24;
 8000c5e:	2318      	movs	r3, #24
 8000c60:	e002      	b.n	8000c68 <get_position+0xbc>
		break;
	case  GPIO_PIN_15 :
		return 28;
 8000c62:	231c      	movs	r3, #28
 8000c64:	e000      	b.n	8000c68 <get_position+0xbc>
		break;
	}
	return 0;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr

08000c72 <MCAL_GPIO_Init>:
 * @retval 			-	none
 * Note 			-	STM32f103c6 MCU has GPIO A,B,B,D,E modules
 *                      but LQFP48 Package has only A,B, Part of C,D
 */
void MCAL_GPIO_Init(GPIO_TypeDef * GPIOx, GPIO_Pinconfig_t * pinconfig)
{
 8000c72:	b590      	push	{r4, r7, lr}
 8000c74:	b085      	sub	sp, #20
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) pins 0 >>> 7
	//Port configuration register high (GPIOx_CRH) pins 8 >>> 15
	volatile uint32_t * configreg = NULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]
	configreg = (pinconfig->PinNumber < GPIO_PIN_8)? &GPIOx->CRL: &GPIOx->CRH;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	2bff      	cmp	r3, #255	; 0xff
 8000c8a:	d801      	bhi.n	8000c90 <MCAL_GPIO_Init+0x1e>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	e001      	b.n	8000c94 <MCAL_GPIO_Init+0x22>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3304      	adds	r3, #4
 8000c94:	60bb      	str	r3, [r7, #8]
	//clear CNFy[1:0] , MODEy[1:0]
	*(configreg) &= ~(0xf << get_position(pinconfig->PinNumber));
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	881b      	ldrh	r3, [r3, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff ff86 	bl	8000bac <get_position>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	4093      	lsls	r3, r2
 8000ca8:	43da      	mvns	r2, r3
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	601a      	str	r2, [r3, #0]
	//if pin is output
	if ( (pinconfig ->Mode == GPIO_MODE_Output_PP || pinconfig ->Mode == GPIO_MODE_Output_OD || pinconfig ->Mode == GPIO_MODE_Output_AF_PP || pinconfig ->Mode == GPIO_MODE_Output_AF_OD) )
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	789b      	ldrb	r3, [r3, #2]
 8000cb8:	2b04      	cmp	r3, #4
 8000cba:	d00b      	beq.n	8000cd4 <MCAL_GPIO_Init+0x62>
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	789b      	ldrb	r3, [r3, #2]
 8000cc0:	2b05      	cmp	r3, #5
 8000cc2:	d007      	beq.n	8000cd4 <MCAL_GPIO_Init+0x62>
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	789b      	ldrb	r3, [r3, #2]
 8000cc8:	2b06      	cmp	r3, #6
 8000cca:	d003      	beq.n	8000cd4 <MCAL_GPIO_Init+0x62>
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	789b      	ldrb	r3, [r3, #2]
 8000cd0:	2b07      	cmp	r3, #7
 8000cd2:	d10e      	bne.n	8000cf2 <MCAL_GPIO_Init+0x80>
	{
		PIN_Config = ( ((pinconfig ->Mode - 4) << 2) | (pinconfig ->Output_speed  & 0x0f) );
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	789b      	ldrb	r3, [r3, #2]
 8000cd8:	3b04      	subs	r3, #4
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	b25a      	sxtb	r2, r3
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	78db      	ldrb	r3, [r3, #3]
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	f003 030f 	and.w	r3, r3, #15
 8000ce8:	b25b      	sxtb	r3, r3
 8000cea:	4313      	orrs	r3, r2
 8000cec:	b25b      	sxtb	r3, r3
 8000cee:	73fb      	strb	r3, [r7, #15]
 8000cf0:	e032      	b.n	8000d58 <MCAL_GPIO_Init+0xe6>
	}
	//if pin is input
	else	//MODEy[1:0] = 00: Input mode (reset state)
	{
		//Input with pull-up / pull-down mode
		if( pinconfig ->Mode == GPIO_MODE_Input_PD || pinconfig ->Mode == GPIO_MODE_Input_PU )
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	789b      	ldrb	r3, [r3, #2]
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d003      	beq.n	8000d02 <MCAL_GPIO_Init+0x90>
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	789b      	ldrb	r3, [r3, #2]
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d11a      	bne.n	8000d38 <MCAL_GPIO_Init+0xc6>
		{
			PIN_Config = ( ((GPIO_MODE_Input_PU << 2) | 0x0) & 0x0f );
 8000d02:	2308      	movs	r3, #8
 8000d04:	73fb      	strb	r3, [r7, #15]
			//check if mode is pull-down
			if( pinconfig ->Mode == GPIO_MODE_Input_PD )
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	789b      	ldrb	r3, [r3, #2]
 8000d0a:	2b03      	cmp	r3, #3
 8000d0c:	d108      	bne.n	8000d20 <MCAL_GPIO_Init+0xae>
			{
				//According to Table 20. Port bit configuration table : PxODR = 0
				GPIOx ->ODR  &= ~(pinconfig ->PinNumber);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	683a      	ldr	r2, [r7, #0]
 8000d14:	8812      	ldrh	r2, [r2, #0]
 8000d16:	43d2      	mvns	r2, r2
 8000d18:	401a      	ands	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	60da      	str	r2, [r3, #12]
			if( pinconfig ->Mode == GPIO_MODE_Input_PD )
 8000d1e:	e01a      	b.n	8000d56 <MCAL_GPIO_Init+0xe4>
			}
			//check if mode is pull-up
			else if( pinconfig ->Mode == GPIO_MODE_Input_PU )
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	789b      	ldrb	r3, [r3, #2]
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d116      	bne.n	8000d56 <MCAL_GPIO_Init+0xe4>
			{
				//According to Table 20. Port bit configuration table : PxODR = 1
				GPIOx ->ODR  |= (pinconfig ->PinNumber);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	683a      	ldr	r2, [r7, #0]
 8000d2e:	8812      	ldrh	r2, [r2, #0]
 8000d30:	431a      	orrs	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	60da      	str	r2, [r3, #12]
			if( pinconfig ->Mode == GPIO_MODE_Input_PD )
 8000d36:	e00e      	b.n	8000d56 <MCAL_GPIO_Init+0xe4>
			}
		}
		else if ( pinconfig ->Mode == GPIO_MODE_AF_Input)	//consider it  as input floating
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	789b      	ldrb	r3, [r3, #2]
 8000d3c:	2b08      	cmp	r3, #8
 8000d3e:	d102      	bne.n	8000d46 <MCAL_GPIO_Init+0xd4>
		{
			PIN_Config = ( ((GPIO_MODE_Input_FLU << 2) | 0x0) & 0x0f );
 8000d40:	2304      	movs	r3, #4
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	e008      	b.n	8000d58 <MCAL_GPIO_Init+0xe6>
		}
		else	//Analog mode , input floating
		{
			PIN_Config = ( ((pinconfig ->Mode << 2) | 0x0) & 0x0f );
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	789b      	ldrb	r3, [r3, #2]
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	f003 030f 	and.w	r3, r3, #15
 8000d52:	73fb      	strb	r3, [r7, #15]
 8000d54:	e000      	b.n	8000d58 <MCAL_GPIO_Init+0xe6>
			if( pinconfig ->Mode == GPIO_MODE_Input_PD )
 8000d56:	bf00      	nop
		}
	}
	//Write on CRL or CRH
	*(configreg) |= ( (PIN_Config) << get_position(pinconfig ->PinNumber) );
 8000d58:	7bfc      	ldrb	r4, [r7, #15]
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ff24 	bl	8000bac <get_position>
 8000d64:	4603      	mov	r3, r0
 8000d66:	fa04 f203 	lsl.w	r2, r4, r3
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	601a      	str	r2, [r3, #0]
}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd90      	pop	{r4, r7, pc}

08000d7c <MCAL_GPIO_WritePin>:
 * @retval 			-	none
 * Note 			-	none
 */

void MCAL_GPIO_WritePin(GPIO_TypeDef * GPIOx, uint16_t PinNumber, uint8_t Value)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	807b      	strh	r3, [r7, #2]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	707b      	strb	r3, [r7, #1]
	if(Value == READ_PIN_HIGH)
 8000d8c:	787b      	ldrb	r3, [r7, #1]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d106      	bne.n	8000da0 <MCAL_GPIO_WritePin+0x24>
		GPIOx ->ODR |= PinNumber;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68da      	ldr	r2, [r3, #12]
 8000d96:	887b      	ldrh	r3, [r7, #2]
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	60da      	str	r2, [r3, #12]
//	if(Value == READ_PIN_HIGH)
//		GPIOx ->BSRR = (uint32_t)PinNumber;
//	else
//		GPIOx ->BRR = (uint32_t)PinNumber;

}
 8000d9e:	e006      	b.n	8000dae <MCAL_GPIO_WritePin+0x32>
		GPIOx ->ODR &= ~(PinNumber);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	887a      	ldrh	r2, [r7, #2]
 8000da6:	43d2      	mvns	r2, r2
 8000da8:	401a      	ands	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	60da      	str	r2, [r3, #12]
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr

08000db8 <MCAL_GPIO_WritePort>:
 * @retval 			-	none
 * Note 			-	none
 */

void MCAL_GPIO_WritePort(GPIO_TypeDef * GPIOx, uint16_t Value)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	807b      	strh	r3, [r7, #2]
	GPIOx ->ODR = (uint32_t)Value ;
 8000dc4:	887a      	ldrh	r2, [r7, #2]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	60da      	str	r2, [r3, #12]
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr

08000dd4 <__libc_init_array>:
 8000dd4:	b570      	push	{r4, r5, r6, lr}
 8000dd6:	2500      	movs	r5, #0
 8000dd8:	4e0c      	ldr	r6, [pc, #48]	; (8000e0c <__libc_init_array+0x38>)
 8000dda:	4c0d      	ldr	r4, [pc, #52]	; (8000e10 <__libc_init_array+0x3c>)
 8000ddc:	1ba4      	subs	r4, r4, r6
 8000dde:	10a4      	asrs	r4, r4, #2
 8000de0:	42a5      	cmp	r5, r4
 8000de2:	d109      	bne.n	8000df8 <__libc_init_array+0x24>
 8000de4:	f000 f81a 	bl	8000e1c <_init>
 8000de8:	2500      	movs	r5, #0
 8000dea:	4e0a      	ldr	r6, [pc, #40]	; (8000e14 <__libc_init_array+0x40>)
 8000dec:	4c0a      	ldr	r4, [pc, #40]	; (8000e18 <__libc_init_array+0x44>)
 8000dee:	1ba4      	subs	r4, r4, r6
 8000df0:	10a4      	asrs	r4, r4, #2
 8000df2:	42a5      	cmp	r5, r4
 8000df4:	d105      	bne.n	8000e02 <__libc_init_array+0x2e>
 8000df6:	bd70      	pop	{r4, r5, r6, pc}
 8000df8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dfc:	4798      	blx	r3
 8000dfe:	3501      	adds	r5, #1
 8000e00:	e7ee      	b.n	8000de0 <__libc_init_array+0xc>
 8000e02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e06:	4798      	blx	r3
 8000e08:	3501      	adds	r5, #1
 8000e0a:	e7f2      	b.n	8000df2 <__libc_init_array+0x1e>
 8000e0c:	08000e5c 	.word	0x08000e5c
 8000e10:	08000e5c 	.word	0x08000e5c
 8000e14:	08000e5c 	.word	0x08000e5c
 8000e18:	08000e60 	.word	0x08000e60

08000e1c <_init>:
 8000e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e1e:	bf00      	nop
 8000e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e22:	bc08      	pop	{r3}
 8000e24:	469e      	mov	lr, r3
 8000e26:	4770      	bx	lr

08000e28 <_fini>:
 8000e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e2a:	bf00      	nop
 8000e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e2e:	bc08      	pop	{r3}
 8000e30:	469e      	mov	lr, r3
 8000e32:	4770      	bx	lr
