
LCD_Keypad_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000046c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  0000046c  000004e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000052c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cc0  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000786  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000676  00000000  00000000  00001a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  000020d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000486  00000000  00000000  00002228  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004e5  00000000  00000000  000026ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002b93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 09 02 	call	0x412	; 0x412 <main>
  7a:	0c 94 34 02 	jmp	0x468	; 0x468 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <keypad_init>:
#include "Keypad_Driver/keypad.h"

void keypad_init(void)
{
	//select rows as input
	KEYPAD_Dir &= ~(1<<R0);
  82:	8a b3       	in	r24, 0x1a	; 26
  84:	8e 7f       	andi	r24, 0xFE	; 254
  86:	8a bb       	out	0x1a, r24	; 26
	KEYPAD_Dir &= ~(1<<R1);
  88:	8a b3       	in	r24, 0x1a	; 26
  8a:	8d 7f       	andi	r24, 0xFD	; 253
  8c:	8a bb       	out	0x1a, r24	; 26
	KEYPAD_Dir &= ~(1<<R2);
  8e:	8a b3       	in	r24, 0x1a	; 26
  90:	8b 7f       	andi	r24, 0xFB	; 251
  92:	8a bb       	out	0x1a, r24	; 26
	KEYPAD_Dir &= ~(1<<R3);
  94:	8a b3       	in	r24, 0x1a	; 26
  96:	87 7f       	andi	r24, 0xF7	; 247
  98:	8a bb       	out	0x1a, r24	; 26
	//activate internal pull-up resistors for rows
	KEYPAD_PORT |= 1<< R0;
  9a:	8b b3       	in	r24, 0x1b	; 27
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	8b bb       	out	0x1b, r24	; 27
	KEYPAD_PORT |= 1<< R1;
  a0:	8b b3       	in	r24, 0x1b	; 27
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	8b bb       	out	0x1b, r24	; 27
	KEYPAD_PORT |= 1<< R2;
  a6:	8b b3       	in	r24, 0x1b	; 27
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	8b bb       	out	0x1b, r24	; 27
	KEYPAD_PORT |= 1<< R3;
  ac:	8b b3       	in	r24, 0x1b	; 27
  ae:	88 60       	ori	r24, 0x08	; 8
  b0:	8b bb       	out	0x1b, r24	; 27
	//select columns as output
	KEYPAD_Dir |= 1<<C0;
  b2:	8a b3       	in	r24, 0x1a	; 26
  b4:	80 61       	ori	r24, 0x10	; 16
  b6:	8a bb       	out	0x1a, r24	; 26
	KEYPAD_Dir |= 1<<C1;
  b8:	8a b3       	in	r24, 0x1a	; 26
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	8a bb       	out	0x1a, r24	; 26
	KEYPAD_Dir |= 1<<C2;
  be:	8a b3       	in	r24, 0x1a	; 26
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	8a bb       	out	0x1a, r24	; 26
	KEYPAD_Dir |= 1<<C3;
  c4:	8a b3       	in	r24, 0x1a	; 26
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	8a bb       	out	0x1a, r24	; 26
	//make all columns have logic 1
	KEYPAD_PORT |= 1<<C0;
  ca:	8b b3       	in	r24, 0x1b	; 27
  cc:	80 61       	ori	r24, 0x10	; 16
  ce:	8b bb       	out	0x1b, r24	; 27
	KEYPAD_PORT |= 1<<C1;
  d0:	8b b3       	in	r24, 0x1b	; 27
  d2:	80 62       	ori	r24, 0x20	; 32
  d4:	8b bb       	out	0x1b, r24	; 27
	KEYPAD_PORT |= 1<<C2;
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	8b bb       	out	0x1b, r24	; 27
	KEYPAD_PORT |= 1<<C3;
  dc:	8b b3       	in	r24, 0x1b	; 27
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	8b bb       	out	0x1b, r24	; 27
  e2:	08 95       	ret

000000e4 <keypad_get_key>:
}

char keypad_get_key(void)
{
  e4:	ef 92       	push	r14
  e6:	ff 92       	push	r15
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	68 97       	sbiw	r28, 0x18	; 24
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
	int i, j;
	char col[] = {C0,C1,C2,C3};
 100:	84 e0       	ldi	r24, 0x04	; 4
 102:	89 83       	std	Y+1, r24	; 0x01
 104:	85 e0       	ldi	r24, 0x05	; 5
 106:	8a 83       	std	Y+2, r24	; 0x02
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	8b 83       	std	Y+3, r24	; 0x03
 10c:	87 e0       	ldi	r24, 0x07	; 7
 10e:	8c 83       	std	Y+4, r24	; 0x04
	char row[] = {R0,R1,R2,R3};
 110:	1d 82       	std	Y+5, r1	; 0x05
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	8e 83       	std	Y+6, r24	; 0x06
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	8f 83       	std	Y+7, r24	; 0x07
 11a:	83 e0       	ldi	r24, 0x03	; 3
 11c:	88 87       	std	Y+8, r24	; 0x08
	char keypad_keys[4][4] = {{'7','8','9','/'},
 11e:	80 e1       	ldi	r24, 0x10	; 16
 120:	e0 e6       	ldi	r30, 0x60	; 96
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	de 01       	movw	r26, r28
 126:	19 96       	adiw	r26, 0x09	; 9
 128:	01 90       	ld	r0, Z+
 12a:	0d 92       	st	X+, r0
 12c:	8a 95       	dec	r24
 12e:	e1 f7       	brne	.-8      	; 0x128 <keypad_get_key+0x44>
							  {'4','5','6','*'},	
							  {'1','2','3','-'},
						      {'?','0','=','+'}};
							  
	for(i = 0; i < 4; i++)
 130:	40 e0       	ldi	r20, 0x00	; 0
 132:	50 e0       	ldi	r21, 0x00	; 0
 134:	6a c0       	rjmp	.+212    	; 0x20a <keypad_get_key+0x126>
	{
		for(j = 0; j < 4; j++)
		{
			//set all columns 
			KEYPAD_PORT |= ( (1<<col[0]) | (1<<col[1]) | (1<<col[2]) | (1<<col[3])) ;
 136:	7b b3       	in	r23, 0x1b	; 27
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	7c 01       	movw	r14, r24
 13e:	09 80       	ldd	r0, Y+1	; 0x01
 140:	02 c0       	rjmp	.+4      	; 0x146 <keypad_get_key+0x62>
 142:	ee 0c       	add	r14, r14
 144:	ff 1c       	adc	r15, r15
 146:	0a 94       	dec	r0
 148:	e2 f7       	brpl	.-8      	; 0x142 <keypad_get_key+0x5e>
 14a:	8c 01       	movw	r16, r24
 14c:	0a 80       	ldd	r0, Y+2	; 0x02
 14e:	02 c0       	rjmp	.+4      	; 0x154 <keypad_get_key+0x70>
 150:	00 0f       	add	r16, r16
 152:	11 1f       	adc	r17, r17
 154:	0a 94       	dec	r0
 156:	e2 f7       	brpl	.-8      	; 0x150 <keypad_get_key+0x6c>
 158:	dc 01       	movw	r26, r24
 15a:	0b 80       	ldd	r0, Y+3	; 0x03
 15c:	02 c0       	rjmp	.+4      	; 0x162 <keypad_get_key+0x7e>
 15e:	aa 0f       	add	r26, r26
 160:	bb 1f       	adc	r27, r27
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <keypad_get_key+0x7a>
 166:	fc 01       	movw	r30, r24
 168:	0c 80       	ldd	r0, Y+4	; 0x04
 16a:	02 c0       	rjmp	.+4      	; 0x170 <keypad_get_key+0x8c>
 16c:	ee 0f       	add	r30, r30
 16e:	ff 1f       	adc	r31, r31
 170:	0a 94       	dec	r0
 172:	e2 f7       	brpl	.-8      	; 0x16c <keypad_get_key+0x88>
 174:	6e 2d       	mov	r22, r14
 176:	60 2b       	or	r22, r16
 178:	6a 2b       	or	r22, r26
 17a:	6e 2b       	or	r22, r30
 17c:	67 2b       	or	r22, r23
 17e:	6b bb       	out	0x1b, r22	; 27
			//clear specific column(make it ground)
			KEYPAD_PORT &= ~(1<<col[i]);
 180:	6b b3       	in	r22, 0x1b	; 27
 182:	e1 e0       	ldi	r30, 0x01	; 1
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	ec 0f       	add	r30, r28
 188:	fd 1f       	adc	r31, r29
 18a:	e4 0f       	add	r30, r20
 18c:	f5 1f       	adc	r31, r21
 18e:	00 80       	ld	r0, Z
 190:	02 c0       	rjmp	.+4      	; 0x196 <keypad_get_key+0xb2>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	0a 94       	dec	r0
 198:	e2 f7       	brpl	.-8      	; 0x192 <keypad_get_key+0xae>
 19a:	80 95       	com	r24
 19c:	86 23       	and	r24, r22
 19e:	8b bb       	out	0x1b, r24	; 27
			//check pressed key
			if(Read_bit(KEYPAD_Pin, row[j]) == 0)
 1a0:	89 b3       	in	r24, 0x19	; 25
 1a2:	e5 e0       	ldi	r30, 0x05	; 5
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	ec 0f       	add	r30, r28
 1a8:	fd 1f       	adc	r31, r29
 1aa:	e2 0f       	add	r30, r18
 1ac:	f3 1f       	adc	r31, r19
 1ae:	60 81       	ld	r22, Z
 1b0:	e6 2f       	mov	r30, r22
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <keypad_get_key+0xd6>
 1b6:	95 95       	asr	r25
 1b8:	87 95       	ror	r24
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <keypad_get_key+0xd2>
 1be:	80 fd       	sbrc	r24, 0
 1c0:	19 c0       	rjmp	.+50     	; 0x1f4 <keypad_get_key+0x110>
			{
				//single pressing
				while(Read_bit(KEYPAD_Pin, row[j]) == 0);
 1c2:	89 b3       	in	r24, 0x19	; 25
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 2e       	mov	r0, r30
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <keypad_get_key+0xea>
 1ca:	95 95       	asr	r25
 1cc:	87 95       	ror	r24
 1ce:	0a 94       	dec	r0
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <keypad_get_key+0xe6>
 1d2:	80 ff       	sbrs	r24, 0
 1d4:	f6 cf       	rjmp	.-20     	; 0x1c2 <keypad_get_key+0xde>
				return keypad_keys[j][i];
 1d6:	22 0f       	add	r18, r18
 1d8:	33 1f       	adc	r19, r19
 1da:	22 0f       	add	r18, r18
 1dc:	33 1f       	adc	r19, r19
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	8c 0f       	add	r24, r28
 1e4:	9d 1f       	adc	r25, r29
 1e6:	28 0f       	add	r18, r24
 1e8:	39 1f       	adc	r19, r25
 1ea:	f9 01       	movw	r30, r18
 1ec:	e4 0f       	add	r30, r20
 1ee:	f5 1f       	adc	r31, r21
 1f0:	80 85       	ldd	r24, Z+8	; 0x08
 1f2:	0f c0       	rjmp	.+30     	; 0x212 <keypad_get_key+0x12e>
							  {'1','2','3','-'},
						      {'?','0','=','+'}};
							  
	for(i = 0; i < 4; i++)
	{
		for(j = 0; j < 4; j++)
 1f4:	2f 5f       	subi	r18, 0xFF	; 255
 1f6:	3f 4f       	sbci	r19, 0xFF	; 255
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <keypad_get_key+0x11a>
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	24 30       	cpi	r18, 0x04	; 4
 200:	31 05       	cpc	r19, r1
 202:	0c f4       	brge	.+2      	; 0x206 <keypad_get_key+0x122>
 204:	98 cf       	rjmp	.-208    	; 0x136 <keypad_get_key+0x52>
	char keypad_keys[4][4] = {{'7','8','9','/'},
							  {'4','5','6','*'},	
							  {'1','2','3','-'},
						      {'?','0','=','+'}};
							  
	for(i = 0; i < 4; i++)
 206:	4f 5f       	subi	r20, 0xFF	; 255
 208:	5f 4f       	sbci	r21, 0xFF	; 255
 20a:	44 30       	cpi	r20, 0x04	; 4
 20c:	51 05       	cpc	r21, r1
 20e:	ac f3       	brlt	.-22     	; 0x1fa <keypad_get_key+0x116>
				while(Read_bit(KEYPAD_Pin, row[j]) == 0);
				return keypad_keys[j][i];
			}
		}
	}
	return 'N';
 210:	8e e4       	ldi	r24, 0x4E	; 78
 212:	68 96       	adiw	r28, 0x18	; 24
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	f8 94       	cli
 218:	de bf       	out	0x3e, r29	; 62
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	cd bf       	out	0x3d, r28	; 61
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	ff 90       	pop	r15
 228:	ef 90       	pop	r14
 22a:	08 95       	ret

0000022c <lcd_kick>:
	//make LCD in read mode RS = 0, RW = 1
	Clear_bit(lcd_ctrl_port, RS);	
	Set_bit(lcd_ctrl_port, RW);	
	lcd_kick();
	//make data lines as output
	lcd_data_dir |= (0xFF<<Data_shift);
 22c:	82 b3       	in	r24, 0x12	; 18
 22e:	84 60       	ori	r24, 0x04	; 4
 230:	82 bb       	out	0x12, r24	; 18
 232:	87 e8       	ldi	r24, 0x87	; 135
 234:	93 e1       	ldi	r25, 0x13	; 19
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <lcd_kick+0xa>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <lcd_kick+0x10>
 23c:	00 00       	nop
 23e:	82 b3       	in	r24, 0x12	; 18
 240:	8b 7f       	andi	r24, 0xFB	; 251
 242:	82 bb       	out	0x12, r24	; 18
 244:	08 95       	ret

00000246 <lcd_write_char>:
 246:	cf 93       	push	r28
 248:	c8 2f       	mov	r28, r24
 24a:	83 ec       	ldi	r24, 0xC3	; 195
 24c:	99 e0       	ldi	r25, 0x09	; 9
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <lcd_write_char+0x8>
 252:	00 c0       	rjmp	.+0      	; 0x254 <lcd_write_char+0xe>
 254:	00 00       	nop
 256:	82 b3       	in	r24, 0x12	; 18
 258:	81 60       	ori	r24, 0x01	; 1
 25a:	82 bb       	out	0x12, r24	; 18
 25c:	82 b3       	in	r24, 0x12	; 18
 25e:	8d 7f       	andi	r24, 0xFD	; 253
 260:	82 bb       	out	0x12, r24	; 18
 262:	85 b3       	in	r24, 0x15	; 21
 264:	8f 70       	andi	r24, 0x0F	; 15
 266:	9c 2f       	mov	r25, r28
 268:	90 7f       	andi	r25, 0xF0	; 240
 26a:	89 2b       	or	r24, r25
 26c:	85 bb       	out	0x15, r24	; 21
 26e:	0e 94 16 01 	call	0x22c	; 0x22c <lcd_kick>
 272:	82 b3       	in	r24, 0x12	; 18
 274:	81 60       	ori	r24, 0x01	; 1
 276:	82 bb       	out	0x12, r24	; 18
 278:	82 b3       	in	r24, 0x12	; 18
 27a:	8d 7f       	andi	r24, 0xFD	; 253
 27c:	82 bb       	out	0x12, r24	; 18
 27e:	25 b3       	in	r18, 0x15	; 21
 280:	30 e1       	ldi	r19, 0x10	; 16
 282:	c3 9f       	mul	r28, r19
 284:	c0 01       	movw	r24, r0
 286:	11 24       	eor	r1, r1
 288:	92 2f       	mov	r25, r18
 28a:	9f 70       	andi	r25, 0x0F	; 15
 28c:	89 2b       	or	r24, r25
 28e:	85 bb       	out	0x15, r24	; 21
 290:	0e 94 16 01 	call	0x22c	; 0x22c <lcd_kick>
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <lcd_write_command>:
}

void lcd_write_command(unsigned char command)
{
 298:	cf 93       	push	r28
 29a:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29c:	83 ec       	ldi	r24, 0xC3	; 195
 29e:	99 e0       	ldi	r25, 0x09	; 9
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <lcd_write_command+0x8>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <lcd_write_command+0xe>
 2a6:	00 00       	nop
	
	#ifdef FOUR_BIT_MODE
	//lcd_is_busy();
	_delay_ms(10);
	//send last four bits of command
	clear_RS;
 2a8:	82 b3       	in	r24, 0x12	; 18
 2aa:	8e 7f       	andi	r24, 0xFE	; 254
 2ac:	82 bb       	out	0x12, r24	; 18
	clear_RW;
 2ae:	82 b3       	in	r24, 0x12	; 18
 2b0:	8d 7f       	andi	r24, 0xFD	; 253
 2b2:	82 bb       	out	0x12, r24	; 18
	lcd_data_port = ((lcd_data_port & 0x0F) | (command & 0xF0));
 2b4:	85 b3       	in	r24, 0x15	; 21
 2b6:	8f 70       	andi	r24, 0x0F	; 15
 2b8:	9c 2f       	mov	r25, r28
 2ba:	90 7f       	andi	r25, 0xF0	; 240
 2bc:	89 2b       	or	r24, r25
 2be:	85 bb       	out	0x15, r24	; 21
	lcd_kick();
 2c0:	0e 94 16 01 	call	0x22c	; 0x22c <lcd_kick>
	//send first four bits of command
	clear_RS;
 2c4:	82 b3       	in	r24, 0x12	; 18
 2c6:	8e 7f       	andi	r24, 0xFE	; 254
 2c8:	82 bb       	out	0x12, r24	; 18
	clear_RW;
 2ca:	82 b3       	in	r24, 0x12	; 18
 2cc:	8d 7f       	andi	r24, 0xFD	; 253
 2ce:	82 bb       	out	0x12, r24	; 18
	lcd_data_port = ((lcd_data_port & 0x0F) | (command << 4));
 2d0:	25 b3       	in	r18, 0x15	; 21
 2d2:	30 e1       	ldi	r19, 0x10	; 16
 2d4:	c3 9f       	mul	r28, r19
 2d6:	c0 01       	movw	r24, r0
 2d8:	11 24       	eor	r1, r1
 2da:	92 2f       	mov	r25, r18
 2dc:	9f 70       	andi	r25, 0x0F	; 15
 2de:	89 2b       	or	r24, r25
 2e0:	85 bb       	out	0x15, r24	; 21
	lcd_kick();
 2e2:	0e 94 16 01 	call	0x22c	; 0x22c <lcd_kick>
	#endif
}
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <lcd_goto_xy>:


void lcd_goto_xy(int line, int position)
{
	if(line == 1)
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	91 05       	cpc	r25, r1
 2ee:	49 f4       	brne	.+18     	; 0x302 <lcd_goto_xy+0x18>
	{
		if(position >= 0 && position < 16)
 2f0:	86 2f       	mov	r24, r22
 2f2:	97 2f       	mov	r25, r23
 2f4:	40 97       	sbiw	r24, 0x10	; 16
 2f6:	78 f4       	brcc	.+30     	; 0x316 <lcd_goto_xy+0x2c>
		{
			lcd_write_command(cursor_first_line + position);
 2f8:	80 e8       	ldi	r24, 0x80	; 128
 2fa:	86 0f       	add	r24, r22
 2fc:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_write_command>
 300:	08 95       	ret
		}
	}
	
	else if (line == 2)
 302:	02 97       	sbiw	r24, 0x02	; 2
 304:	41 f4       	brne	.+16     	; 0x316 <lcd_goto_xy+0x2c>
	{
		if(position >= 0 && position < 16)
 306:	86 2f       	mov	r24, r22
 308:	97 2f       	mov	r25, r23
 30a:	40 97       	sbiw	r24, 0x10	; 16
 30c:	20 f4       	brcc	.+8      	; 0x316 <lcd_goto_xy+0x2c>
		{
			lcd_write_command(cursor_second_line + position);
 30e:	80 ec       	ldi	r24, 0xC0	; 192
 310:	86 0f       	add	r24, r22
 312:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_write_command>
 316:	08 95       	ret

00000318 <lcd_write_string>:
	lcd_kick();
	#endif
}

void lcd_write_string(char *str)
{
 318:	0f 93       	push	r16
 31a:	1f 93       	push	r17
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	8c 01       	movw	r16, r24
	int character_counter = 0;
 322:	c0 e0       	ldi	r28, 0x00	; 0
 324:	d0 e0       	ldi	r29, 0x00	; 0
	while(*str != '\0')
 326:	1e c0       	rjmp	.+60     	; 0x364 <lcd_write_string+0x4c>
	{
		character_counter++;
 328:	21 96       	adiw	r28, 0x01	; 1
		if(character_counter == 17)
 32a:	c1 31       	cpi	r28, 0x11	; 17
 32c:	d1 05       	cpc	r29, r1
 32e:	39 f4       	brne	.+14     	; 0x33e <lcd_write_string+0x26>
		{
			//go to second line position 0
			lcd_goto_xy(2,0);
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_goto_xy>
 33c:	0e c0       	rjmp	.+28     	; 0x35a <lcd_write_string+0x42>
		}
		else if(character_counter > 32)
 33e:	c1 32       	cpi	r28, 0x21	; 33
 340:	d1 05       	cpc	r29, r1
 342:	5c f0       	brlt	.+22     	; 0x35a <lcd_write_string+0x42>
		{
			//clear display
			lcd_write_command(clear_display);
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_write_command>
			//go to first line position 0
			lcd_goto_xy(1,0);
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_goto_xy>
			character_counter = 0;
 356:	c0 e0       	ldi	r28, 0x00	; 0
 358:	d0 e0       	ldi	r29, 0x00	; 0
		}
		lcd_write_char(*str);
 35a:	f8 01       	movw	r30, r16
 35c:	81 91       	ld	r24, Z+
 35e:	8f 01       	movw	r16, r30
 360:	0e 94 23 01 	call	0x246	; 0x246 <lcd_write_char>
}

void lcd_write_string(char *str)
{
	int character_counter = 0;
	while(*str != '\0')
 364:	f8 01       	movw	r30, r16
 366:	80 81       	ld	r24, Z
 368:	81 11       	cpse	r24, r1
 36a:	de cf       	rjmp	.-68     	; 0x328 <lcd_write_string+0x10>
			character_counter = 0;
		}
		lcd_write_char(*str);
		str++;
	}
}
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	08 95       	ret

00000376 <lcd_clear>:
	}
}

void lcd_clear(void)
{
	lcd_write_command(clear_display);
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_write_command>
 37c:	08 95       	ret

0000037e <lcd_init>:
 37e:	87 e8       	ldi	r24, 0x87	; 135
 380:	93 e1       	ldi	r25, 0x13	; 19
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <lcd_init+0x4>
 386:	00 c0       	rjmp	.+0      	; 0x388 <lcd_init+0xa>
 388:	00 00       	nop

void lcd_init(void)
{
	_delay_ms(20);
	//LCD data set as output
	lcd_data_dir |= (0xFF << Data_shift);
 38a:	84 b3       	in	r24, 0x14	; 20
 38c:	80 6f       	ori	r24, 0xF0	; 240
 38e:	84 bb       	out	0x14, r24	; 20
	//set RS,RW,E as output
	Set_bit(lcd_ctrl_dir, EN);
 390:	81 b3       	in	r24, 0x11	; 17
 392:	84 60       	ori	r24, 0x04	; 4
 394:	81 bb       	out	0x11, r24	; 17
	Set_bit(lcd_ctrl_dir, RS);
 396:	81 b3       	in	r24, 0x11	; 17
 398:	81 60       	ori	r24, 0x01	; 1
 39a:	81 bb       	out	0x11, r24	; 17
	Set_bit(lcd_ctrl_dir, RW);
 39c:	81 b3       	in	r24, 0x11	; 17
 39e:	82 60       	ori	r24, 0x02	; 2
 3a0:	81 bb       	out	0x11, r24	; 17
	lcd_ctrl_port &= ~((1 << EN) | (1 << RS) | (1 << RW));
 3a2:	82 b3       	in	r24, 0x12	; 18
 3a4:	88 7f       	andi	r24, 0xF8	; 248
 3a6:	82 bb       	out	0x12, r24	; 18
	lcd_write_command(0x30);
 3a8:	80 e3       	ldi	r24, 0x30	; 48
 3aa:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_write_command>
 3ae:	83 ec       	ldi	r24, 0xC3	; 195
 3b0:	99 e0       	ldi	r25, 0x09	; 9
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <lcd_init+0x34>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <lcd_init+0x3a>
 3b8:	00 00       	nop
	_delay_ms(10);
	lcd_write_command(0x30);
 3ba:	80 e3       	ldi	r24, 0x30	; 48
 3bc:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_write_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c0:	92 e4       	ldi	r25, 0x42	; 66
 3c2:	9a 95       	dec	r25
 3c4:	f1 f7       	brne	.-4      	; 0x3c2 <lcd_init+0x44>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <lcd_init+0x4a>
	_delay_us(200);
	lcd_write_command(0x30);
 3c8:	80 e3       	ldi	r24, 0x30	; 48
 3ca:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_write_command>
	lcd_write_command(function_set_8bit);
	#endif
	
	#ifdef FOUR_BIT_MODE
	//select 4-bit mode
	lcd_write_command(0x02);
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_write_command>
	lcd_write_command(function_set_4bit);
 3d4:	88 e2       	ldi	r24, 0x28	; 40
 3d6:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_write_command>
	lcd_write_command(0x08);
 3da:	88 e0       	ldi	r24, 0x08	; 8
 3dc:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_write_command>
	#endif
	//display off
	lcd_write_command(display_off_cursor_off);
 3e0:	88 e0       	ldi	r24, 0x08	; 8
 3e2:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_write_command>
	//clear display
	lcd_clear();
 3e6:	0e 94 bb 01 	call	0x376	; 0x376 <lcd_clear>
	//entry mode set
	lcd_write_command(Entry_mode);
 3ea:	86 e0       	ldi	r24, 0x06	; 6
 3ec:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_write_command>
	//display on cursor blinking
	lcd_write_command(Display_on_Cursor_blinking);
 3f0:	8f e0       	ldi	r24, 0x0F	; 15
 3f2:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_write_command>
 3f6:	08 95       	ret

000003f8 <set_project_start>:
#include "LCD_Driver/lcd.h"
#include "Keypad_Driver/keypad.h"

void set_project_start(void)
{
	lcd_clear();
 3f8:	0e 94 bb 01 	call	0x376	; 0x376 <lcd_clear>
	lcd_write_string("PRESS A KEY");
 3fc:	80 e7       	ldi	r24, 0x70	; 112
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_write_string>
	lcd_goto_xy(2,0);
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_goto_xy>
 410:	08 95       	ret

00000412 <main>:
}

int main(void)
{
	lcd_init();
 412:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_init>
	keypad_init();
 416:	0e 94 41 00 	call	0x82	; 0x82 <keypad_init>
	lcd_goto_xy(1,0);
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_goto_xy>
	lcd_write_string("PRESS A KEY");
 426:	80 e7       	ldi	r24, 0x70	; 112
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 8c 01 	call	0x318	; 0x318 <lcd_write_string>
	lcd_goto_xy(2,0);
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	70 e0       	ldi	r23, 0x00	; 0
 432:	82 e0       	ldi	r24, 0x02	; 2
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 75 01 	call	0x2ea	; 0x2ea <lcd_goto_xy>
	char press_key, press_counter = 0;
 43a:	d0 e0       	ldi	r29, 0x00	; 0
	while (1)
	{
		
		press_key = keypad_get_key();
 43c:	0e 94 72 00 	call	0xe4	; 0xe4 <keypad_get_key>
 440:	c8 2f       	mov	r28, r24
		switch(press_key)
 442:	8f 33       	cpi	r24, 0x3F	; 63
 444:	19 f0       	breq	.+6      	; 0x44c <main+0x3a>
 446:	8e 34       	cpi	r24, 0x4E	; 78
 448:	c9 f3       	breq	.-14     	; 0x43c <main+0x2a>
 44a:	04 c0       	rjmp	.+8      	; 0x454 <main+0x42>
		{
			//when pressing clear button
			case '?':
			{
				set_project_start();
 44c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <set_project_start>
				press_counter = 0;
 450:	d0 e0       	ldi	r29, 0x00	; 0
				break;
 452:	f4 cf       	rjmp	.-24     	; 0x43c <main+0x2a>
			case 'N':
			break;
			//when pressing keys
			default:
			{
				press_counter++;
 454:	df 5f       	subi	r29, 0xFF	; 255
				//check if pressed keys exceeded max LCD columns(16 column)
				if(press_counter >= 16)
 456:	d0 31       	cpi	r29, 0x10	; 16
 458:	18 f0       	brcs	.+6      	; 0x460 <main+0x4e>
				{
					set_project_start();
 45a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <set_project_start>
					press_counter = 0;
 45e:	d0 e0       	ldi	r29, 0x00	; 0
				}
				lcd_write_char(press_key);
 460:	8c 2f       	mov	r24, r28
 462:	0e 94 23 01 	call	0x246	; 0x246 <lcd_write_char>
				break;
 466:	ea cf       	rjmp	.-44     	; 0x43c <main+0x2a>

00000468 <_exit>:
 468:	f8 94       	cli

0000046a <__stop_program>:
 46a:	ff cf       	rjmp	.-2      	; 0x46a <__stop_program>
