
Unit7_lesson1_section_assignment4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000102  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000102  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000668  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a9  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b6  00000000  00000000  00000e29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000379  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000dc  00000000  00000000  0000147d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001559  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
static int segment_arr[10] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0xff,0x6f};
int main(void)
{
	int i,j;
	//make all pins in portC as output
	DDRC = 0xff;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 bb       	out	0x14, r24	; 20
	//make pinA0,pinA1 as output
	Set_bit(DDRA, 0);
  86:	8a b3       	in	r24, 0x1a	; 26
  88:	81 60       	ori	r24, 0x01	; 1
  8a:	8a bb       	out	0x1a, r24	; 26
	Set_bit(DDRA, 1);
  8c:	8a b3       	in	r24, 0x1a	; 26
  8e:	82 60       	ori	r24, 0x02	; 2
  90:	8a bb       	out	0x1a, r24	; 26
	while (1)
	{
		//loop to display all numbers from 0 to 99 on two 7segment by using multiplexing
		for(i=0; i<10; i++)
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	2f c0       	rjmp	.+94     	; 0xf6 <main+0x74>
		{
			for(j=0; j<10; j++)
			{
				Set_bit(PORTA, 0);
  98:	2b b3       	in	r18, 0x1b	; 27
  9a:	21 60       	ori	r18, 0x01	; 1
  9c:	2b bb       	out	0x1b, r18	; 27
				PORTC = segment_arr[i];
  9e:	fa 01       	movw	r30, r20
  a0:	ee 0f       	add	r30, r30
  a2:	ff 1f       	adc	r31, r31
  a4:	e0 5a       	subi	r30, 0xA0	; 160
  a6:	ff 4f       	sbci	r31, 0xFF	; 255
  a8:	20 81       	ld	r18, Z
  aa:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	ef e5       	ldi	r30, 0x5F	; 95
  ae:	fa ee       	ldi	r31, 0xEA	; 234
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <main+0x2e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x34>
  b6:	00 00       	nop
				_delay_ms(30);
				Clear_bit(PORTA, 0);
  b8:	2b b3       	in	r18, 0x1b	; 27
  ba:	2e 7f       	andi	r18, 0xFE	; 254
  bc:	2b bb       	out	0x1b, r18	; 27
				Set_bit(PORTA, 1);
  be:	2b b3       	in	r18, 0x1b	; 27
  c0:	22 60       	ori	r18, 0x02	; 2
  c2:	2b bb       	out	0x1b, r18	; 27
				PORTC = segment_arr[j];
  c4:	fc 01       	movw	r30, r24
  c6:	ee 0f       	add	r30, r30
  c8:	ff 1f       	adc	r31, r31
  ca:	e0 5a       	subi	r30, 0xA0	; 160
  cc:	ff 4f       	sbci	r31, 0xFF	; 255
  ce:	20 81       	ld	r18, Z
  d0:	25 bb       	out	0x15, r18	; 21
  d2:	ef e5       	ldi	r30, 0x5F	; 95
  d4:	fa ee       	ldi	r31, 0xEA	; 234
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x54>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x5a>
  dc:	00 00       	nop
				_delay_ms(30);
				Clear_bit(PORTA, 1);
  de:	2b b3       	in	r18, 0x1b	; 27
  e0:	2d 7f       	andi	r18, 0xFD	; 253
  e2:	2b bb       	out	0x1b, r18	; 27
	while (1)
	{
		//loop to display all numbers from 0 to 99 on two 7segment by using multiplexing
		for(i=0; i<10; i++)
		{
			for(j=0; j<10; j++)
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	02 c0       	rjmp	.+4      	; 0xec <main+0x6a>
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	8a 30       	cpi	r24, 0x0A	; 10
  ee:	91 05       	cpc	r25, r1
  f0:	9c f2       	brlt	.-90     	; 0x98 <main+0x16>
	Set_bit(DDRA, 0);
	Set_bit(DDRA, 1);
	while (1)
	{
		//loop to display all numbers from 0 to 99 on two 7segment by using multiplexing
		for(i=0; i<10; i++)
  f2:	4f 5f       	subi	r20, 0xFF	; 255
  f4:	5f 4f       	sbci	r21, 0xFF	; 255
  f6:	4a 30       	cpi	r20, 0x0A	; 10
  f8:	51 05       	cpc	r21, r1
  fa:	b4 f3       	brlt	.-20     	; 0xe8 <main+0x66>
  fc:	ca cf       	rjmp	.-108    	; 0x92 <main+0x10>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
