
Unit7_Lesson1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000270  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003a0  080003a8  000103a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003a0  080003a0  000103a8  2**0
                  CONTENTS
  4 .ARM          00000000  080003a0  080003a0  000103a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003a0  080003a8  000103a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003a0  080003a0  000103a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003a4  080003a4  000103a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003a8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003a8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000103a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000127  00000000  00000000  000103d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000b8  00000000  00000000  000104f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000110  00000000  00000000  000105b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000060  00000000  00000000  000106c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000048  00000000  00000000  00010720  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000f44  00000000  00000000  00010768  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000465  00000000  00000000  000116ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00003d12  00000000  00000000  00011b11  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00015823  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c0  00000000  00000000  000158a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000388 	.word	0x08000388

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000388 	.word	0x08000388

08000170 <main>:
void clock_init(void);
void GPIO_init(void);
void delay(int counter);

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	clock_init();
 8000174:	f000 f82c 	bl	80001d0 <clock_init>
	GPIO_init();
 8000178:	f000 f85a 	bl	8000230 <GPIO_init>
	while(1)
	{
		//check if button connected with pinA1(PUR) is pressed
		if(((GPIOA_IDR & 1<<1) >> 1) == 0)
 800017c:	4b12      	ldr	r3, [pc, #72]	; (80001c8 <main+0x58>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	f003 0302 	and.w	r3, r3, #2
 8000184:	2b00      	cmp	r3, #0
 8000186:	d10c      	bne.n	80001a2 <main+0x32>
		{
			//toggle led connected with pinB1
			GPIOB_ODR ^= 1<<1;
 8000188:	4b10      	ldr	r3, [pc, #64]	; (80001cc <main+0x5c>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	4a0f      	ldr	r2, [pc, #60]	; (80001cc <main+0x5c>)
 800018e:	f083 0302 	eor.w	r3, r3, #2
 8000192:	6013      	str	r3, [r2, #0]
			//single pressing
			while(((GPIOA_IDR & 1<<1) >> 1) == 0);
 8000194:	bf00      	nop
 8000196:	4b0c      	ldr	r3, [pc, #48]	; (80001c8 <main+0x58>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	f003 0302 	and.w	r3, r3, #2
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d0f9      	beq.n	8000196 <main+0x26>
		}

		//check if button connected with pinA13(PDR) is pressed
		//Multi pressing
		if(((GPIOA_IDR & 1<<13) >> 13) == 1)
 80001a2:	4b09      	ldr	r3, [pc, #36]	; (80001c8 <main+0x58>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	0b5b      	lsrs	r3, r3, #13
 80001a8:	f003 0301 	and.w	r3, r3, #1
 80001ac:	2b01      	cmp	r3, #1
 80001ae:	d105      	bne.n	80001bc <main+0x4c>
		{
			//toggle led connected with pinB13
			GPIOB_ODR ^= 1<<13;
 80001b0:	4b06      	ldr	r3, [pc, #24]	; (80001cc <main+0x5c>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a05      	ldr	r2, [pc, #20]	; (80001cc <main+0x5c>)
 80001b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80001ba:	6013      	str	r3, [r2, #0]
		}
		delay(10000);
 80001bc:	f242 7010 	movw	r0, #10000	; 0x2710
 80001c0:	f000 f880 	bl	80002c4 <delay>
		if(((GPIOA_IDR & 1<<1) >> 1) == 0)
 80001c4:	e7da      	b.n	800017c <main+0xc>
 80001c6:	bf00      	nop
 80001c8:	40010808 	.word	0x40010808
 80001cc:	40010c0c 	.word	0x40010c0c

080001d0 <clock_init>:
	}
}

void clock_init(void)
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	//PLL multiplication factor by 8
	RCC_CFGR |= (0b0110<<18);
 80001d4:	4b13      	ldr	r3, [pc, #76]	; (8000224 <clock_init+0x54>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a12      	ldr	r2, [pc, #72]	; (8000224 <clock_init+0x54>)
 80001da:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 80001de:	6013      	str	r3, [r2, #0]
	//select PLL as a clock source
	RCC_CFGR |= (0b10<<0);
 80001e0:	4b10      	ldr	r3, [pc, #64]	; (8000224 <clock_init+0x54>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a0f      	ldr	r2, [pc, #60]	; (8000224 <clock_init+0x54>)
 80001e6:	f043 0302 	orr.w	r3, r3, #2
 80001ea:	6013      	str	r3, [r2, #0]
	//APB1 prescaler divided by 2
	RCC_CFGR |= (0b100<<8);
 80001ec:	4b0d      	ldr	r3, [pc, #52]	; (8000224 <clock_init+0x54>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a0c      	ldr	r2, [pc, #48]	; (8000224 <clock_init+0x54>)
 80001f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f6:	6013      	str	r3, [r2, #0]
	//APB2 prescaler divided by 4
	RCC_CFGR |= (0b101<<11);
 80001f8:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <clock_init+0x54>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a09      	ldr	r2, [pc, #36]	; (8000224 <clock_init+0x54>)
 80001fe:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8000202:	6013      	str	r3, [r2, #0]
	//enable PLL
	RCC_CR |= 1<<24;
 8000204:	4b08      	ldr	r3, [pc, #32]	; (8000228 <clock_init+0x58>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a07      	ldr	r2, [pc, #28]	; (8000228 <clock_init+0x58>)
 800020a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800020e:	6013      	str	r3, [r2, #0]
	//enable clock for GPIOA, GPIOB
	RCC_APB2ENR |= (0b11<<2);
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <clock_init+0x5c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a05      	ldr	r2, [pc, #20]	; (800022c <clock_init+0x5c>)
 8000216:	f043 030c 	orr.w	r3, r3, #12
 800021a:	6013      	str	r3, [r2, #0]
}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr
 8000224:	40021004 	.word	0x40021004
 8000228:	40021000 	.word	0x40021000
 800022c:	40021018 	.word	0x40021018

08000230 <GPIO_init>:

void GPIO_init(void)
{
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
	//set pinA1 as input
	GPIOA_CRL = 0x0;
 8000234:	4b1f      	ldr	r3, [pc, #124]	; (80002b4 <GPIO_init+0x84>)
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
	GPIOA_CRL &= ~(0b11<<4);
 800023a:	4b1e      	ldr	r3, [pc, #120]	; (80002b4 <GPIO_init+0x84>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a1d      	ldr	r2, [pc, #116]	; (80002b4 <GPIO_init+0x84>)
 8000240:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000244:	6013      	str	r3, [r2, #0]
	//set pinA1 as floating input
	GPIOA_CRL |= 1<<6;
 8000246:	4b1b      	ldr	r3, [pc, #108]	; (80002b4 <GPIO_init+0x84>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a1a      	ldr	r2, [pc, #104]	; (80002b4 <GPIO_init+0x84>)
 800024c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000250:	6013      	str	r3, [r2, #0]
	//set pinA13 as input
	GPIOA_CRH = 0x0;
 8000252:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <GPIO_init+0x88>)
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
	GPIOA_CRH &= ~(0b11<<20);
 8000258:	4b17      	ldr	r3, [pc, #92]	; (80002b8 <GPIO_init+0x88>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a16      	ldr	r2, [pc, #88]	; (80002b8 <GPIO_init+0x88>)
 800025e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000262:	6013      	str	r3, [r2, #0]
	//set pinA13 as floating input
	GPIOA_CRH |= 1<<22;
 8000264:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <GPIO_init+0x88>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a13      	ldr	r2, [pc, #76]	; (80002b8 <GPIO_init+0x88>)
 800026a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800026e:	6013      	str	r3, [r2, #0]
	//set pinB1 as output >>>>speed 10MHZ
	GPIOB_CRL = 0x0;
 8000270:	4b12      	ldr	r3, [pc, #72]	; (80002bc <GPIO_init+0x8c>)
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
	GPIOB_CRL |= 1<<4;
 8000276:	4b11      	ldr	r3, [pc, #68]	; (80002bc <GPIO_init+0x8c>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4a10      	ldr	r2, [pc, #64]	; (80002bc <GPIO_init+0x8c>)
 800027c:	f043 0310 	orr.w	r3, r3, #16
 8000280:	6013      	str	r3, [r2, #0]
	//set pinB1 as push_pull output
	GPIOB_CRL &= ~(0b11<<6);
 8000282:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <GPIO_init+0x8c>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a0d      	ldr	r2, [pc, #52]	; (80002bc <GPIO_init+0x8c>)
 8000288:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800028c:	6013      	str	r3, [r2, #0]
	//set pinB13 as output >>>>speed 10MHZ
	GPIOB_CRH = 0x0;
 800028e:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <GPIO_init+0x90>)
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
	GPIOB_CRH |= 1<<20;
 8000294:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <GPIO_init+0x90>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a09      	ldr	r2, [pc, #36]	; (80002c0 <GPIO_init+0x90>)
 800029a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800029e:	6013      	str	r3, [r2, #0]
	//set pinB13 as push_pull output
	GPIOB_CRH &= ~(0b11<<22);
 80002a0:	4b07      	ldr	r3, [pc, #28]	; (80002c0 <GPIO_init+0x90>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a06      	ldr	r2, [pc, #24]	; (80002c0 <GPIO_init+0x90>)
 80002a6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80002aa:	6013      	str	r3, [r2, #0]
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bc80      	pop	{r7}
 80002b2:	4770      	bx	lr
 80002b4:	40010800 	.word	0x40010800
 80002b8:	40010804 	.word	0x40010804
 80002bc:	40010c00 	.word	0x40010c00
 80002c0:	40010c04 	.word	0x40010c04

080002c4 <delay>:

void delay(int counter)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	int i = 0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60fb      	str	r3, [r7, #12]
	for(i=counter; i>0; i--);
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	e002      	b.n	80002dc <delay+0x18>
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	3b01      	subs	r3, #1
 80002da:	60fb      	str	r3, [r7, #12]
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	dcf9      	bgt.n	80002d6 <delay+0x12>
}
 80002e2:	bf00      	nop
 80002e4:	3714      	adds	r7, #20
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr

080002ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ec:	480d      	ldr	r0, [pc, #52]	; (8000324 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ee:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f4:	480c      	ldr	r0, [pc, #48]	; (8000328 <LoopForever+0x6>)
  ldr r1, =_edata
 80002f6:	490d      	ldr	r1, [pc, #52]	; (800032c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f8:	4a0d      	ldr	r2, [pc, #52]	; (8000330 <LoopForever+0xe>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002fc:	e002      	b.n	8000304 <LoopCopyDataInit>

080002fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000302:	3304      	adds	r3, #4

08000304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000308:	d3f9      	bcc.n	80002fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030a:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <LoopForever+0x12>)
  ldr r4, =_ebss
 800030c:	4c0a      	ldr	r4, [pc, #40]	; (8000338 <LoopForever+0x16>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000310:	e001      	b.n	8000316 <LoopFillZerobss>

08000312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000314:	3204      	adds	r2, #4

08000316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000318:	d3fb      	bcc.n	8000312 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800031a:	f000 f811 	bl	8000340 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800031e:	f7ff ff27 	bl	8000170 <main>

08000322 <LoopForever>:

LoopForever:
    b LoopForever
 8000322:	e7fe      	b.n	8000322 <LoopForever>
  ldr   r0, =_estack
 8000324:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800032c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000330:	080003a8 	.word	0x080003a8
  ldr r2, =_sbss
 8000334:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000338:	2000001c 	.word	0x2000001c

0800033c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800033c:	e7fe      	b.n	800033c <ADC1_2_IRQHandler>
	...

08000340 <__libc_init_array>:
 8000340:	b570      	push	{r4, r5, r6, lr}
 8000342:	2500      	movs	r5, #0
 8000344:	4e0c      	ldr	r6, [pc, #48]	; (8000378 <__libc_init_array+0x38>)
 8000346:	4c0d      	ldr	r4, [pc, #52]	; (800037c <__libc_init_array+0x3c>)
 8000348:	1ba4      	subs	r4, r4, r6
 800034a:	10a4      	asrs	r4, r4, #2
 800034c:	42a5      	cmp	r5, r4
 800034e:	d109      	bne.n	8000364 <__libc_init_array+0x24>
 8000350:	f000 f81a 	bl	8000388 <_init>
 8000354:	2500      	movs	r5, #0
 8000356:	4e0a      	ldr	r6, [pc, #40]	; (8000380 <__libc_init_array+0x40>)
 8000358:	4c0a      	ldr	r4, [pc, #40]	; (8000384 <__libc_init_array+0x44>)
 800035a:	1ba4      	subs	r4, r4, r6
 800035c:	10a4      	asrs	r4, r4, #2
 800035e:	42a5      	cmp	r5, r4
 8000360:	d105      	bne.n	800036e <__libc_init_array+0x2e>
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000368:	4798      	blx	r3
 800036a:	3501      	adds	r5, #1
 800036c:	e7ee      	b.n	800034c <__libc_init_array+0xc>
 800036e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000372:	4798      	blx	r3
 8000374:	3501      	adds	r5, #1
 8000376:	e7f2      	b.n	800035e <__libc_init_array+0x1e>
 8000378:	080003a0 	.word	0x080003a0
 800037c:	080003a0 	.word	0x080003a0
 8000380:	080003a0 	.word	0x080003a0
 8000384:	080003a4 	.word	0x080003a4

08000388 <_init>:
 8000388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038a:	bf00      	nop
 800038c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038e:	bc08      	pop	{r3}
 8000390:	469e      	mov	lr, r3
 8000392:	4770      	bx	lr

08000394 <_fini>:
 8000394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000396:	bf00      	nop
 8000398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039a:	bc08      	pop	{r3}
 800039c:	469e      	mov	lr, r3
 800039e:	4770      	bx	lr
