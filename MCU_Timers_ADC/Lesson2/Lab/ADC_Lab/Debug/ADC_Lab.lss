
ADC_Lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000005e8  0000067c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080006c  0080006c  00000688  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001031  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008af  00000000  00000000  000017ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ad  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  0000294c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005db  00000000  00000000  00002b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000765  00000000  00000000  0000311b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003880  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 37       	cpi	r26, 0x73	; 115
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a2 01 	call	0x344	; 0x344 <main>
  8a:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_kick>:
	lcd_write_command(clear_display);
}

void lcd_shift_right(void)
{
	lcd_write_command(shift_display_right);
  92:	82 b3       	in	r24, 0x12	; 18
  94:	84 60       	ori	r24, 0x04	; 4
  96:	82 bb       	out	0x12, r24	; 18
  98:	87 e8       	ldi	r24, 0x87	; 135
  9a:	93 e1       	ldi	r25, 0x13	; 19
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <lcd_kick+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <lcd_kick+0x10>
  a2:	00 00       	nop
  a4:	82 b3       	in	r24, 0x12	; 18
  a6:	8b 7f       	andi	r24, 0xFB	; 251
  a8:	82 bb       	out	0x12, r24	; 18
  aa:	08 95       	ret

000000ac <lcd_write_char>:
  ac:	cf 93       	push	r28
  ae:	c8 2f       	mov	r28, r24
  b0:	83 ec       	ldi	r24, 0xC3	; 195
  b2:	99 e0       	ldi	r25, 0x09	; 9
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_write_char+0x8>
  b8:	00 c0       	rjmp	.+0      	; 0xba <lcd_write_char+0xe>
  ba:	00 00       	nop
  bc:	82 b3       	in	r24, 0x12	; 18
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	82 bb       	out	0x12, r24	; 18
  c2:	82 b3       	in	r24, 0x12	; 18
  c4:	8d 7f       	andi	r24, 0xFD	; 253
  c6:	82 bb       	out	0x12, r24	; 18
  c8:	85 b3       	in	r24, 0x15	; 21
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	9c 2f       	mov	r25, r28
  ce:	90 7f       	andi	r25, 0xF0	; 240
  d0:	89 2b       	or	r24, r25
  d2:	85 bb       	out	0x15, r24	; 21
  d4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_kick>
  d8:	82 b3       	in	r24, 0x12	; 18
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	82 bb       	out	0x12, r24	; 18
  de:	82 b3       	in	r24, 0x12	; 18
  e0:	8d 7f       	andi	r24, 0xFD	; 253
  e2:	82 bb       	out	0x12, r24	; 18
  e4:	25 b3       	in	r18, 0x15	; 21
  e6:	30 e1       	ldi	r19, 0x10	; 16
  e8:	c3 9f       	mul	r28, r19
  ea:	c0 01       	movw	r24, r0
  ec:	11 24       	eor	r1, r1
  ee:	92 2f       	mov	r25, r18
  f0:	9f 70       	andi	r25, 0x0F	; 15
  f2:	89 2b       	or	r24, r25
  f4:	85 bb       	out	0x15, r24	; 21
  f6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_kick>
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <lcd_write_command>:
  fe:	cf 93       	push	r28
 100:	c8 2f       	mov	r28, r24
 102:	83 ec       	ldi	r24, 0xC3	; 195
 104:	99 e0       	ldi	r25, 0x09	; 9
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcd_write_command+0x8>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <lcd_write_command+0xe>
 10c:	00 00       	nop
 10e:	82 b3       	in	r24, 0x12	; 18
 110:	8e 7f       	andi	r24, 0xFE	; 254
 112:	82 bb       	out	0x12, r24	; 18
 114:	82 b3       	in	r24, 0x12	; 18
 116:	8d 7f       	andi	r24, 0xFD	; 253
 118:	82 bb       	out	0x12, r24	; 18
 11a:	85 b3       	in	r24, 0x15	; 21
 11c:	8f 70       	andi	r24, 0x0F	; 15
 11e:	9c 2f       	mov	r25, r28
 120:	90 7f       	andi	r25, 0xF0	; 240
 122:	89 2b       	or	r24, r25
 124:	85 bb       	out	0x15, r24	; 21
 126:	0e 94 49 00 	call	0x92	; 0x92 <lcd_kick>
 12a:	82 b3       	in	r24, 0x12	; 18
 12c:	8e 7f       	andi	r24, 0xFE	; 254
 12e:	82 bb       	out	0x12, r24	; 18
 130:	82 b3       	in	r24, 0x12	; 18
 132:	8d 7f       	andi	r24, 0xFD	; 253
 134:	82 bb       	out	0x12, r24	; 18
 136:	25 b3       	in	r18, 0x15	; 21
 138:	30 e1       	ldi	r19, 0x10	; 16
 13a:	c3 9f       	mul	r28, r19
 13c:	c0 01       	movw	r24, r0
 13e:	11 24       	eor	r1, r1
 140:	92 2f       	mov	r25, r18
 142:	9f 70       	andi	r25, 0x0F	; 15
 144:	89 2b       	or	r24, r25
 146:	85 bb       	out	0x15, r24	; 21
 148:	0e 94 49 00 	call	0x92	; 0x92 <lcd_kick>
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <lcd_goto_xy>:
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	91 05       	cpc	r25, r1
 154:	49 f4       	brne	.+18     	; 0x168 <lcd_goto_xy+0x18>
 156:	86 2f       	mov	r24, r22
 158:	97 2f       	mov	r25, r23
 15a:	40 97       	sbiw	r24, 0x10	; 16
 15c:	78 f4       	brcc	.+30     	; 0x17c <lcd_goto_xy+0x2c>
 15e:	80 e8       	ldi	r24, 0x80	; 128
 160:	86 0f       	add	r24, r22
 162:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
 166:	08 95       	ret
 168:	02 97       	sbiw	r24, 0x02	; 2
 16a:	41 f4       	brne	.+16     	; 0x17c <lcd_goto_xy+0x2c>
 16c:	86 2f       	mov	r24, r22
 16e:	97 2f       	mov	r25, r23
 170:	40 97       	sbiw	r24, 0x10	; 16
 172:	20 f4       	brcc	.+8      	; 0x17c <lcd_goto_xy+0x2c>
 174:	80 ec       	ldi	r24, 0xC0	; 192
 176:	86 0f       	add	r24, r22
 178:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
 17c:	08 95       	ret

0000017e <lcd_write_string>:
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	8c 01       	movw	r16, r24
 188:	c0 e0       	ldi	r28, 0x00	; 0
 18a:	d0 e0       	ldi	r29, 0x00	; 0
 18c:	1e c0       	rjmp	.+60     	; 0x1ca <lcd_write_string+0x4c>
 18e:	21 96       	adiw	r28, 0x01	; 1
 190:	c1 31       	cpi	r28, 0x11	; 17
 192:	d1 05       	cpc	r29, r1
 194:	39 f4       	brne	.+14     	; 0x1a4 <lcd_write_string+0x26>
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_goto_xy>
 1a2:	0e c0       	rjmp	.+28     	; 0x1c0 <lcd_write_string+0x42>
 1a4:	c1 32       	cpi	r28, 0x21	; 33
 1a6:	d1 05       	cpc	r29, r1
 1a8:	5c f0       	brlt	.+22     	; 0x1c0 <lcd_write_string+0x42>
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_goto_xy>
 1bc:	c0 e0       	ldi	r28, 0x00	; 0
 1be:	d0 e0       	ldi	r29, 0x00	; 0
 1c0:	f8 01       	movw	r30, r16
 1c2:	81 91       	ld	r24, Z+
 1c4:	8f 01       	movw	r16, r30
 1c6:	0e 94 56 00 	call	0xac	; 0xac <lcd_write_char>
 1ca:	f8 01       	movw	r30, r16
 1cc:	80 81       	ld	r24, Z
 1ce:	81 11       	cpse	r24, r1
 1d0:	de cf       	rjmp	.-68     	; 0x18e <lcd_write_string+0x10>
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	08 95       	ret

000001dc <lcd_clear>:
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
 1e2:	08 95       	ret

000001e4 <lcd_init>:
 1e4:	87 e8       	ldi	r24, 0x87	; 135
 1e6:	93 e1       	ldi	r25, 0x13	; 19
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_init+0x4>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <lcd_init+0xa>
 1ee:	00 00       	nop
 1f0:	84 b3       	in	r24, 0x14	; 20
 1f2:	80 6f       	ori	r24, 0xF0	; 240
 1f4:	84 bb       	out	0x14, r24	; 20
 1f6:	81 b3       	in	r24, 0x11	; 17
 1f8:	84 60       	ori	r24, 0x04	; 4
 1fa:	81 bb       	out	0x11, r24	; 17
 1fc:	81 b3       	in	r24, 0x11	; 17
 1fe:	81 60       	ori	r24, 0x01	; 1
 200:	81 bb       	out	0x11, r24	; 17
 202:	81 b3       	in	r24, 0x11	; 17
 204:	82 60       	ori	r24, 0x02	; 2
 206:	81 bb       	out	0x11, r24	; 17
 208:	82 b3       	in	r24, 0x12	; 18
 20a:	88 7f       	andi	r24, 0xF8	; 248
 20c:	82 bb       	out	0x12, r24	; 18
 20e:	80 e3       	ldi	r24, 0x30	; 48
 210:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
 214:	83 ec       	ldi	r24, 0xC3	; 195
 216:	99 e0       	ldi	r25, 0x09	; 9
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <lcd_init+0x34>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <lcd_init+0x3a>
 21e:	00 00       	nop
 220:	80 e3       	ldi	r24, 0x30	; 48
 222:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
 226:	92 e4       	ldi	r25, 0x42	; 66
 228:	9a 95       	dec	r25
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcd_init+0x44>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <lcd_init+0x4a>
 22e:	80 e3       	ldi	r24, 0x30	; 48
 230:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
 23a:	88 e2       	ldi	r24, 0x28	; 40
 23c:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
 240:	88 e0       	ldi	r24, 0x08	; 8
 242:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
 246:	88 e0       	ldi	r24, 0x08	; 8
 248:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
 24c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_clear>
 250:	86 e0       	ldi	r24, 0x06	; 6
 252:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
 256:	8f e0       	ldi	r24, 0x0F	; 15
 258:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_write_command>
 25c:	08 95       	ret

0000025e <lcd_Write_Number>:
}


void lcd_Write_Number(unsigned int number)
{
 25e:	ef 92       	push	r14
 260:	ff 92       	push	r15
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
 26e:	2b 97       	sbiw	r28, 0x0b	; 11
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	f8 94       	cli
 274:	de bf       	out	0x3e, r29	; 62
 276:	0f be       	out	0x3f, r0	; 63
 278:	cd bf       	out	0x3d, r28	; 61
 27a:	8c 01       	movw	r16, r24
	unsigned int num_length = 0, i = 0,temp_num = number, rem ;
 27c:	9c 01       	movw	r18, r24
 27e:	e1 2c       	mov	r14, r1
 280:	f1 2c       	mov	r15, r1
	char str_arr[11];
	//Calculate Length of number
	while(temp_num != 0)
 282:	0e c0       	rjmp	.+28     	; 0x2a0 <lcd_Write_Number+0x42>
	{
		temp_num /= 10;
 284:	ad ec       	ldi	r26, 0xCD	; 205
 286:	bc ec       	ldi	r27, 0xCC	; 204
 288:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__umulhisi3>
 28c:	9c 01       	movw	r18, r24
 28e:	36 95       	lsr	r19
 290:	27 95       	ror	r18
 292:	36 95       	lsr	r19
 294:	27 95       	ror	r18
 296:	36 95       	lsr	r19
 298:	27 95       	ror	r18
		num_length++;
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	e8 1a       	sub	r14, r24
 29e:	f8 0a       	sbc	r15, r24
void lcd_Write_Number(unsigned int number)
{
	unsigned int num_length = 0, i = 0,temp_num = number, rem ;
	char str_arr[11];
	//Calculate Length of number
	while(temp_num != 0)
 2a0:	21 15       	cp	r18, r1
 2a2:	31 05       	cpc	r19, r1
 2a4:	79 f7       	brne	.-34     	; 0x284 <lcd_Write_Number+0x26>
 2a6:	e0 e0       	ldi	r30, 0x00	; 0
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	31 c0       	rjmp	.+98     	; 0x30e <lcd_Write_Number+0xb0>
	}
	//split each digit of number
	//temp_num = number;
	for(i=0; i<num_length; i++)
	{
		rem = number % 10;
 2ac:	98 01       	movw	r18, r16
 2ae:	ad ec       	ldi	r26, 0xCD	; 205
 2b0:	bc ec       	ldi	r27, 0xCC	; 204
 2b2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__umulhisi3>
 2b6:	ac 01       	movw	r20, r24
 2b8:	56 95       	lsr	r21
 2ba:	47 95       	ror	r20
 2bc:	56 95       	lsr	r21
 2be:	47 95       	ror	r20
 2c0:	56 95       	lsr	r21
 2c2:	47 95       	ror	r20
 2c4:	ca 01       	movw	r24, r20
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	44 0f       	add	r20, r20
 2cc:	55 1f       	adc	r21, r21
 2ce:	44 0f       	add	r20, r20
 2d0:	55 1f       	adc	r21, r21
 2d2:	44 0f       	add	r20, r20
 2d4:	55 1f       	adc	r21, r21
 2d6:	48 0f       	add	r20, r24
 2d8:	59 1f       	adc	r21, r25
 2da:	c8 01       	movw	r24, r16
 2dc:	84 1b       	sub	r24, r20
 2de:	95 0b       	sbc	r25, r21
 2e0:	ac 01       	movw	r20, r24
		number = number / 10;
 2e2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__umulhisi3>
 2e6:	8c 01       	movw	r16, r24
 2e8:	16 95       	lsr	r17
 2ea:	07 95       	ror	r16
 2ec:	16 95       	lsr	r17
 2ee:	07 95       	ror	r16
 2f0:	16 95       	lsr	r17
 2f2:	07 95       	ror	r16
		str_arr[num_length - (i+1)] = rem + '0';	
 2f4:	d7 01       	movw	r26, r14
 2f6:	ae 1b       	sub	r26, r30
 2f8:	bf 0b       	sbc	r27, r31
 2fa:	11 97       	sbiw	r26, 0x01	; 1
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	8c 0f       	add	r24, r28
 302:	9d 1f       	adc	r25, r29
 304:	a8 0f       	add	r26, r24
 306:	b9 1f       	adc	r27, r25
 308:	40 5d       	subi	r20, 0xD0	; 208
 30a:	4c 93       	st	X, r20
		temp_num /= 10;
		num_length++;
	}
	//split each digit of number
	//temp_num = number;
	for(i=0; i<num_length; i++)
 30c:	31 96       	adiw	r30, 0x01	; 1
 30e:	ee 15       	cp	r30, r14
 310:	ff 05       	cpc	r31, r15
 312:	60 f2       	brcs	.-104    	; 0x2ac <lcd_Write_Number+0x4e>
	{
		rem = number % 10;
		number = number / 10;
		str_arr[num_length - (i+1)] = rem + '0';	
	}
	str_arr[i] = '\0';
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	8c 0f       	add	r24, r28
 31a:	9d 1f       	adc	r25, r29
 31c:	e8 0f       	add	r30, r24
 31e:	f9 1f       	adc	r31, r25
 320:	10 82       	st	Z, r1
	lcd_write_string(str_arr);
 322:	ce 01       	movw	r24, r28
 324:	01 96       	adiw	r24, 0x01	; 1
 326:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_write_string>
 32a:	2b 96       	adiw	r28, 0x0b	; 11
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	f8 94       	cli
 330:	de bf       	out	0x3e, r29	; 62
 332:	0f be       	out	0x3f, r0	; 63
 334:	cd bf       	out	0x3d, r28	; 61
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	1f 91       	pop	r17
 33c:	0f 91       	pop	r16
 33e:	ff 90       	pop	r15
 340:	ef 90       	pop	r14
 342:	08 95       	ret

00000344 <main>:
}
*/


int main(void)
{
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
 34c:	2b 97       	sbiw	r28, 0x0b	; 11
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	f8 94       	cli
 352:	de bf       	out	0x3e, r29	; 62
 354:	0f be       	out	0x3f, r0	; 63
 356:	cd bf       	out	0x3d, r28	; 61
	/***************ADC Config When Using Polling Mechanism*******************/
	
	uint32_t vinput_mv, Temp;
	uint32_t ADC_Data, i = 0, bar_size;
	ADC_CONFIG_t ADC_config;
	ADC_config.ADC_MODE = ADC_MODE_SINGLE_CONVERSION;
 358:	1d 82       	std	Y+5, r1	; 0x05
	ADC_config.ADC_PRESCALER = ADC_PRESCALER_DIVUDED_BY_64;
 35a:	86 e0       	ldi	r24, 0x06	; 6
 35c:	88 87       	std	Y+8, r24	; 0x08
	ADC_config.ADC_Result_Presentation = ADC_Result_Presentation_RIGHT_ADJUSTED;
 35e:	1f 82       	std	Y+7, r1	; 0x07
	ADC_config.ADC_Voltage_REF = ADC_Voltage_REF_AVCC;
 360:	80 e4       	ldi	r24, 0x40	; 64
 362:	8e 83       	std	Y+6, r24	; 0x06
	ADC_config.IRQ_Enable = IRQ_ENABLE_NONE;
 364:	19 86       	std	Y+9, r1	; 0x09
	ADC_config.P_CallBack = NULL;
 366:	1b 86       	std	Y+11, r1	; 0x0b
 368:	1a 86       	std	Y+10, r1	; 0x0a
	MCAL_ADC_Init(&ADC_config);
 36a:	ce 01       	movw	r24, r28
 36c:	05 96       	adiw	r24, 0x05	; 5
 36e:	0e 94 14 02 	call	0x428	; 0x428 <MCAL_ADC_Init>
    lcd_init();
 372:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_init>
			
			/***************ADC PERCENTAGE WITH PROGRESS BAR*******************/
			
		/***************Using Polling Mechanism*******************/
		
		MCAL_ADC_Get_Result_Data(ADC1, &ADC_Data, Polling_ENABLE);
 376:	40 e0       	ldi	r20, 0x00	; 0
 378:	be 01       	movw	r22, r28
 37a:	6f 5f       	subi	r22, 0xFF	; 255
 37c:	7f 4f       	sbci	r23, 0xFF	; 255
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	0e 94 49 02 	call	0x492	; 0x492 <MCAL_ADC_Get_Result_Data>
		ADC_Data = ((ADC_Data * 100) / 1023);
 384:	29 81       	ldd	r18, Y+1	; 0x01
 386:	3a 81       	ldd	r19, Y+2	; 0x02
 388:	4b 81       	ldd	r20, Y+3	; 0x03
 38a:	5c 81       	ldd	r21, Y+4	; 0x04
 38c:	a4 e6       	ldi	r26, 0x64	; 100
 38e:	b0 e0       	ldi	r27, 0x00	; 0
 390:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__muluhisi3>
 394:	2f ef       	ldi	r18, 0xFF	; 255
 396:	33 e0       	ldi	r19, 0x03	; 3
 398:	40 e0       	ldi	r20, 0x00	; 0
 39a:	50 e0       	ldi	r21, 0x00	; 0
 39c:	0e 94 b6 02 	call	0x56c	; 0x56c <__udivmodsi4>
 3a0:	29 83       	std	Y+1, r18	; 0x01
 3a2:	3a 83       	std	Y+2, r19	; 0x02
 3a4:	4b 83       	std	Y+3, r20	; 0x03
 3a6:	5c 83       	std	Y+4, r21	; 0x04
		lcd_write_string("PERC :    ");
 3a8:	80 e6       	ldi	r24, 0x60	; 96
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_write_string>
		lcd_Write_Number((uint16_t)ADC_Data);
 3b0:	89 81       	ldd	r24, Y+1	; 0x01
 3b2:	9a 81       	ldd	r25, Y+2	; 0x02
 3b4:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_Write_Number>
		lcd_write_char('%');
 3b8:	85 e2       	ldi	r24, 0x25	; 37
 3ba:	0e 94 56 00 	call	0xac	; 0xac <lcd_write_char>
		lcd_goto_xy(2,0);
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	70 e0       	ldi	r23, 0x00	; 0
 3c2:	82 e0       	ldi	r24, 0x02	; 2
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_goto_xy>
		bar_size = (160 / (1000 / ADC_Data));
 3ca:	29 81       	ldd	r18, Y+1	; 0x01
 3cc:	3a 81       	ldd	r19, Y+2	; 0x02
 3ce:	4b 81       	ldd	r20, Y+3	; 0x03
 3d0:	5c 81       	ldd	r21, Y+4	; 0x04
 3d2:	68 ee       	ldi	r22, 0xE8	; 232
 3d4:	73 e0       	ldi	r23, 0x03	; 3
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 b6 02 	call	0x56c	; 0x56c <__udivmodsi4>
 3de:	60 ea       	ldi	r22, 0xA0	; 160
 3e0:	70 e0       	ldi	r23, 0x00	; 0
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 b6 02 	call	0x56c	; 0x56c <__udivmodsi4>
 3ea:	49 01       	movw	r8, r18
 3ec:	5a 01       	movw	r10, r20
		for(i=0; i<bar_size; i++)
 3ee:	c1 2c       	mov	r12, r1
 3f0:	d1 2c       	mov	r13, r1
 3f2:	76 01       	movw	r14, r12
 3f4:	08 c0       	rjmp	.+16     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
			lcd_write_char(0xff);
 3f6:	8f ef       	ldi	r24, 0xFF	; 255
 3f8:	0e 94 56 00 	call	0xac	; 0xac <lcd_write_char>
		lcd_write_string("PERC :    ");
		lcd_Write_Number((uint16_t)ADC_Data);
		lcd_write_char('%');
		lcd_goto_xy(2,0);
		bar_size = (160 / (1000 / ADC_Data));
		for(i=0; i<bar_size; i++)
 3fc:	2f ef       	ldi	r18, 0xFF	; 255
 3fe:	c2 1a       	sub	r12, r18
 400:	d2 0a       	sbc	r13, r18
 402:	e2 0a       	sbc	r14, r18
 404:	f2 0a       	sbc	r15, r18
 406:	c8 14       	cp	r12, r8
 408:	d9 04       	cpc	r13, r9
 40a:	ea 04       	cpc	r14, r10
 40c:	fb 04       	cpc	r15, r11
 40e:	98 f3       	brcs	.-26     	; 0x3f6 <main+0xb2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 410:	8f e3       	ldi	r24, 0x3F	; 63
 412:	9d e0       	ldi	r25, 0x0D	; 13
 414:	23 e0       	ldi	r18, 0x03	; 3
 416:	81 50       	subi	r24, 0x01	; 1
 418:	90 40       	sbci	r25, 0x00	; 0
 41a:	20 40       	sbci	r18, 0x00	; 0
 41c:	e1 f7       	brne	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 420:	00 00       	nop
			lcd_write_char(0xff);
		_delay_ms(1000);
		lcd_clear();
 422:	0e 94 ee 00 	call	0x1dc	; 0x1dc <lcd_clear>
		lcd_Write_Number(Temp);
		lcd_write_string(" C");
		_delay_ms(2000);
		lcd_clear();
		*/
    }
 426:	a7 cf       	rjmp	.-178    	; 0x376 <main+0x32>

00000428 <MCAL_ADC_Init>:
 */
void MCAL_ADC_DeInit(void)
{
	ADMUX = 0X00;
	ADCSRA = 0X00;
	SFIOR &= ~( (1<<5) | (1<<6) | (1<<7) );
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	ec 01       	movw	r28, r24
 42e:	87 e0       	ldi	r24, 0x07	; 7
 430:	fe 01       	movw	r30, r28
 432:	ac e6       	ldi	r26, 0x6C	; 108
 434:	b0 e0       	ldi	r27, 0x00	; 0
 436:	01 90       	ld	r0, Z+
 438:	0d 92       	st	X+, r0
 43a:	8a 95       	dec	r24
 43c:	e1 f7       	brne	.-8      	; 0x436 <MCAL_ADC_Init+0xe>
 43e:	96 b1       	in	r25, 0x06	; 6
 440:	88 81       	ld	r24, Y
 442:	89 2b       	or	r24, r25
 444:	86 b9       	out	0x06, r24	; 6
 446:	97 b1       	in	r25, 0x07	; 7
 448:	89 81       	ldd	r24, Y+1	; 0x01
 44a:	89 2b       	or	r24, r25
 44c:	87 b9       	out	0x07, r24	; 7
 44e:	97 b1       	in	r25, 0x07	; 7
 450:	8a 81       	ldd	r24, Y+2	; 0x02
 452:	89 2b       	or	r24, r25
 454:	87 b9       	out	0x07, r24	; 7
 456:	96 b1       	in	r25, 0x06	; 6
 458:	8b 81       	ldd	r24, Y+3	; 0x03
 45a:	89 2b       	or	r24, r25
 45c:	86 b9       	out	0x06, r24	; 6
 45e:	96 b1       	in	r25, 0x06	; 6
 460:	8c 81       	ldd	r24, Y+4	; 0x04
 462:	89 2b       	or	r24, r25
 464:	86 b9       	out	0x06, r24	; 6
 466:	8c 81       	ldd	r24, Y+4	; 0x04
 468:	88 30       	cpi	r24, 0x08	; 8
 46a:	21 f4       	brne	.+8      	; 0x474 <MCAL_ADC_Init+0x4c>
 46c:	8f b7       	in	r24, 0x3f	; 63
 46e:	80 68       	ori	r24, 0x80	; 128
 470:	8f bf       	out	0x3f, r24	; 63
 472:	03 c0       	rjmp	.+6      	; 0x47a <MCAL_ADC_Init+0x52>
 474:	8f b7       	in	r24, 0x3f	; 63
 476:	8f 77       	andi	r24, 0x7F	; 127
 478:	8f bf       	out	0x3f, r24	; 63
 47a:	86 b1       	in	r24, 0x06	; 6
 47c:	80 68       	ori	r24, 0x80	; 128
 47e:	86 b9       	out	0x06, r24	; 6
 480:	88 81       	ld	r24, Y
 482:	80 32       	cpi	r24, 0x20	; 32
 484:	19 f4       	brne	.+6      	; 0x48c <MCAL_ADC_Init+0x64>
 486:	86 b1       	in	r24, 0x06	; 6
 488:	80 64       	ori	r24, 0x40	; 64
 48a:	86 b9       	out	0x06, r24	; 6
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	08 95       	ret

00000492 <MCAL_ADC_Get_Result_Data>:
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	97 b1       	in	r25, 0x07	; 7
 498:	90 7e       	andi	r25, 0xE0	; 224
 49a:	97 b9       	out	0x07, r25	; 7
 49c:	97 b1       	in	r25, 0x07	; 7
 49e:	98 2b       	or	r25, r24
 4a0:	97 b9       	out	0x07, r25	; 7
 4a2:	5a b3       	in	r21, 0x1a	; 26
 4a4:	21 e0       	ldi	r18, 0x01	; 1
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	e9 01       	movw	r28, r18
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <MCAL_ADC_Get_Result_Data+0x1e>
 4ac:	cc 0f       	add	r28, r28
 4ae:	dd 1f       	adc	r29, r29
 4b0:	8a 95       	dec	r24
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <MCAL_ADC_Get_Result_Data+0x1a>
 4b4:	ce 01       	movw	r24, r28
 4b6:	80 95       	com	r24
 4b8:	85 23       	and	r24, r21
 4ba:	8a bb       	out	0x1a, r24	; 26
 4bc:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 4c0:	81 11       	cpse	r24, r1
 4c2:	03 c0       	rjmp	.+6      	; 0x4ca <MCAL_ADC_Get_Result_Data+0x38>
 4c4:	86 b1       	in	r24, 0x06	; 6
 4c6:	80 64       	ori	r24, 0x40	; 64
 4c8:	86 b9       	out	0x06, r24	; 6
 4ca:	41 11       	cpse	r20, r1
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <MCAL_ADC_Get_Result_Data+0x40>
 4ce:	34 9b       	sbis	0x06, 4	; 6
 4d0:	fe cf       	rjmp	.-4      	; 0x4ce <MCAL_ADC_Get_Result_Data+0x3c>
 4d2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end+0x2>
 4d6:	81 11       	cpse	r24, r1
 4d8:	08 c0       	rjmp	.+16     	; 0x4ea <MCAL_ADC_Get_Result_Data+0x58>
 4da:	e4 b1       	in	r30, 0x04	; 4
 4dc:	ae 2f       	mov	r26, r30
 4de:	b0 e0       	ldi	r27, 0x00	; 0
 4e0:	85 b1       	in	r24, 0x05	; 5
 4e2:	e0 e0       	ldi	r30, 0x00	; 0
 4e4:	f8 2f       	mov	r31, r24
 4e6:	f3 70       	andi	r31, 0x03	; 3
 4e8:	0f c0       	rjmp	.+30     	; 0x508 <MCAL_ADC_Get_Result_Data+0x76>
 4ea:	80 32       	cpi	r24, 0x20	; 32
 4ec:	69 f4       	brne	.+26     	; 0x508 <MCAL_ADC_Get_Result_Data+0x76>
 4ee:	e4 b1       	in	r30, 0x04	; 4
 4f0:	e2 95       	swap	r30
 4f2:	e6 95       	lsr	r30
 4f4:	e6 95       	lsr	r30
 4f6:	e3 70       	andi	r30, 0x03	; 3
 4f8:	ae 2f       	mov	r26, r30
 4fa:	b0 e0       	ldi	r27, 0x00	; 0
 4fc:	e5 b1       	in	r30, 0x05	; 5
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	ee 0f       	add	r30, r30
 502:	ff 1f       	adc	r31, r31
 504:	ee 0f       	add	r30, r30
 506:	ff 1f       	adc	r31, r31
 508:	ea 2b       	or	r30, r26
 50a:	fb 2b       	or	r31, r27
 50c:	db 01       	movw	r26, r22
 50e:	ed 93       	st	X+, r30
 510:	fc 93       	st	X, r31
 512:	86 b1       	in	r24, 0x06	; 6
 514:	8f 7e       	andi	r24, 0xEF	; 239
 516:	86 b9       	out	0x06, r24	; 6
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	08 95       	ret

0000051e <__vector_16>:
 *=======================================================================
 *
*/

ISR(ADC_vect)
{
 51e:	1f 92       	push	r1
 520:	0f 92       	push	r0
 522:	0f b6       	in	r0, 0x3f	; 63
 524:	0f 92       	push	r0
 526:	11 24       	eor	r1, r1
 528:	2f 93       	push	r18
 52a:	3f 93       	push	r19
 52c:	4f 93       	push	r20
 52e:	5f 93       	push	r21
 530:	6f 93       	push	r22
 532:	7f 93       	push	r23
 534:	8f 93       	push	r24
 536:	9f 93       	push	r25
 538:	af 93       	push	r26
 53a:	bf 93       	push	r27
 53c:	ef 93       	push	r30
 53e:	ff 93       	push	r31
	Global_Config.P_CallBack();
 540:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <__data_end+0x5>
 544:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <__data_end+0x6>
 548:	09 95       	icall
 54a:	ff 91       	pop	r31
 54c:	ef 91       	pop	r30
 54e:	bf 91       	pop	r27
 550:	af 91       	pop	r26
 552:	9f 91       	pop	r25
 554:	8f 91       	pop	r24
 556:	7f 91       	pop	r23
 558:	6f 91       	pop	r22
 55a:	5f 91       	pop	r21
 55c:	4f 91       	pop	r20
 55e:	3f 91       	pop	r19
 560:	2f 91       	pop	r18
 562:	0f 90       	pop	r0
 564:	0f be       	out	0x3f, r0	; 63
 566:	0f 90       	pop	r0
 568:	1f 90       	pop	r1
 56a:	18 95       	reti

0000056c <__udivmodsi4>:
 56c:	a1 e2       	ldi	r26, 0x21	; 33
 56e:	1a 2e       	mov	r1, r26
 570:	aa 1b       	sub	r26, r26
 572:	bb 1b       	sub	r27, r27
 574:	fd 01       	movw	r30, r26
 576:	0d c0       	rjmp	.+26     	; 0x592 <__udivmodsi4_ep>

00000578 <__udivmodsi4_loop>:
 578:	aa 1f       	adc	r26, r26
 57a:	bb 1f       	adc	r27, r27
 57c:	ee 1f       	adc	r30, r30
 57e:	ff 1f       	adc	r31, r31
 580:	a2 17       	cp	r26, r18
 582:	b3 07       	cpc	r27, r19
 584:	e4 07       	cpc	r30, r20
 586:	f5 07       	cpc	r31, r21
 588:	20 f0       	brcs	.+8      	; 0x592 <__udivmodsi4_ep>
 58a:	a2 1b       	sub	r26, r18
 58c:	b3 0b       	sbc	r27, r19
 58e:	e4 0b       	sbc	r30, r20
 590:	f5 0b       	sbc	r31, r21

00000592 <__udivmodsi4_ep>:
 592:	66 1f       	adc	r22, r22
 594:	77 1f       	adc	r23, r23
 596:	88 1f       	adc	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	1a 94       	dec	r1
 59c:	69 f7       	brne	.-38     	; 0x578 <__udivmodsi4_loop>
 59e:	60 95       	com	r22
 5a0:	70 95       	com	r23
 5a2:	80 95       	com	r24
 5a4:	90 95       	com	r25
 5a6:	9b 01       	movw	r18, r22
 5a8:	ac 01       	movw	r20, r24
 5aa:	bd 01       	movw	r22, r26
 5ac:	cf 01       	movw	r24, r30
 5ae:	08 95       	ret

000005b0 <__umulhisi3>:
 5b0:	a2 9f       	mul	r26, r18
 5b2:	b0 01       	movw	r22, r0
 5b4:	b3 9f       	mul	r27, r19
 5b6:	c0 01       	movw	r24, r0
 5b8:	a3 9f       	mul	r26, r19
 5ba:	70 0d       	add	r23, r0
 5bc:	81 1d       	adc	r24, r1
 5be:	11 24       	eor	r1, r1
 5c0:	91 1d       	adc	r25, r1
 5c2:	b2 9f       	mul	r27, r18
 5c4:	70 0d       	add	r23, r0
 5c6:	81 1d       	adc	r24, r1
 5c8:	11 24       	eor	r1, r1
 5ca:	91 1d       	adc	r25, r1
 5cc:	08 95       	ret

000005ce <__muluhisi3>:
 5ce:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__umulhisi3>
 5d2:	a5 9f       	mul	r26, r21
 5d4:	90 0d       	add	r25, r0
 5d6:	b4 9f       	mul	r27, r20
 5d8:	90 0d       	add	r25, r0
 5da:	a4 9f       	mul	r26, r20
 5dc:	80 0d       	add	r24, r0
 5de:	91 1d       	adc	r25, r1
 5e0:	11 24       	eor	r1, r1
 5e2:	08 95       	ret

000005e4 <_exit>:
 5e4:	f8 94       	cli

000005e6 <__stop_program>:
 5e6:	ff cf       	rjmp	.-2      	; 0x5e6 <__stop_program>
