
Unit8_Lesson4_SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006fe  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063a  00000000  00000000  000008f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000395  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000012c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039a  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000067  00000000  00000000  000016c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000172d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	uint8_t data;
    SPI_INIT();
  6c:	0e 94 4a 00 	call	0x94	; 0x94 <SPI_INIT>
	DDRA = 0xFF; //set PORTA as output
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	8a bb       	out	0x1a, r24	; 26
    while (1) 
    {
		for(data=0; data<=255; data++)
  74:	c0 e0       	ldi	r28, 0x00	; 0
		{
			SPI_Send_Data(data);
  76:	8c 2f       	mov	r24, r28
  78:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_Send_Data>
			PORTA = data;
  7c:	cb bb       	out	0x1b, r28	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	2f e9       	ldi	r18, 0x9F	; 159
  80:	86 e8       	ldi	r24, 0x86	; 134
  82:	91 e0       	ldi	r25, 0x01	; 1
  84:	21 50       	subi	r18, 0x01	; 1
  86:	80 40       	sbci	r24, 0x00	; 0
  88:	90 40       	sbci	r25, 0x00	; 0
  8a:	e1 f7       	brne	.-8      	; 0x84 <main+0x18>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <main+0x22>
  8e:	00 00       	nop
	uint8_t data;
    SPI_INIT();
	DDRA = 0xFF; //set PORTA as output
    while (1) 
    {
		for(data=0; data<=255; data++)
  90:	cf 5f       	subi	r28, 0xFF	; 255
  92:	f1 cf       	rjmp	.-30     	; 0x76 <main+0xa>

00000094 <SPI_INIT>:


void SPI_INIT(void)
{
	//Enable SPI
	Set_bit(SPCR, 6);
  94:	8d b1       	in	r24, 0x0d	; 13
  96:	80 64       	ori	r24, 0x40	; 64
  98:	8d b9       	out	0x0d, r24	; 13
	//bit order -->from LSB to MSB
	Set_bit(SPCR, 5);
  9a:	8d b1       	in	r24, 0x0d	; 13
  9c:	80 62       	ori	r24, 0x20	; 32
  9e:	8d b9       	out	0x0d, r24	; 13
	//Select SPI mode Master or Slave
	#ifdef MASTER_MODE
	Set_bit(SPCR, 4);
  a0:	8d b1       	in	r24, 0x0d	; 13
  a2:	80 61       	ori	r24, 0x10	; 16
  a4:	8d b9       	out	0x0d, r24	; 13
	Set_bit(DDRB,MOSI);				//set MOSI as output
  a6:	87 b3       	in	r24, 0x17	; 23
  a8:	80 62       	ori	r24, 0x20	; 32
  aa:	87 bb       	out	0x17, r24	; 23
	Clear_bit(DDRB,MISO);			//set MISO as input
  ac:	87 b3       	in	r24, 0x17	; 23
  ae:	8f 7b       	andi	r24, 0xBF	; 191
  b0:	87 bb       	out	0x17, r24	; 23
	Set_bit(DDRB,SCK);				//set SCK as output
  b2:	87 b3       	in	r24, 0x17	; 23
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	87 bb       	out	0x17, r24	; 23
	Set_bit(DDRB,SS);				//set SS as output
  b8:	87 b3       	in	r24, 0x17	; 23
  ba:	80 61       	ori	r24, 0x10	; 16
  bc:	87 bb       	out	0x17, r24	; 23
	Set_bit(DDRB,MISO);				//set MISO as output
	Clear_bit(DDRB,SCK);			//set SCK as input
	Clear_bit(DDRB,SS);				//set SS as input
	#endif
	//select clock polarity -->leading edge = rising
	Clear_bit(SPCR, 3);		
  be:	8d b1       	in	r24, 0x0d	; 13
  c0:	87 7f       	andi	r24, 0xF7	; 247
  c2:	8d b9       	out	0x0d, r24	; 13
	//select clock phase -->sample on leading edge
	Clear_bit(SPCR, 2);	
  c4:	8d b1       	in	r24, 0x0d	; 13
  c6:	8b 7f       	andi	r24, 0xFB	; 251
  c8:	8d b9       	out	0x0d, r24	; 13
	//select clock rate -->FOSC/4
	Clear_bit(SPCR, 1);
  ca:	8d b1       	in	r24, 0x0d	; 13
  cc:	8d 7f       	andi	r24, 0xFD	; 253
  ce:	8d b9       	out	0x0d, r24	; 13
	Clear_bit(SPCR, 0);
  d0:	8d b1       	in	r24, 0x0d	; 13
  d2:	8e 7f       	andi	r24, 0xFE	; 254
  d4:	8d b9       	out	0x0d, r24	; 13
  d6:	08 95       	ret

000000d8 <SPI_Send_Data>:
}


void SPI_Send_Data(uint8_t data)
{
	SPDR = data;
  d8:	8f b9       	out	0x0f, r24	; 15
	//wait for SPIF to be set
	while(! (SPSR & (1<<7)));
  da:	77 9b       	sbis	0x0e, 7	; 14
  dc:	fe cf       	rjmp	.-4      	; 0xda <SPI_Send_Data+0x2>
}
  de:	08 95       	ret

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
