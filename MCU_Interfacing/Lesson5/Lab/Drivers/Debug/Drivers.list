
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dd0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000f00  08000f00  00010f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f18  08000f18  00010f20  2**0
                  CONTENTS
  4 .ARM          00000000  08000f18  08000f18  00010f20  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f18  08000f20  00010f20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f18  08000f18  00010f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f1c  08000f1c  00010f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000000  08000f20  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000f20  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f20  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000445d  00000000  00000000  00010f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a9a  00000000  00000000  000153a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a4e  00000000  00000000  00015e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001b0  00000000  00000000  00016890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000158  00000000  00000000  00016a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000023dc  00000000  00000000  00016b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002138  00000000  00000000  00018f74  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009275  00000000  00000000  0001b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00024321  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000550  00000000  00000000  0002439c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ee8 	.word	0x08000ee8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ee8 	.word	0x08000ee8

08000170 <Usart_Interrupt_Handler>:
#endif
}


void Usart_Interrupt_Handler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

#ifdef SPI_MCU_MASTER_MODE
	MCAL_UART_ReceiveData(USART1, &Buffer, disable);
 8000174:	2200      	movs	r2, #0
 8000176:	490d      	ldr	r1, [pc, #52]	; (80001ac <Usart_Interrupt_Handler+0x3c>)
 8000178:	480d      	ldr	r0, [pc, #52]	; (80001b0 <Usart_Interrupt_Handler+0x40>)
 800017a:	f000 fe27 	bl	8000dcc <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1, &Buffer, enable);
 800017e:	2201      	movs	r2, #1
 8000180:	490a      	ldr	r1, [pc, #40]	; (80001ac <Usart_Interrupt_Handler+0x3c>)
 8000182:	480b      	ldr	r0, [pc, #44]	; (80001b0 <Usart_Interrupt_Handler+0x40>)
 8000184:	f000 fdf2 	bl	8000d6c <MCAL_UART_SendData>
	//Send Data With SPI
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, WRITE_PIN_LOW);		//NSS LOW
 8000188:	2200      	movs	r2, #0
 800018a:	2110      	movs	r1, #16
 800018c:	4809      	ldr	r0, [pc, #36]	; (80001b4 <Usart_Interrupt_Handler+0x44>)
 800018e:	f000 f998 	bl	80004c2 <MCAL_GPIO_WritePin>
	MCAL_SPI_TX_RX(SPI1, &Buffer, Polling_enable);
 8000192:	2201      	movs	r2, #1
 8000194:	4905      	ldr	r1, [pc, #20]	; (80001ac <Usart_Interrupt_Handler+0x3c>)
 8000196:	4808      	ldr	r0, [pc, #32]	; (80001b8 <Usart_Interrupt_Handler+0x48>)
 8000198:	f000 fbd4 	bl	8000944 <MCAL_SPI_TX_RX>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, WRITE_PIN_HIGH);		//NSS HIGH
 800019c:	2201      	movs	r2, #1
 800019e:	2110      	movs	r1, #16
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <Usart_Interrupt_Handler+0x44>)
 80001a2:	f000 f98e 	bl	80004c2 <MCAL_GPIO_WritePin>
#endif

}
 80001a6:	bf00      	nop
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	20000028 	.word	0x20000028
 80001b0:	40013800 	.word	0x40013800
 80001b4:	40010800 	.word	0x40010800
 80001b8:	40013000 	.word	0x40013000

080001bc <clock_init>:

void clock_init(void)
{
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0
	//Enable clock for GPIOA
	RCC_GPIOA_CLK_EN();
 80001c0:	4b0a      	ldr	r3, [pc, #40]	; (80001ec <clock_init+0x30>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	4a09      	ldr	r2, [pc, #36]	; (80001ec <clock_init+0x30>)
 80001c6:	f043 0304 	orr.w	r3, r3, #4
 80001ca:	6193      	str	r3, [r2, #24]
	//Enable clock for GPIOB
	RCC_GPIOB_CLK_EN();
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <clock_init+0x30>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a06      	ldr	r2, [pc, #24]	; (80001ec <clock_init+0x30>)
 80001d2:	f043 0308 	orr.w	r3, r3, #8
 80001d6:	6193      	str	r3, [r2, #24]
	//Enable clock for AFIO
	RCC_AFIO_CLK_EN();
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <clock_init+0x30>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	4a03      	ldr	r2, [pc, #12]	; (80001ec <clock_init+0x30>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6193      	str	r3, [r2, #24]
}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr
 80001ec:	40021000 	.word	0x40021000

080001f0 <main>:


int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b08e      	sub	sp, #56	; 0x38
 80001f4:	af00      	add	r7, sp, #0
	clock_init();
 80001f6:	f7ff ffe1 	bl	80001bc <clock_init>
	//==========================UART==========================
	USART_CONFIG_t UART_cfg;
	UART_cfg.USART_Mode = USART_MODE_TX_RX;
 80001fa:	230c      	movs	r3, #12
 80001fc:	f887 3020 	strb.w	r3, [r7, #32]
	UART_cfg.BaudRate_Speed = UART_BAUDRATE_SPEED_115200;
 8000200:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000204:	627b      	str	r3, [r7, #36]	; 0x24
	UART_cfg.FLOW_CTRL = UART_FLOWCTRL_NONE;
 8000206:	2300      	movs	r3, #0
 8000208:	85fb      	strh	r3, [r7, #46]	; 0x2e
	UART_cfg.Parity = UART_PARITY_DISABLE;
 800020a:	2300      	movs	r3, #0
 800020c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	UART_cfg.PayLoad_Data = UART_PAYLOAD_DATA_8BIT;
 800020e:	2300      	movs	r3, #0
 8000210:	853b      	strh	r3, [r7, #40]	; 0x28
	UART_cfg.IRQ_ENABLE = UART_IRQ_ENABLE_RXNE;
 8000212:	2320      	movs	r3, #32
 8000214:	863b      	strh	r3, [r7, #48]	; 0x30
	UART_cfg.Stop_bits = UART_STOP_BITS_1BIT;
 8000216:	2300      	movs	r3, #0
 8000218:	857b      	strh	r3, [r7, #42]	; 0x2a
	UART_cfg.P_IRQ_CallBack = Usart_Interrupt_Handler;
 800021a:	4b1d      	ldr	r3, [pc, #116]	; (8000290 <main+0xa0>)
 800021c:	637b      	str	r3, [r7, #52]	; 0x34
	MCAL_UART_Init(USART1, &UART_cfg);
 800021e:	f107 0320 	add.w	r3, r7, #32
 8000222:	4619      	mov	r1, r3
 8000224:	481b      	ldr	r0, [pc, #108]	; (8000294 <main+0xa4>)
 8000226:	f000 fc13 	bl	8000a50 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 800022a:	481a      	ldr	r0, [pc, #104]	; (8000294 <main+0xa4>)
 800022c:	f000 fcd8 	bl	8000be0 <MCAL_UART_GPIO_Set_Pins>
	//==========================SPI==========================
	SPI_Pinconfig_t SPI_Cfg;
#ifdef SPI_MCU_MASTER_MODE
	SPI_Cfg.SPI_MODE = SPI_MODE_MASTER;
 8000230:	2304      	movs	r3, #4
 8000232:	813b      	strh	r3, [r7, #8]
	SPI_Cfg.BAUDERATE_PRESCALER = BAUDERATE_PRESCALER_FCLK_DIVIDE_BY_8;
 8000234:	2310      	movs	r3, #16
 8000236:	82fb      	strh	r3, [r7, #22]
	SPI_Cfg.NSS_MANGEMENT = NSS_MANGEMENT_SOFTWARE_SSI_SET;
 8000238:	f44f 7340 	mov.w	r3, #768	; 0x300
 800023c:	82bb      	strh	r3, [r7, #20]
	SPI_Cfg.IRQ_ENABLE = IRQ_ENABLE_NONE;
 800023e:	2300      	movs	r3, #0
 8000240:	833b      	strh	r3, [r7, #24]
	SPI_Cfg.P_IRQ_CallBack = NULL;
 8000242:	2300      	movs	r3, #0
 8000244:	61fb      	str	r3, [r7, #28]
	//Configure GPIOA Pin 4 with NSS of SPI1
	GPIO_Pinconfig_t SPI_GPIO_Config;
	SPI_GPIO_Config.PinNumber = GPIO_PIN_4;
 8000246:	2310      	movs	r3, #16
 8000248:	80bb      	strh	r3, [r7, #4]
	SPI_GPIO_Config.Mode = GPIO_MODE_Output_PP;
 800024a:	2304      	movs	r3, #4
 800024c:	71bb      	strb	r3, [r7, #6]
	SPI_GPIO_Config.Output_speed = GPIO_SPEED_10M;
 800024e:	2301      	movs	r3, #1
 8000250:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4619      	mov	r1, r3
 8000256:	4810      	ldr	r0, [pc, #64]	; (8000298 <main+0xa8>)
 8000258:	f000 f8ae 	bl	80003b8 <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, WRITE_PIN_HIGH);		//NSS HIGH
 800025c:	2201      	movs	r2, #1
 800025e:	2110      	movs	r1, #16
 8000260:	480d      	ldr	r0, [pc, #52]	; (8000298 <main+0xa8>)
 8000262:	f000 f92e 	bl	80004c2 <MCAL_GPIO_WritePin>
	SPI_Cfg.NSS_MANGEMENT = NSS_MANGEMENT_SLAVE_HARDWARE;
	SPI_Cfg.IRQ_ENABLE = IRQ_ENABLE_RXNEIE;
	SPI_Cfg.P_IRQ_CallBack = SPI1_Interrupt_Handler;
#endif

	SPI_Cfg.FRAME_FORMAT = FRAME_FORMAT_MSB_FIRST;
 8000266:	2300      	movs	r3, #0
 8000268:	817b      	strh	r3, [r7, #10]
	SPI_Cfg.FRAME_SIZE = FRAME_SIZE_8BIT;
 800026a:	2300      	movs	r3, #0
 800026c:	81bb      	strh	r3, [r7, #12]
	SPI_Cfg.COMMUNICATION_MODE = COMMUNICATION_MODE_2LINE_FULL_DUPLEX;
 800026e:	2300      	movs	r3, #0
 8000270:	81fb      	strh	r3, [r7, #14]
	SPI_Cfg.CLK_POLARITY = CLK_POLARITY_IDLE_HIGH;
 8000272:	2302      	movs	r3, #2
 8000274:	823b      	strh	r3, [r7, #16]
	SPI_Cfg.CLK_PHASE = CLK_POLARITY_SECOND_CLK_CAPTURE;
 8000276:	2301      	movs	r3, #1
 8000278:	827b      	strh	r3, [r7, #18]
	MCAL_SPI_Init(SPI1, &SPI_Cfg);
 800027a:	f107 0308 	add.w	r3, r7, #8
 800027e:	4619      	mov	r1, r3
 8000280:	4806      	ldr	r0, [pc, #24]	; (800029c <main+0xac>)
 8000282:	f000 f997 	bl	80005b4 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 8000286:	4805      	ldr	r0, [pc, #20]	; (800029c <main+0xac>)
 8000288:	f000 fa38 	bl	80006fc <MCAL_SPI_GPIO_Set_Pins>

    while(1)
 800028c:	e7fe      	b.n	800028c <main+0x9c>
 800028e:	bf00      	nop
 8000290:	08000171 	.word	0x08000171
 8000294:	40013800 	.word	0x40013800
 8000298:	40010800 	.word	0x40010800
 800029c:	40013000 	.word	0x40013000

080002a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a0:	480d      	ldr	r0, [pc, #52]	; (80002d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a8:	480c      	ldr	r0, [pc, #48]	; (80002dc <LoopForever+0x6>)
  ldr r1, =_edata
 80002aa:	490d      	ldr	r1, [pc, #52]	; (80002e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ac:	4a0d      	ldr	r2, [pc, #52]	; (80002e4 <LoopForever+0xe>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b0:	e002      	b.n	80002b8 <LoopCopyDataInit>

080002b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b6:	3304      	adds	r3, #4

080002b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002bc:	d3f9      	bcc.n	80002b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002be:	4a0a      	ldr	r2, [pc, #40]	; (80002e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c0:	4c0a      	ldr	r4, [pc, #40]	; (80002ec <LoopForever+0x16>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c4:	e001      	b.n	80002ca <LoopFillZerobss>

080002c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c8:	3204      	adds	r2, #4

080002ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002cc:	d3fb      	bcc.n	80002c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ce:	f000 fde7 	bl	8000ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d2:	f7ff ff8d 	bl	80001f0 <main>

080002d6 <LoopForever>:

LoopForever:
    b LoopForever
 80002d6:	e7fe      	b.n	80002d6 <LoopForever>
  ldr   r0, =_estack
 80002d8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e4:	08000f20 	.word	0x08000f20
  ldr r2, =_sbss
 80002e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ec:	20000030 	.word	0x20000030

080002f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f0:	e7fe      	b.n	80002f0 <ADC1_2_IRQHandler>

080002f2 <get_position>:

#include "stm32_f103c6_gpio_drivers.h"


uint8_t get_position(uint16_t pin_number)
{
 80002f2:	b480      	push	{r7}
 80002f4:	b083      	sub	sp, #12
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	4603      	mov	r3, r0
 80002fa:	80fb      	strh	r3, [r7, #6]
	switch(pin_number)
 80002fc:	88fb      	ldrh	r3, [r7, #6]
 80002fe:	2b80      	cmp	r3, #128	; 0x80
 8000300:	d042      	beq.n	8000388 <get_position+0x96>
 8000302:	2b80      	cmp	r3, #128	; 0x80
 8000304:	dc11      	bgt.n	800032a <get_position+0x38>
 8000306:	2b08      	cmp	r3, #8
 8000308:	d036      	beq.n	8000378 <get_position+0x86>
 800030a:	2b08      	cmp	r3, #8
 800030c:	dc06      	bgt.n	800031c <get_position+0x2a>
 800030e:	2b02      	cmp	r3, #2
 8000310:	d02e      	beq.n	8000370 <get_position+0x7e>
 8000312:	2b04      	cmp	r3, #4
 8000314:	d02e      	beq.n	8000374 <get_position+0x82>
 8000316:	2b01      	cmp	r3, #1
 8000318:	d028      	beq.n	800036c <get_position+0x7a>
 800031a:	e047      	b.n	80003ac <get_position+0xba>
 800031c:	2b20      	cmp	r3, #32
 800031e:	d02f      	beq.n	8000380 <get_position+0x8e>
 8000320:	2b40      	cmp	r3, #64	; 0x40
 8000322:	d02f      	beq.n	8000384 <get_position+0x92>
 8000324:	2b10      	cmp	r3, #16
 8000326:	d029      	beq.n	800037c <get_position+0x8a>
 8000328:	e040      	b.n	80003ac <get_position+0xba>
 800032a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800032e:	d033      	beq.n	8000398 <get_position+0xa6>
 8000330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000334:	dc09      	bgt.n	800034a <get_position+0x58>
 8000336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800033a:	d029      	beq.n	8000390 <get_position+0x9e>
 800033c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000340:	d028      	beq.n	8000394 <get_position+0xa2>
 8000342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000346:	d021      	beq.n	800038c <get_position+0x9a>
 8000348:	e030      	b.n	80003ac <get_position+0xba>
 800034a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800034e:	d027      	beq.n	80003a0 <get_position+0xae>
 8000350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000354:	dc03      	bgt.n	800035e <get_position+0x6c>
 8000356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800035a:	d01f      	beq.n	800039c <get_position+0xaa>
 800035c:	e026      	b.n	80003ac <get_position+0xba>
 800035e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000362:	d01f      	beq.n	80003a4 <get_position+0xb2>
 8000364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000368:	d01e      	beq.n	80003a8 <get_position+0xb6>
 800036a:	e01f      	b.n	80003ac <get_position+0xba>
	{
	case  GPIO_PIN_0 :
		return 0;
 800036c:	2300      	movs	r3, #0
 800036e:	e01e      	b.n	80003ae <get_position+0xbc>
		break;
	case  GPIO_PIN_1 :
		return 4;
 8000370:	2304      	movs	r3, #4
 8000372:	e01c      	b.n	80003ae <get_position+0xbc>
		break;
	case  GPIO_PIN_2 :
		return 8;
 8000374:	2308      	movs	r3, #8
 8000376:	e01a      	b.n	80003ae <get_position+0xbc>
		break;
	case  GPIO_PIN_3 :
		return 12;
 8000378:	230c      	movs	r3, #12
 800037a:	e018      	b.n	80003ae <get_position+0xbc>
		break;
	case  GPIO_PIN_4 :
		return 16;
 800037c:	2310      	movs	r3, #16
 800037e:	e016      	b.n	80003ae <get_position+0xbc>
		break;
	case  GPIO_PIN_5 :
		return 20;
 8000380:	2314      	movs	r3, #20
 8000382:	e014      	b.n	80003ae <get_position+0xbc>
		break;
	case  GPIO_PIN_6 :
		return 24;
 8000384:	2318      	movs	r3, #24
 8000386:	e012      	b.n	80003ae <get_position+0xbc>
		break;
	case  GPIO_PIN_7 :
		return 28;
 8000388:	231c      	movs	r3, #28
 800038a:	e010      	b.n	80003ae <get_position+0xbc>
		break;
	case  GPIO_PIN_8 :
		return 0;
 800038c:	2300      	movs	r3, #0
 800038e:	e00e      	b.n	80003ae <get_position+0xbc>
		break;
	case  GPIO_PIN_9 :
		return 4;
 8000390:	2304      	movs	r3, #4
 8000392:	e00c      	b.n	80003ae <get_position+0xbc>
		break;
	case  GPIO_PIN_10 :
		return 8;
 8000394:	2308      	movs	r3, #8
 8000396:	e00a      	b.n	80003ae <get_position+0xbc>
		break;
	case  GPIO_PIN_11 :
		return 12;
 8000398:	230c      	movs	r3, #12
 800039a:	e008      	b.n	80003ae <get_position+0xbc>
		break;
	case  GPIO_PIN_12 :
		return 16;
 800039c:	2310      	movs	r3, #16
 800039e:	e006      	b.n	80003ae <get_position+0xbc>
		break;
	case  GPIO_PIN_13 :
		return 20;
 80003a0:	2314      	movs	r3, #20
 80003a2:	e004      	b.n	80003ae <get_position+0xbc>
		break;
	case  GPIO_PIN_14 :
		return 24;
 80003a4:	2318      	movs	r3, #24
 80003a6:	e002      	b.n	80003ae <get_position+0xbc>
		break;
	case  GPIO_PIN_15 :
		return 28;
 80003a8:	231c      	movs	r3, #28
 80003aa:	e000      	b.n	80003ae <get_position+0xbc>
		break;
	}
	return 0;
 80003ac:	2300      	movs	r3, #0
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr

080003b8 <MCAL_GPIO_Init>:
 * @retval 			-	none
 * Note 			-	STM32f103c6 MCU has GPIO A,B,B,D,E modules
 *                      but LQFP48 Package has only A,B, Part of C,D
 */
void MCAL_GPIO_Init(GPIO_TypeDef * GPIOx, GPIO_Pinconfig_t * pinconfig)
{
 80003b8:	b590      	push	{r4, r7, lr}
 80003ba:	b085      	sub	sp, #20
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) pins 0 >>> 7
	//Port configuration register high (GPIOx_CRH) pins 8 >>> 15
	volatile uint32_t * configreg = NULL;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	73fb      	strb	r3, [r7, #15]
	configreg = (pinconfig->PinNumber < GPIO_PIN_8)? &GPIOx->CRL: &GPIOx->CRH;
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	881b      	ldrh	r3, [r3, #0]
 80003ce:	2bff      	cmp	r3, #255	; 0xff
 80003d0:	d801      	bhi.n	80003d6 <MCAL_GPIO_Init+0x1e>
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	e001      	b.n	80003da <MCAL_GPIO_Init+0x22>
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	3304      	adds	r3, #4
 80003da:	60bb      	str	r3, [r7, #8]
	//clear CNFy[1:0] , MODEy[1:0]
	*(configreg) &= ~(0xf << get_position(pinconfig->PinNumber));
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	881b      	ldrh	r3, [r3, #0]
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff ff86 	bl	80002f2 <get_position>
 80003e6:	4603      	mov	r3, r0
 80003e8:	461a      	mov	r2, r3
 80003ea:	230f      	movs	r3, #15
 80003ec:	4093      	lsls	r3, r2
 80003ee:	43da      	mvns	r2, r3
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	401a      	ands	r2, r3
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	601a      	str	r2, [r3, #0]
	//if pin is output
	if ( (pinconfig ->Mode == GPIO_MODE_Output_PP || pinconfig ->Mode == GPIO_MODE_Output_OD || pinconfig ->Mode == GPIO_MODE_Output_AF_PP || pinconfig ->Mode == GPIO_MODE_Output_AF_OD) )
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	789b      	ldrb	r3, [r3, #2]
 80003fe:	2b04      	cmp	r3, #4
 8000400:	d00b      	beq.n	800041a <MCAL_GPIO_Init+0x62>
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	789b      	ldrb	r3, [r3, #2]
 8000406:	2b05      	cmp	r3, #5
 8000408:	d007      	beq.n	800041a <MCAL_GPIO_Init+0x62>
 800040a:	683b      	ldr	r3, [r7, #0]
 800040c:	789b      	ldrb	r3, [r3, #2]
 800040e:	2b06      	cmp	r3, #6
 8000410:	d003      	beq.n	800041a <MCAL_GPIO_Init+0x62>
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	789b      	ldrb	r3, [r3, #2]
 8000416:	2b07      	cmp	r3, #7
 8000418:	d10e      	bne.n	8000438 <MCAL_GPIO_Init+0x80>
	{
		PIN_Config = ( ((pinconfig ->Mode - 4) << 2) | (pinconfig ->Output_speed  & 0x0f) );
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	789b      	ldrb	r3, [r3, #2]
 800041e:	3b04      	subs	r3, #4
 8000420:	009b      	lsls	r3, r3, #2
 8000422:	b25a      	sxtb	r2, r3
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	78db      	ldrb	r3, [r3, #3]
 8000428:	b25b      	sxtb	r3, r3
 800042a:	f003 030f 	and.w	r3, r3, #15
 800042e:	b25b      	sxtb	r3, r3
 8000430:	4313      	orrs	r3, r2
 8000432:	b25b      	sxtb	r3, r3
 8000434:	73fb      	strb	r3, [r7, #15]
 8000436:	e032      	b.n	800049e <MCAL_GPIO_Init+0xe6>
	}
	//if pin is input
	else	//MODEy[1:0] = 00: Input mode (reset state)
	{
		//Input with pull-up / pull-down mode
		if( pinconfig ->Mode == GPIO_MODE_Input_PD || pinconfig ->Mode == GPIO_MODE_Input_PU )
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	789b      	ldrb	r3, [r3, #2]
 800043c:	2b03      	cmp	r3, #3
 800043e:	d003      	beq.n	8000448 <MCAL_GPIO_Init+0x90>
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	789b      	ldrb	r3, [r3, #2]
 8000444:	2b02      	cmp	r3, #2
 8000446:	d11a      	bne.n	800047e <MCAL_GPIO_Init+0xc6>
		{
			PIN_Config = ( ((GPIO_MODE_Input_PU << 2) | 0x0) & 0x0f );
 8000448:	2308      	movs	r3, #8
 800044a:	73fb      	strb	r3, [r7, #15]
			//check if mode is pull-down
			if( pinconfig ->Mode == GPIO_MODE_Input_PD )
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	789b      	ldrb	r3, [r3, #2]
 8000450:	2b03      	cmp	r3, #3
 8000452:	d108      	bne.n	8000466 <MCAL_GPIO_Init+0xae>
			{
				//According to Table 20. Port bit configuration table : PxODR = 0
				GPIOx ->ODR  &= ~(pinconfig ->PinNumber);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	683a      	ldr	r2, [r7, #0]
 800045a:	8812      	ldrh	r2, [r2, #0]
 800045c:	43d2      	mvns	r2, r2
 800045e:	401a      	ands	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	60da      	str	r2, [r3, #12]
			if( pinconfig ->Mode == GPIO_MODE_Input_PD )
 8000464:	e01a      	b.n	800049c <MCAL_GPIO_Init+0xe4>
			}
			//check if mode is pull-up
			else if( pinconfig ->Mode == GPIO_MODE_Input_PU )
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	789b      	ldrb	r3, [r3, #2]
 800046a:	2b02      	cmp	r3, #2
 800046c:	d116      	bne.n	800049c <MCAL_GPIO_Init+0xe4>
			{
				//According to Table 20. Port bit configuration table : PxODR = 1
				GPIOx ->ODR  |= (pinconfig ->PinNumber);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	68db      	ldr	r3, [r3, #12]
 8000472:	683a      	ldr	r2, [r7, #0]
 8000474:	8812      	ldrh	r2, [r2, #0]
 8000476:	431a      	orrs	r2, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	60da      	str	r2, [r3, #12]
			if( pinconfig ->Mode == GPIO_MODE_Input_PD )
 800047c:	e00e      	b.n	800049c <MCAL_GPIO_Init+0xe4>
			}
		}
		else if ( pinconfig ->Mode == GPIO_MODE_AF_Input)	//consider it  as input floating
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	789b      	ldrb	r3, [r3, #2]
 8000482:	2b08      	cmp	r3, #8
 8000484:	d102      	bne.n	800048c <MCAL_GPIO_Init+0xd4>
		{
			PIN_Config = ( ((GPIO_MODE_Input_FLU << 2) | 0x0) & 0x0f );
 8000486:	2304      	movs	r3, #4
 8000488:	73fb      	strb	r3, [r7, #15]
 800048a:	e008      	b.n	800049e <MCAL_GPIO_Init+0xe6>
		}
		else	//Analog mode , input floating
		{
			PIN_Config = ( ((pinconfig ->Mode << 2) | 0x0) & 0x0f );
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	789b      	ldrb	r3, [r3, #2]
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	b2db      	uxtb	r3, r3
 8000494:	f003 030f 	and.w	r3, r3, #15
 8000498:	73fb      	strb	r3, [r7, #15]
 800049a:	e000      	b.n	800049e <MCAL_GPIO_Init+0xe6>
			if( pinconfig ->Mode == GPIO_MODE_Input_PD )
 800049c:	bf00      	nop
		}
	}
	//Write on CRL or CRH
	*(configreg) |= ( (PIN_Config) << get_position(pinconfig ->PinNumber) );
 800049e:	7bfc      	ldrb	r4, [r7, #15]
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	881b      	ldrh	r3, [r3, #0]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff ff24 	bl	80002f2 <get_position>
 80004aa:	4603      	mov	r3, r0
 80004ac:	fa04 f203 	lsl.w	r2, r4, r3
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	431a      	orrs	r2, r3
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	601a      	str	r2, [r3, #0]
}
 80004ba:	bf00      	nop
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd90      	pop	{r4, r7, pc}

080004c2 <MCAL_GPIO_WritePin>:
 * @retval 			-	none
 * Note 			-	none
 */

void MCAL_GPIO_WritePin(GPIO_TypeDef * GPIOx, uint16_t PinNumber, uint8_t Value)
{
 80004c2:	b480      	push	{r7}
 80004c4:	b083      	sub	sp, #12
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
 80004ca:	460b      	mov	r3, r1
 80004cc:	807b      	strh	r3, [r7, #2]
 80004ce:	4613      	mov	r3, r2
 80004d0:	707b      	strb	r3, [r7, #1]
	if(Value == READ_PIN_HIGH)
 80004d2:	787b      	ldrb	r3, [r7, #1]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d106      	bne.n	80004e6 <MCAL_GPIO_WritePin+0x24>
		GPIOx ->ODR |= PinNumber;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	68da      	ldr	r2, [r3, #12]
 80004dc:	887b      	ldrh	r3, [r7, #2]
 80004de:	431a      	orrs	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	60da      	str	r2, [r3, #12]
//	if(Value == READ_PIN_HIGH)
//		GPIOx ->BSRR = (uint32_t)PinNumber;
//	else
//		GPIOx ->BRR = (uint32_t)PinNumber;

}
 80004e4:	e006      	b.n	80004f4 <MCAL_GPIO_WritePin+0x32>
		GPIOx ->ODR &= ~(PinNumber);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	68db      	ldr	r3, [r3, #12]
 80004ea:	887a      	ldrh	r2, [r7, #2]
 80004ec:	43d2      	mvns	r2, r2
 80004ee:	401a      	ands	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	60da      	str	r2, [r3, #12]
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
	...

08000500 <MCAL_RCC_getPCLK1Freq>:
//100: HCLK divided by 2
//101: HCLK divided by 4
//110: HCLK divided by 8
//111: HCLK divided by 16
uint32_t MCAL_RCC_getPCLK1Freq(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
	return (MCAL_RCC_getHCLKFreq() >> (APBPrescaler_table[(RCC ->CFGR >> 8) & 0b111]) )  ;
 8000504:	f000 f824 	bl	8000550 <MCAL_RCC_getHCLKFreq>
 8000508:	4601      	mov	r1, r0
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <MCAL_RCC_getPCLK1Freq+0x20>)
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	0a1b      	lsrs	r3, r3, #8
 8000510:	f003 0307 	and.w	r3, r3, #7
 8000514:	4a03      	ldr	r2, [pc, #12]	; (8000524 <MCAL_RCC_getPCLK1Freq+0x24>)
 8000516:	5cd3      	ldrb	r3, [r2, r3]
 8000518:	fa21 f303 	lsr.w	r3, r1, r3
}
 800051c:	4618      	mov	r0, r3
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40021000 	.word	0x40021000
 8000524:	08000f00 	.word	0x08000f00

08000528 <MCAL_RCC_getPCLK2Freq>:
//100: HCLK divided by 2
//101: HCLK divided by 4
//110: HCLK divided by 8
//111: HCLK divided by 16
uint32_t MCAL_RCC_getPCLK2Freq(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2)
	return (MCAL_RCC_getHCLKFreq() >> (APBPrescaler_table[(RCC ->CFGR >> 11) & 0b111]) )  ;
 800052c:	f000 f810 	bl	8000550 <MCAL_RCC_getHCLKFreq>
 8000530:	4601      	mov	r1, r0
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <MCAL_RCC_getPCLK2Freq+0x20>)
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	0adb      	lsrs	r3, r3, #11
 8000538:	f003 0307 	and.w	r3, r3, #7
 800053c:	4a03      	ldr	r2, [pc, #12]	; (800054c <MCAL_RCC_getPCLK2Freq+0x24>)
 800053e:	5cd3      	ldrb	r3, [r2, r3]
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000544:	4618      	mov	r0, r3
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40021000 	.word	0x40021000
 800054c:	08000f00 	.word	0x08000f00

08000550 <MCAL_RCC_getHCLKFreq>:
//1101: SYSCLK divided by 128
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512

uint32_t MCAL_RCC_getHCLKFreq(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	return (MCAL_RCC_getSysCLKFreq() >> (AHBPrescaler_table[(RCC ->CFGR >> 4) & 0xf]) )  ;
 8000554:	f000 f810 	bl	8000578 <MCAL_RCC_getSysCLKFreq>
 8000558:	4601      	mov	r1, r0
 800055a:	4b05      	ldr	r3, [pc, #20]	; (8000570 <MCAL_RCC_getHCLKFreq+0x20>)
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	091b      	lsrs	r3, r3, #4
 8000560:	f003 030f 	and.w	r3, r3, #15
 8000564:	4a03      	ldr	r2, [pc, #12]	; (8000574 <MCAL_RCC_getHCLKFreq+0x24>)
 8000566:	5cd3      	ldrb	r3, [r2, r3]
 8000568:	fa21 f303 	lsr.w	r3, r1, r3
}
 800056c:	4618      	mov	r0, r3
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40021000 	.word	0x40021000
 8000574:	08000f08 	.word	0x08000f08

08000578 <MCAL_RCC_getSysCLKFreq>:


uint32_t MCAL_RCC_getSysCLKFreq(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	//Set and cleared by hardware to indicate which clock source is used as system clock.
	//00: HSI oscillator used as system clock
	//01: HSE oscillator used as system clock
	//10: PLL used as system clock
	//11: Not applicable
	switch((RCC ->CFGR >> 2) &0b11)
 800057c:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <MCAL_RCC_getSysCLKFreq+0x30>)
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	089b      	lsrs	r3, r3, #2
 8000582:	f003 0303 	and.w	r3, r3, #3
 8000586:	2b01      	cmp	r3, #1
 8000588:	d006      	beq.n	8000598 <MCAL_RCC_getSysCLKFreq+0x20>
 800058a:	2b01      	cmp	r3, #1
 800058c:	d302      	bcc.n	8000594 <MCAL_RCC_getSysCLKFreq+0x1c>
 800058e:	2b02      	cmp	r3, #2
 8000590:	d004      	beq.n	800059c <MCAL_RCC_getSysCLKFreq+0x24>
 8000592:	e005      	b.n	80005a0 <MCAL_RCC_getSysCLKFreq+0x28>
	{
	case 0 :
		return (HSI_RC_CLOCK);
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <MCAL_RCC_getSysCLKFreq+0x34>)
 8000596:	e003      	b.n	80005a0 <MCAL_RCC_getSysCLKFreq+0x28>
		break;
	case 1 :
		return (HSE_CLOCK);
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <MCAL_RCC_getSysCLKFreq+0x38>)
 800059a:	e001      	b.n	80005a0 <MCAL_RCC_getSysCLKFreq+0x28>
		break;
	case 2 :
		return ((uint32_t)(16000000));
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <MCAL_RCC_getSysCLKFreq+0x38>)
 800059e:	e7ff      	b.n	80005a0 <MCAL_RCC_getSysCLKFreq+0x28>
		break;
	}
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr
 80005a8:	40021000 	.word	0x40021000
 80005ac:	007a1200 	.word	0x007a1200
 80005b0:	00f42400 	.word	0x00f42400

080005b4 <MCAL_SPI_Init>:
 * Note 			-	Supported for SPI FULL DUPLEX Master/Slave only & NSS Hardware/Software
 * 					-	You have to configure RCC to select clock for the selected SPI Module
 *
 */
void MCAL_SPI_Init(SPI_TypeDef * SPIx, SPI_Pinconfig_t * SPI_Config)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	//Enable Clock for the selected SPI Module
	if(SPIx == SPI1)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4a49      	ldr	r2, [pc, #292]	; (80006e8 <MCAL_SPI_Init+0x134>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d109      	bne.n	80005da <MCAL_SPI_Init+0x26>
	{
		RCC_SPI1_CLK_EN();
 80005c6:	4b49      	ldr	r3, [pc, #292]	; (80006ec <MCAL_SPI_Init+0x138>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	4a48      	ldr	r2, [pc, #288]	; (80006ec <MCAL_SPI_Init+0x138>)
 80005cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005d0:	6193      	str	r3, [r2, #24]
		//store BackUpdata of each SPI module in Global Variable
		Global_SPI_Config[SPI1_INDEX] = SPI_Config;
 80005d2:	4a47      	ldr	r2, [pc, #284]	; (80006f0 <MCAL_SPI_Init+0x13c>)
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	e00c      	b.n	80005f4 <MCAL_SPI_Init+0x40>
	}
	else if (SPIx == SPI2)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a45      	ldr	r2, [pc, #276]	; (80006f4 <MCAL_SPI_Init+0x140>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d108      	bne.n	80005f4 <MCAL_SPI_Init+0x40>
	{
		RCC_SPI2_CLK_EN();
 80005e2:	4b42      	ldr	r3, [pc, #264]	; (80006ec <MCAL_SPI_Init+0x138>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a41      	ldr	r2, [pc, #260]	; (80006ec <MCAL_SPI_Init+0x138>)
 80005e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ec:	61d3      	str	r3, [r2, #28]
		//store BackUpdata of each SPI module in Global Variable
		Global_SPI_Config[SPI2_INDEX] = SPI_Config;
 80005ee:	4a40      	ldr	r2, [pc, #256]	; (80006f0 <MCAL_SPI_Init+0x13c>)
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	6053      	str	r3, [r2, #4]
	}

	//Select SPI Mode
	SPIx->SPI_CR1 |= SPI_Config->SPI_MODE;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	683a      	ldr	r2, [r7, #0]
 80005fa:	8812      	ldrh	r2, [r2, #0]
 80005fc:	431a      	orrs	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	601a      	str	r2, [r3, #0]

	//select SPI Frame Format(LSB First/MSB First)
	SPIx->SPI_CR1 |= SPI_Config->FRAME_FORMAT;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	683a      	ldr	r2, [r7, #0]
 8000608:	8852      	ldrh	r2, [r2, #2]
 800060a:	431a      	orrs	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	601a      	str	r2, [r3, #0]

	//Select Data Frame Size(8bit/16bit)
	SPIx->SPI_CR1 |= SPI_Config->FRAME_SIZE;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	683a      	ldr	r2, [r7, #0]
 8000616:	8892      	ldrh	r2, [r2, #4]
 8000618:	431a      	orrs	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	601a      	str	r2, [r3, #0]

	//Select SPI Communication Mode
	SPIx->SPI_CR1 |= SPI_Config->COMMUNICATION_MODE;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	683a      	ldr	r2, [r7, #0]
 8000624:	88d2      	ldrh	r2, [r2, #6]
 8000626:	431a      	orrs	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	601a      	str	r2, [r3, #0]

	//Select Clock Polarity
	SPIx->SPI_CR1 |= SPI_Config->CLK_POLARITY;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	8912      	ldrh	r2, [r2, #8]
 8000634:	431a      	orrs	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	601a      	str	r2, [r3, #0]

	//Select Clock Phase
	SPIx->SPI_CR1 |= SPI_Config->CLK_PHASE;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	683a      	ldr	r2, [r7, #0]
 8000640:	8952      	ldrh	r2, [r2, #10]
 8000642:	431a      	orrs	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	601a      	str	r2, [r3, #0]

	//Select NSS
	if(SPI_Config->NSS_MANGEMENT == NSS_MANGEMENT_SOFTWARE_SSI_SET || SPI_Config->NSS_MANGEMENT == NSS_MANGEMENT_SOFTWARE_SSI_RESET)
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	899b      	ldrh	r3, [r3, #12]
 800064c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000650:	d004      	beq.n	800065c <MCAL_SPI_Init+0xa8>
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	899b      	ldrh	r3, [r3, #12]
 8000656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800065a:	d107      	bne.n	800066c <MCAL_SPI_Init+0xb8>
		SPIx->SPI_CR1 |= SPI_Config->NSS_MANGEMENT;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	683a      	ldr	r2, [r7, #0]
 8000662:	8992      	ldrh	r2, [r2, #12]
 8000664:	431a      	orrs	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	e006      	b.n	800067a <MCAL_SPI_Init+0xc6>
	else
		SPIx->SPI_CR2 |= SPI_Config->NSS_MANGEMENT;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	683a      	ldr	r2, [r7, #0]
 8000672:	8992      	ldrh	r2, [r2, #12]
 8000674:	431a      	orrs	r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	605a      	str	r2, [r3, #4]

	//Select Clock BAUDRATE for Master only
	if(SPI_Config->SPI_MODE == SPI_MODE_MASTER)
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	881b      	ldrh	r3, [r3, #0]
 800067e:	2b04      	cmp	r3, #4
 8000680:	d106      	bne.n	8000690 <MCAL_SPI_Init+0xdc>
		SPIx->SPI_CR1 |= SPI_Config->BAUDERATE_PRESCALER;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	683a      	ldr	r2, [r7, #0]
 8000688:	89d2      	ldrh	r2, [r2, #14]
 800068a:	431a      	orrs	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	601a      	str	r2, [r3, #0]

	//Enable or Disable IRQ
	if(SPI_Config->IRQ_ENABLE != IRQ_ENABLE_NONE)
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	8a1b      	ldrh	r3, [r3, #16]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d01b      	beq.n	80006d0 <MCAL_SPI_Init+0x11c>
	{
		SPIx->SPI_CR2 |= SPI_Config->IRQ_ENABLE;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	683a      	ldr	r2, [r7, #0]
 800069e:	8a12      	ldrh	r2, [r2, #16]
 80006a0:	431a      	orrs	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	605a      	str	r2, [r3, #4]
		//Enable NVIC IRQ
		if(SPIx == SPI1)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <MCAL_SPI_Init+0x134>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d106      	bne.n	80006bc <MCAL_SPI_Init+0x108>
			NVIC_IRQ35_SPI1_ENABLE;
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MCAL_SPI_Init+0x144>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a11      	ldr	r2, [pc, #68]	; (80006f8 <MCAL_SPI_Init+0x144>)
 80006b4:	f043 0308 	orr.w	r3, r3, #8
 80006b8:	6013      	str	r3, [r2, #0]
 80006ba:	e009      	b.n	80006d0 <MCAL_SPI_Init+0x11c>
		else if(SPIx == SPI2)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4a0d      	ldr	r2, [pc, #52]	; (80006f4 <MCAL_SPI_Init+0x140>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d105      	bne.n	80006d0 <MCAL_SPI_Init+0x11c>
			NVIC_IRQ36_SPI2_ENABLE;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MCAL_SPI_Init+0x144>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a0b      	ldr	r2, [pc, #44]	; (80006f8 <MCAL_SPI_Init+0x144>)
 80006ca:	f043 0310 	orr.w	r3, r3, #16
 80006ce:	6013      	str	r3, [r2, #0]
	}

	//Enable the selected SPI Module
	SPIx->SPI_CR1 |= 1<<6;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	601a      	str	r2, [r3, #0]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40013000 	.word	0x40013000
 80006ec:	40021000 	.word	0x40021000
 80006f0:	2000001c 	.word	0x2000001c
 80006f4:	40003800 	.word	0x40003800
 80006f8:	e000e104 	.word	0xe000e104

080006fc <MCAL_SPI_GPIO_Set_Pins>:
 * Note 			-	Must open clock for AFIO & GPIO After GPIO Initialization
 * 					-	Supported for SPI FULL DUPLEX Master/Slave only & NSS Hardware/Software
 *
 */
void MCAL_SPI_GPIO_Set_Pins(SPI_TypeDef *SPIx)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	GPIO_Pinconfig_t SPI_GPIO_Config;
	//*************************************SPI1***************************************
	if(SPIx == SPI1)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a8a      	ldr	r2, [pc, #552]	; (8000930 <MCAL_SPI_GPIO_Set_Pins+0x234>)
 8000708:	4293      	cmp	r3, r2
 800070a:	f040 8081 	bne.w	8000810 <MCAL_SPI_GPIO_Set_Pins+0x114>
	{
		//===========================MASTER=========================================
		if(Global_SPI_Config[SPI1_INDEX]->SPI_MODE == SPI_MODE_MASTER)
 800070e:	4b89      	ldr	r3, [pc, #548]	; (8000934 <MCAL_SPI_GPIO_Set_Pins+0x238>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	2b04      	cmp	r3, #4
 8000716:	d144      	bne.n	80007a2 <MCAL_SPI_GPIO_Set_Pins+0xa6>
		{
			//================Configure SCK pin====================
			//for Master -->Alternate function push-pull
			SPI_GPIO_Config.PinNumber = GPIO_PIN_5;
 8000718:	2320      	movs	r3, #32
 800071a:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.Mode = GPIO_MODE_Output_AF_PP;
 800071c:	2306      	movs	r3, #6
 800071e:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.Output_speed = GPIO_SPEED_10M;
 8000720:	2301      	movs	r3, #1
 8000722:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	4619      	mov	r1, r3
 800072a:	4883      	ldr	r0, [pc, #524]	; (8000938 <MCAL_SPI_GPIO_Set_Pins+0x23c>)
 800072c:	f7ff fe44 	bl	80003b8 <MCAL_GPIO_Init>

			//================Configure MOSI pin====================
			SPI_GPIO_Config.PinNumber = GPIO_PIN_7;
 8000730:	2380      	movs	r3, #128	; 0x80
 8000732:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.Mode = GPIO_MODE_Output_AF_PP;
 8000734:	2306      	movs	r3, #6
 8000736:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.Output_speed = GPIO_SPEED_10M;
 8000738:	2301      	movs	r3, #1
 800073a:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	4619      	mov	r1, r3
 8000742:	487d      	ldr	r0, [pc, #500]	; (8000938 <MCAL_SPI_GPIO_Set_Pins+0x23c>)
 8000744:	f7ff fe38 	bl	80003b8 <MCAL_GPIO_Init>

			//================Configure MISO pin====================
			SPI_GPIO_Config.PinNumber = GPIO_PIN_6;
 8000748:	2340      	movs	r3, #64	; 0x40
 800074a:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.Mode = GPIO_MODE_Input_FLU;
 800074c:	2301      	movs	r3, #1
 800074e:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	4619      	mov	r1, r3
 8000756:	4878      	ldr	r0, [pc, #480]	; (8000938 <MCAL_SPI_GPIO_Set_Pins+0x23c>)
 8000758:	f7ff fe2e 	bl	80003b8 <MCAL_GPIO_Init>

			//================Configure NSS pin====================
			if(Global_SPI_Config[SPI1_INDEX]->NSS_MANGEMENT == NSS_MANGEMENT_MASTER_HARDWARE_SS_OUTPUT_ENABLED)
 800075c:	4b75      	ldr	r3, [pc, #468]	; (8000934 <MCAL_SPI_GPIO_Set_Pins+0x238>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	899b      	ldrh	r3, [r3, #12]
 8000762:	2b04      	cmp	r3, #4
 8000764:	d10c      	bne.n	8000780 <MCAL_SPI_GPIO_Set_Pins+0x84>
			{
				SPI_GPIO_Config.PinNumber = GPIO_PIN_4;
 8000766:	2310      	movs	r3, #16
 8000768:	81bb      	strh	r3, [r7, #12]
				SPI_GPIO_Config.Mode = GPIO_MODE_Output_AF_PP;		//Alternate function push-pull
 800076a:	2306      	movs	r3, #6
 800076c:	73bb      	strb	r3, [r7, #14]
				SPI_GPIO_Config.Output_speed = GPIO_SPEED_10M;
 800076e:	2301      	movs	r3, #1
 8000770:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	4619      	mov	r1, r3
 8000778:	486f      	ldr	r0, [pc, #444]	; (8000938 <MCAL_SPI_GPIO_Set_Pins+0x23c>)
 800077a:	f7ff fe1d 	bl	80003b8 <MCAL_GPIO_Init>
				SPI_GPIO_Config.Mode = GPIO_MODE_Input_FLU;		//Input Floating
				MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
			}
		}
	}
}
 800077e:	e0d2      	b.n	8000926 <MCAL_SPI_GPIO_Set_Pins+0x22a>
			else if(Global_SPI_Config[SPI1_INDEX]->NSS_MANGEMENT == NSS_MANGEMENT_MASTER_HARDWARE_SS_OUTPUT_DISABLED)
 8000780:	4b6c      	ldr	r3, [pc, #432]	; (8000934 <MCAL_SPI_GPIO_Set_Pins+0x238>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	899b      	ldrh	r3, [r3, #12]
 8000786:	2b00      	cmp	r3, #0
 8000788:	f040 80cd 	bne.w	8000926 <MCAL_SPI_GPIO_Set_Pins+0x22a>
				SPI_GPIO_Config.PinNumber = GPIO_PIN_4;
 800078c:	2310      	movs	r3, #16
 800078e:	81bb      	strh	r3, [r7, #12]
				SPI_GPIO_Config.Mode = GPIO_MODE_Input_FLU;		//Input Floating
 8000790:	2301      	movs	r3, #1
 8000792:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	4619      	mov	r1, r3
 800079a:	4867      	ldr	r0, [pc, #412]	; (8000938 <MCAL_SPI_GPIO_Set_Pins+0x23c>)
 800079c:	f7ff fe0c 	bl	80003b8 <MCAL_GPIO_Init>
}
 80007a0:	e0c1      	b.n	8000926 <MCAL_SPI_GPIO_Set_Pins+0x22a>
		else if (Global_SPI_Config[SPI1_INDEX]->SPI_MODE == SPI_MODE_SLAVE)
 80007a2:	4b64      	ldr	r3, [pc, #400]	; (8000934 <MCAL_SPI_GPIO_Set_Pins+0x238>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	f040 80bc 	bne.w	8000926 <MCAL_SPI_GPIO_Set_Pins+0x22a>
			SPI_GPIO_Config.PinNumber = GPIO_PIN_5;
 80007ae:	2320      	movs	r3, #32
 80007b0:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.Mode = GPIO_MODE_Input_FLU;
 80007b2:	2301      	movs	r3, #1
 80007b4:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	4619      	mov	r1, r3
 80007bc:	485e      	ldr	r0, [pc, #376]	; (8000938 <MCAL_SPI_GPIO_Set_Pins+0x23c>)
 80007be:	f7ff fdfb 	bl	80003b8 <MCAL_GPIO_Init>
			SPI_GPIO_Config.PinNumber = GPIO_PIN_7;
 80007c2:	2380      	movs	r3, #128	; 0x80
 80007c4:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.Mode = GPIO_MODE_Input_FLU;
 80007c6:	2301      	movs	r3, #1
 80007c8:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	4619      	mov	r1, r3
 80007d0:	4859      	ldr	r0, [pc, #356]	; (8000938 <MCAL_SPI_GPIO_Set_Pins+0x23c>)
 80007d2:	f7ff fdf1 	bl	80003b8 <MCAL_GPIO_Init>
			SPI_GPIO_Config.PinNumber = GPIO_PIN_6;
 80007d6:	2340      	movs	r3, #64	; 0x40
 80007d8:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.Mode = GPIO_MODE_Output_AF_PP;
 80007da:	2306      	movs	r3, #6
 80007dc:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.Output_speed = GPIO_SPEED_10M;
 80007de:	2301      	movs	r3, #1
 80007e0:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	4619      	mov	r1, r3
 80007e8:	4853      	ldr	r0, [pc, #332]	; (8000938 <MCAL_SPI_GPIO_Set_Pins+0x23c>)
 80007ea:	f7ff fde5 	bl	80003b8 <MCAL_GPIO_Init>
			if (Global_SPI_Config[SPI1_INDEX]->NSS_MANGEMENT == NSS_MANGEMENT_SLAVE_HARDWARE)
 80007ee:	4b51      	ldr	r3, [pc, #324]	; (8000934 <MCAL_SPI_GPIO_Set_Pins+0x238>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	899b      	ldrh	r3, [r3, #12]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	f040 8096 	bne.w	8000926 <MCAL_SPI_GPIO_Set_Pins+0x22a>
				SPI_GPIO_Config.PinNumber = GPIO_PIN_4;
 80007fa:	2310      	movs	r3, #16
 80007fc:	81bb      	strh	r3, [r7, #12]
				SPI_GPIO_Config.Mode = GPIO_MODE_Input_FLU;		//Input Floating
 80007fe:	2301      	movs	r3, #1
 8000800:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOA, &SPI_GPIO_Config);
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	4619      	mov	r1, r3
 8000808:	484b      	ldr	r0, [pc, #300]	; (8000938 <MCAL_SPI_GPIO_Set_Pins+0x23c>)
 800080a:	f7ff fdd5 	bl	80003b8 <MCAL_GPIO_Init>
}
 800080e:	e08a      	b.n	8000926 <MCAL_SPI_GPIO_Set_Pins+0x22a>
	else if(SPIx == SPI2)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a4a      	ldr	r2, [pc, #296]	; (800093c <MCAL_SPI_GPIO_Set_Pins+0x240>)
 8000814:	4293      	cmp	r3, r2
 8000816:	f040 8086 	bne.w	8000926 <MCAL_SPI_GPIO_Set_Pins+0x22a>
		if(Global_SPI_Config[SPI2_INDEX]->SPI_MODE == SPI_MODE_MASTER)
 800081a:	4b46      	ldr	r3, [pc, #280]	; (8000934 <MCAL_SPI_GPIO_Set_Pins+0x238>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	2b04      	cmp	r3, #4
 8000822:	d148      	bne.n	80008b6 <MCAL_SPI_GPIO_Set_Pins+0x1ba>
			SPI_GPIO_Config.PinNumber = GPIO_PIN_13;
 8000824:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000828:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.Mode = GPIO_MODE_Output_AF_PP;
 800082a:	2306      	movs	r3, #6
 800082c:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.Output_speed = GPIO_SPEED_10M;
 800082e:	2301      	movs	r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	4619      	mov	r1, r3
 8000838:	4841      	ldr	r0, [pc, #260]	; (8000940 <MCAL_SPI_GPIO_Set_Pins+0x244>)
 800083a:	f7ff fdbd 	bl	80003b8 <MCAL_GPIO_Init>
			SPI_GPIO_Config.PinNumber = GPIO_PIN_15;
 800083e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000842:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.Mode = GPIO_MODE_Output_AF_PP;
 8000844:	2306      	movs	r3, #6
 8000846:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.Output_speed = GPIO_SPEED_10M;
 8000848:	2301      	movs	r3, #1
 800084a:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	4619      	mov	r1, r3
 8000852:	483b      	ldr	r0, [pc, #236]	; (8000940 <MCAL_SPI_GPIO_Set_Pins+0x244>)
 8000854:	f7ff fdb0 	bl	80003b8 <MCAL_GPIO_Init>
			SPI_GPIO_Config.PinNumber = GPIO_PIN_14;
 8000858:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800085c:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.Mode = GPIO_MODE_Input_FLU;
 800085e:	2301      	movs	r3, #1
 8000860:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4619      	mov	r1, r3
 8000868:	4835      	ldr	r0, [pc, #212]	; (8000940 <MCAL_SPI_GPIO_Set_Pins+0x244>)
 800086a:	f7ff fda5 	bl	80003b8 <MCAL_GPIO_Init>
			if(Global_SPI_Config[SPI2_INDEX]->NSS_MANGEMENT == NSS_MANGEMENT_MASTER_HARDWARE_SS_OUTPUT_ENABLED)
 800086e:	4b31      	ldr	r3, [pc, #196]	; (8000934 <MCAL_SPI_GPIO_Set_Pins+0x238>)
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	899b      	ldrh	r3, [r3, #12]
 8000874:	2b04      	cmp	r3, #4
 8000876:	d10d      	bne.n	8000894 <MCAL_SPI_GPIO_Set_Pins+0x198>
				SPI_GPIO_Config.PinNumber = GPIO_PIN_12;
 8000878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087c:	81bb      	strh	r3, [r7, #12]
				SPI_GPIO_Config.Mode = GPIO_MODE_Output_AF_PP;		//Alternate function push-pull
 800087e:	2306      	movs	r3, #6
 8000880:	73bb      	strb	r3, [r7, #14]
				SPI_GPIO_Config.Output_speed = GPIO_SPEED_10M;
 8000882:	2301      	movs	r3, #1
 8000884:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	4619      	mov	r1, r3
 800088c:	482c      	ldr	r0, [pc, #176]	; (8000940 <MCAL_SPI_GPIO_Set_Pins+0x244>)
 800088e:	f7ff fd93 	bl	80003b8 <MCAL_GPIO_Init>
}
 8000892:	e048      	b.n	8000926 <MCAL_SPI_GPIO_Set_Pins+0x22a>
			else if(Global_SPI_Config[SPI2_INDEX]->NSS_MANGEMENT == NSS_MANGEMENT_MASTER_HARDWARE_SS_OUTPUT_DISABLED)
 8000894:	4b27      	ldr	r3, [pc, #156]	; (8000934 <MCAL_SPI_GPIO_Set_Pins+0x238>)
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	899b      	ldrh	r3, [r3, #12]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d143      	bne.n	8000926 <MCAL_SPI_GPIO_Set_Pins+0x22a>
				SPI_GPIO_Config.PinNumber = GPIO_PIN_12;
 800089e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a2:	81bb      	strh	r3, [r7, #12]
				SPI_GPIO_Config.Mode = GPIO_MODE_Input_FLU;		//Input Floating
 80008a4:	2301      	movs	r3, #1
 80008a6:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	4619      	mov	r1, r3
 80008ae:	4824      	ldr	r0, [pc, #144]	; (8000940 <MCAL_SPI_GPIO_Set_Pins+0x244>)
 80008b0:	f7ff fd82 	bl	80003b8 <MCAL_GPIO_Init>
}
 80008b4:	e037      	b.n	8000926 <MCAL_SPI_GPIO_Set_Pins+0x22a>
		else if (Global_SPI_Config[SPI2_INDEX]->SPI_MODE == SPI_MODE_SLAVE)
 80008b6:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <MCAL_SPI_GPIO_Set_Pins+0x238>)
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d132      	bne.n	8000926 <MCAL_SPI_GPIO_Set_Pins+0x22a>
			SPI_GPIO_Config.PinNumber = GPIO_PIN_13;
 80008c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c4:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.Mode = GPIO_MODE_Input_FLU;
 80008c6:	2301      	movs	r3, #1
 80008c8:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	4619      	mov	r1, r3
 80008d0:	481b      	ldr	r0, [pc, #108]	; (8000940 <MCAL_SPI_GPIO_Set_Pins+0x244>)
 80008d2:	f7ff fd71 	bl	80003b8 <MCAL_GPIO_Init>
			SPI_GPIO_Config.PinNumber = GPIO_PIN_15;
 80008d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008da:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.Mode = GPIO_MODE_Input_FLU;
 80008dc:	2301      	movs	r3, #1
 80008de:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	4619      	mov	r1, r3
 80008e6:	4816      	ldr	r0, [pc, #88]	; (8000940 <MCAL_SPI_GPIO_Set_Pins+0x244>)
 80008e8:	f7ff fd66 	bl	80003b8 <MCAL_GPIO_Init>
			SPI_GPIO_Config.PinNumber = GPIO_PIN_14;
 80008ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008f0:	81bb      	strh	r3, [r7, #12]
			SPI_GPIO_Config.Mode = GPIO_MODE_Output_AF_PP;
 80008f2:	2306      	movs	r3, #6
 80008f4:	73bb      	strb	r3, [r7, #14]
			SPI_GPIO_Config.Output_speed = GPIO_SPEED_10M;
 80008f6:	2301      	movs	r3, #1
 80008f8:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	4619      	mov	r1, r3
 8000900:	480f      	ldr	r0, [pc, #60]	; (8000940 <MCAL_SPI_GPIO_Set_Pins+0x244>)
 8000902:	f7ff fd59 	bl	80003b8 <MCAL_GPIO_Init>
			if (Global_SPI_Config[SPI2_INDEX]->NSS_MANGEMENT == NSS_MANGEMENT_SLAVE_HARDWARE)
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MCAL_SPI_GPIO_Set_Pins+0x238>)
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	899b      	ldrh	r3, [r3, #12]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d10a      	bne.n	8000926 <MCAL_SPI_GPIO_Set_Pins+0x22a>
				SPI_GPIO_Config.PinNumber = GPIO_PIN_12;
 8000910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000914:	81bb      	strh	r3, [r7, #12]
				SPI_GPIO_Config.Mode = GPIO_MODE_Input_FLU;		//Input Floating
 8000916:	2301      	movs	r3, #1
 8000918:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_Init(GPIOB, &SPI_GPIO_Config);
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	4619      	mov	r1, r3
 8000920:	4807      	ldr	r0, [pc, #28]	; (8000940 <MCAL_SPI_GPIO_Set_Pins+0x244>)
 8000922:	f7ff fd49 	bl	80003b8 <MCAL_GPIO_Init>
}
 8000926:	bf00      	nop
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40013000 	.word	0x40013000
 8000934:	2000001c 	.word	0x2000001c
 8000938:	40010800 	.word	0x40010800
 800093c:	40003800 	.word	0x40003800
 8000940:	40010c00 	.word	0x40010c00

08000944 <MCAL_SPI_TX_RX>:
 * @retval 			-	none
 * Note 			-	none
 *
 */
void MCAL_SPI_TX_RX(SPI_TypeDef * SPIx, uint16_t *pTxBuffer, enum Polling_Mechanism Polling_En)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	4613      	mov	r3, r2
 8000950:	71fb      	strb	r3, [r7, #7]
	if(Polling_En == Polling_enable)
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d106      	bne.n	8000966 <MCAL_SPI_TX_RX+0x22>
	{
		//Wait for Transmit Buffer to be Empty
		while(! (SPIx->SPI_SR & SPI_SR_TXE));
 8000958:	bf00      	nop
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	2b00      	cmp	r3, #0
 8000964:	d0f9      	beq.n	800095a <MCAL_SPI_TX_RX+0x16>
	}
	//send data
	SPIx->SPI_DR = *(pTxBuffer);
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	60da      	str	r2, [r3, #12]

	if(Polling_En == Polling_enable)
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d106      	bne.n	8000984 <MCAL_SPI_TX_RX+0x40>
	{
		//Wait for Receive buffer not empty flag
		while(! (SPIx->SPI_SR & SPI_SR_RXNE));
 8000976:	bf00      	nop
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	2b00      	cmp	r3, #0
 8000982:	d0f9      	beq.n	8000978 <MCAL_SPI_TX_RX+0x34>
	}
	//Receive Data
	*(pTxBuffer) = SPIx->SPI_DR;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	b29a      	uxth	r2, r3
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	801a      	strh	r2, [r3, #0]
}
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <SPI1_IRQHandler>:
 *=======================================================================
 *
*/

void SPI1_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
	struct S_IRQ_Src irq;
	irq.TXE = ((SPI1->SPI_SR & (1<<1)) >> 1);
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <SPI1_IRQHandler+0x54>)
 80009a0:	689b      	ldr	r3, [r3, #8]
 80009a2:	085b      	lsrs	r3, r3, #1
 80009a4:	f003 0301 	and.w	r3, r3, #1
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	793b      	ldrb	r3, [r7, #4]
 80009ac:	f362 0300 	bfi	r3, r2, #0, #1
 80009b0:	713b      	strb	r3, [r7, #4]
	irq.RXNE = ((SPI1->SPI_SR & (1<<0)) >> 0);
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <SPI1_IRQHandler+0x54>)
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	793b      	ldrb	r3, [r7, #4]
 80009be:	f362 0341 	bfi	r3, r2, #1, #1
 80009c2:	713b      	strb	r3, [r7, #4]
	irq.ERRI = ((SPI1->SPI_SR & (1<<4)) >> 4);
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <SPI1_IRQHandler+0x54>)
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	091b      	lsrs	r3, r3, #4
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	793b      	ldrb	r3, [r7, #4]
 80009d2:	f362 0382 	bfi	r3, r2, #2, #1
 80009d6:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq);
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <SPI1_IRQHandler+0x58>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	7938      	ldrb	r0, [r7, #4]
 80009e0:	4798      	blx	r3
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40013000 	.word	0x40013000
 80009f0:	2000001c 	.word	0x2000001c

080009f4 <SPI2_IRQHandler>:


void SPI2_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
	struct S_IRQ_Src irq;
	irq.TXE = ((SPI2->SPI_SR & (1<<1)) >> 1);
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <SPI2_IRQHandler+0x54>)
 80009fc:	689b      	ldr	r3, [r3, #8]
 80009fe:	085b      	lsrs	r3, r3, #1
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	793b      	ldrb	r3, [r7, #4]
 8000a08:	f362 0300 	bfi	r3, r2, #0, #1
 8000a0c:	713b      	strb	r3, [r7, #4]
	irq.RXNE = ((SPI2->SPI_SR & (1<<0)) >> 0);
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <SPI2_IRQHandler+0x54>)
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	793b      	ldrb	r3, [r7, #4]
 8000a1a:	f362 0341 	bfi	r3, r2, #1, #1
 8000a1e:	713b      	strb	r3, [r7, #4]
	irq.ERRI = ((SPI2->SPI_SR & (1<<4)) >> 4);
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <SPI2_IRQHandler+0x54>)
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	091b      	lsrs	r3, r3, #4
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	793b      	ldrb	r3, [r7, #4]
 8000a2e:	f362 0382 	bfi	r3, r2, #2, #1
 8000a32:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq);
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <SPI2_IRQHandler+0x58>)
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	7938      	ldrb	r0, [r7, #4]
 8000a3c:	4798      	blx	r3
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40003800 	.word	0x40003800
 8000a4c:	2000001c 	.word	0x2000001c

08000a50 <MCAL_UART_Init>:
 * @retval 			-	none
 * Note 			-	Supported for Asynchronous Mode & Clock = 8 MHz
 *
 */
void MCAL_UART_Init(USART_TypeDef *USARTx, USART_CONFIG_t * UART_config)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
	Global_UART_config = UART_config;
 8000a5a:	4a59      	ldr	r2, [pc, #356]	; (8000bc0 <MCAL_UART_Init+0x170>)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	6013      	str	r3, [r2, #0]
	//Enable clock for given USART peripheral
	if(USARTx == USART1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a58      	ldr	r2, [pc, #352]	; (8000bc4 <MCAL_UART_Init+0x174>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d106      	bne.n	8000a76 <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN();
 8000a68:	4b57      	ldr	r3, [pc, #348]	; (8000bc8 <MCAL_UART_Init+0x178>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a56      	ldr	r2, [pc, #344]	; (8000bc8 <MCAL_UART_Init+0x178>)
 8000a6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a72:	6193      	str	r3, [r2, #24]
 8000a74:	e014      	b.n	8000aa0 <MCAL_UART_Init+0x50>
	else if(USARTx == USART2)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a54      	ldr	r2, [pc, #336]	; (8000bcc <MCAL_UART_Init+0x17c>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d106      	bne.n	8000a8c <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_EN();
 8000a7e:	4b52      	ldr	r3, [pc, #328]	; (8000bc8 <MCAL_UART_Init+0x178>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	4a51      	ldr	r2, [pc, #324]	; (8000bc8 <MCAL_UART_Init+0x178>)
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a88:	61d3      	str	r3, [r2, #28]
 8000a8a:	e009      	b.n	8000aa0 <MCAL_UART_Init+0x50>
	else if(USARTx == USART3)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a50      	ldr	r2, [pc, #320]	; (8000bd0 <MCAL_UART_Init+0x180>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d105      	bne.n	8000aa0 <MCAL_UART_Init+0x50>
		RCC_USART3_CLK_EN();
 8000a94:	4b4c      	ldr	r3, [pc, #304]	; (8000bc8 <MCAL_UART_Init+0x178>)
 8000a96:	69db      	ldr	r3, [r3, #28]
 8000a98:	4a4b      	ldr	r2, [pc, #300]	; (8000bc8 <MCAL_UART_Init+0x178>)
 8000a9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a9e:	61d3      	str	r3, [r2, #28]

	//1-Enable USART MODULE
	//Bit 13 UE: USART enable
	USARTx->CR1 |= 1<<13;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	60da      	str	r2, [r3, #12]

	//2-select UART MODE
	//Bit 3 TE: Transmitter enable, Bit 2 RE: Receiver enable
	USARTx->CR1 |= UART_config->USART_Mode;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	683a      	ldr	r2, [r7, #0]
 8000ab2:	7812      	ldrb	r2, [r2, #0]
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	60da      	str	r2, [r3, #12]

	//3-set baud rate value
	uint32_t Pclk, BRR;
	if(USARTx == USART1)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a41      	ldr	r2, [pc, #260]	; (8000bc4 <MCAL_UART_Init+0x174>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d103      	bne.n	8000aca <MCAL_UART_Init+0x7a>
		Pclk = MCAL_RCC_getPCLK2Freq();
 8000ac2:	f7ff fd31 	bl	8000528 <MCAL_RCC_getPCLK2Freq>
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	e002      	b.n	8000ad0 <MCAL_UART_Init+0x80>
	else
		Pclk = MCAL_RCC_getPCLK1Freq();
 8000aca:	f7ff fd19 	bl	8000500 <MCAL_RCC_getPCLK1Freq>
 8000ace:	60f8      	str	r0, [r7, #12]

	BRR = UART_BRR_Register(Pclk,UART_config->BaudRate_Speed);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	011b      	lsls	r3, r3, #4
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000adc:	0119      	lsls	r1, r3, #4
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	4413      	add	r3, r2
 8000ae6:	009a      	lsls	r2, r3, #2
 8000ae8:	441a      	add	r2, r3
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	fbb2 f2f3 	udiv	r2, r2, r3
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	011b      	lsls	r3, r3, #4
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b00:	2064      	movs	r0, #100	; 0x64
 8000b02:	fb00 f303 	mul.w	r3, r0, r3
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	011b      	lsls	r3, r3, #4
 8000b0a:	4a32      	ldr	r2, [pc, #200]	; (8000bd4 <MCAL_UART_Init+0x184>)
 8000b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b10:	095b      	lsrs	r3, r3, #5
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	430b      	orrs	r3, r1
 8000b18:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	68ba      	ldr	r2, [r7, #8]
 8000b1e:	609a      	str	r2, [r3, #8]

	//4-set data size
	//Bit 12 M: Word length
	USARTx->CR1 |= UART_config->PayLoad_Data;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	8912      	ldrh	r2, [r2, #8]
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	60da      	str	r2, [r3, #12]

	//5-set no of stop bits
	//Bits 13:12 STOP: STOP bits
	USARTx->CR2 |= UART_config->Stop_bits;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	691b      	ldr	r3, [r3, #16]
 8000b32:	683a      	ldr	r2, [r7, #0]
 8000b34:	8952      	ldrh	r2, [r2, #10]
 8000b36:	431a      	orrs	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	611a      	str	r2, [r3, #16]

	//6-set parity
	//Bit 9 PS: Parity selection, Bit 10 PCE: Parity control enable
	USARTx->CR1 |= UART_config->Parity;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	683a      	ldr	r2, [r7, #0]
 8000b42:	8992      	ldrh	r2, [r2, #12]
 8000b44:	431a      	orrs	r2, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	60da      	str	r2, [r3, #12]

	//7-set HardWare flow CTRL
	USARTx->CR3 |= UART_config->FLOW_CTRL;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	683a      	ldr	r2, [r7, #0]
 8000b50:	89d2      	ldrh	r2, [r2, #14]
 8000b52:	431a      	orrs	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	615a      	str	r2, [r3, #20]

	//8-Enable/Disable IRQ
	if(UART_config->IRQ_ENABLE != UART_IRQ_ENABLE_NONE)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	8a1b      	ldrh	r3, [r3, #16]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d026      	beq.n	8000bae <MCAL_UART_Init+0x15e>
	{
		USARTx->CR1 |= UART_config->IRQ_ENABLE;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	8a12      	ldrh	r2, [r2, #16]
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	60da      	str	r2, [r3, #12]
		//ENABLE NVIC for USARTx IRQ
		if(USARTx == USART1)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <MCAL_UART_Init+0x174>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d106      	bne.n	8000b84 <MCAL_UART_Init+0x134>
			NVIC_IRQ37_USART1_ENABLE;
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <MCAL_UART_Init+0x188>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <MCAL_UART_Init+0x188>)
 8000b7c:	f043 0320 	orr.w	r3, r3, #32
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	e014      	b.n	8000bae <MCAL_UART_Init+0x15e>
		else if(USARTx == USART2)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <MCAL_UART_Init+0x17c>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d106      	bne.n	8000b9a <MCAL_UART_Init+0x14a>
			NVIC_IRQ38_USART2_ENABLE;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MCAL_UART_Init+0x188>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a11      	ldr	r2, [pc, #68]	; (8000bd8 <MCAL_UART_Init+0x188>)
 8000b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	e009      	b.n	8000bae <MCAL_UART_Init+0x15e>
		else if(USARTx == USART3)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a0c      	ldr	r2, [pc, #48]	; (8000bd0 <MCAL_UART_Init+0x180>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d105      	bne.n	8000bae <MCAL_UART_Init+0x15e>
			NVIC_IRQ39_USART3_ENABLE;
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <MCAL_UART_Init+0x188>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a0c      	ldr	r2, [pc, #48]	; (8000bd8 <MCAL_UART_Init+0x188>)
 8000ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bac:	6013      	str	r3, [r2, #0]
	}

	//9-set IRQ CallBack Function
	GP_IRQ_CallBack = UART_config->P_IRQ_CallBack;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <MCAL_UART_Init+0x18c>)
 8000bb4:	6013      	str	r3, [r2, #0]
}
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000024 	.word	0x20000024
 8000bc4:	40013800 	.word	0x40013800
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40004400 	.word	0x40004400
 8000bd0:	40004800 	.word	0x40004800
 8000bd4:	51eb851f 	.word	0x51eb851f
 8000bd8:	e000e104 	.word	0xe000e104
 8000bdc:	2000002c 	.word	0x2000002c

08000be0 <MCAL_UART_GPIO_Set_Pins>:
 * @retval 			-	none
 * Note 			-	Must open clock for AFIO & GPIO After GPIO Initialization
 *
 */
void MCAL_UART_GPIO_Set_Pins(USART_TypeDef *USARTx)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	GPIO_Pinconfig_t pin_cfg;
	if(USARTx == USART1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a5a      	ldr	r2, [pc, #360]	; (8000d54 <MCAL_UART_GPIO_Set_Pins+0x174>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d148      	bne.n	8000c82 <MCAL_UART_GPIO_Set_Pins+0xa2>
	{
		//TX pin at PA9
		pin_cfg.PinNumber = GPIO_PIN_9;
 8000bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf4:	81bb      	strh	r3, [r7, #12]
		pin_cfg.Mode = GPIO_MODE_Output_AF_PP;
 8000bf6:	2306      	movs	r3, #6
 8000bf8:	73bb      	strb	r3, [r7, #14]
		pin_cfg.Output_speed = GPIO_SPEED_10M;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pin_cfg);
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	4619      	mov	r1, r3
 8000c04:	4854      	ldr	r0, [pc, #336]	; (8000d58 <MCAL_UART_GPIO_Set_Pins+0x178>)
 8000c06:	f7ff fbd7 	bl	80003b8 <MCAL_GPIO_Init>
		//RX pin at PA10
		pin_cfg.PinNumber = GPIO_PIN_10;
 8000c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0e:	81bb      	strh	r3, [r7, #12]
		pin_cfg.Mode = GPIO_MODE_Input_FLU;
 8000c10:	2301      	movs	r3, #1
 8000c12:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pin_cfg);
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	4619      	mov	r1, r3
 8000c1a:	484f      	ldr	r0, [pc, #316]	; (8000d58 <MCAL_UART_GPIO_Set_Pins+0x178>)
 8000c1c:	f7ff fbcc 	bl	80003b8 <MCAL_GPIO_Init>
		//Check for Flow Control when Enabled
		if(Global_UART_config->FLOW_CTRL == UART_FLOWCTRL_CTS || Global_UART_config->FLOW_CTRL == UART_FLOWCTRL_CTS_RTS)
 8000c20:	4b4e      	ldr	r3, [pc, #312]	; (8000d5c <MCAL_UART_GPIO_Set_Pins+0x17c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	89db      	ldrh	r3, [r3, #14]
 8000c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c2a:	d005      	beq.n	8000c38 <MCAL_UART_GPIO_Set_Pins+0x58>
 8000c2c:	4b4b      	ldr	r3, [pc, #300]	; (8000d5c <MCAL_UART_GPIO_Set_Pins+0x17c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	89db      	ldrh	r3, [r3, #14]
 8000c32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000c36:	d10a      	bne.n	8000c4e <MCAL_UART_GPIO_Set_Pins+0x6e>
		{
			//CTS at Pin PA11
			pin_cfg.PinNumber = GPIO_PIN_11;
 8000c38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c3c:	81bb      	strh	r3, [r7, #12]
			pin_cfg.Mode = GPIO_MODE_Input_FLU;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &pin_cfg);
 8000c42:	f107 030c 	add.w	r3, r7, #12
 8000c46:	4619      	mov	r1, r3
 8000c48:	4843      	ldr	r0, [pc, #268]	; (8000d58 <MCAL_UART_GPIO_Set_Pins+0x178>)
 8000c4a:	f7ff fbb5 	bl	80003b8 <MCAL_GPIO_Init>
		}
		if(Global_UART_config->FLOW_CTRL == UART_FLOWCTRL_RTS || Global_UART_config->FLOW_CTRL == UART_FLOWCTRL_CTS_RTS)
 8000c4e:	4b43      	ldr	r3, [pc, #268]	; (8000d5c <MCAL_UART_GPIO_Set_Pins+0x17c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	89db      	ldrh	r3, [r3, #14]
 8000c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c58:	d005      	beq.n	8000c66 <MCAL_UART_GPIO_Set_Pins+0x86>
 8000c5a:	4b40      	ldr	r3, [pc, #256]	; (8000d5c <MCAL_UART_GPIO_Set_Pins+0x17c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	89db      	ldrh	r3, [r3, #14]
 8000c60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000c64:	d172      	bne.n	8000d4c <MCAL_UART_GPIO_Set_Pins+0x16c>
		{
			//RTS at Pin PA12
			pin_cfg.PinNumber = GPIO_PIN_12;
 8000c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c6a:	81bb      	strh	r3, [r7, #12]
			pin_cfg.Mode = GPIO_MODE_Output_AF_PP;
 8000c6c:	2306      	movs	r3, #6
 8000c6e:	73bb      	strb	r3, [r7, #14]
			pin_cfg.Output_speed = GPIO_SPEED_10M;
 8000c70:	2301      	movs	r3, #1
 8000c72:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &pin_cfg);
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4837      	ldr	r0, [pc, #220]	; (8000d58 <MCAL_UART_GPIO_Set_Pins+0x178>)
 8000c7c:	f7ff fb9c 	bl	80003b8 <MCAL_GPIO_Init>
			pin_cfg.Mode = GPIO_MODE_Output_AF_PP;
			pin_cfg.Output_speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &pin_cfg);
		}
	}
}
 8000c80:	e064      	b.n	8000d4c <MCAL_UART_GPIO_Set_Pins+0x16c>
	else if(USARTx == USART2)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a36      	ldr	r2, [pc, #216]	; (8000d60 <MCAL_UART_GPIO_Set_Pins+0x180>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d12c      	bne.n	8000ce4 <MCAL_UART_GPIO_Set_Pins+0x104>
		pin_cfg.PinNumber = GPIO_PIN_2;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	81bb      	strh	r3, [r7, #12]
		pin_cfg.Mode = GPIO_MODE_Output_AF_PP;
 8000c8e:	2306      	movs	r3, #6
 8000c90:	73bb      	strb	r3, [r7, #14]
		pin_cfg.Output_speed = GPIO_SPEED_10M;
 8000c92:	2301      	movs	r3, #1
 8000c94:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pin_cfg);
 8000c96:	f107 030c 	add.w	r3, r7, #12
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	482e      	ldr	r0, [pc, #184]	; (8000d58 <MCAL_UART_GPIO_Set_Pins+0x178>)
 8000c9e:	f7ff fb8b 	bl	80003b8 <MCAL_GPIO_Init>
		pin_cfg.PinNumber = GPIO_PIN_3;
 8000ca2:	2308      	movs	r3, #8
 8000ca4:	81bb      	strh	r3, [r7, #12]
		pin_cfg.Mode = GPIO_MODE_Input_FLU;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pin_cfg);
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4829      	ldr	r0, [pc, #164]	; (8000d58 <MCAL_UART_GPIO_Set_Pins+0x178>)
 8000cb2:	f7ff fb81 	bl	80003b8 <MCAL_GPIO_Init>
			pin_cfg.PinNumber = GPIO_PIN_0;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	81bb      	strh	r3, [r7, #12]
			pin_cfg.Mode = GPIO_MODE_Input_FLU;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &pin_cfg);
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4824      	ldr	r0, [pc, #144]	; (8000d58 <MCAL_UART_GPIO_Set_Pins+0x178>)
 8000cc6:	f7ff fb77 	bl	80003b8 <MCAL_GPIO_Init>
			pin_cfg.PinNumber = GPIO_PIN_1;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	81bb      	strh	r3, [r7, #12]
			pin_cfg.Mode = GPIO_MODE_Output_AF_PP;
 8000cce:	2306      	movs	r3, #6
 8000cd0:	73bb      	strb	r3, [r7, #14]
			pin_cfg.Output_speed = GPIO_SPEED_10M;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOA, &pin_cfg);
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	4619      	mov	r1, r3
 8000cdc:	481e      	ldr	r0, [pc, #120]	; (8000d58 <MCAL_UART_GPIO_Set_Pins+0x178>)
 8000cde:	f7ff fb6b 	bl	80003b8 <MCAL_GPIO_Init>
}
 8000ce2:	e033      	b.n	8000d4c <MCAL_UART_GPIO_Set_Pins+0x16c>
	else if(USARTx == USART3)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a1f      	ldr	r2, [pc, #124]	; (8000d64 <MCAL_UART_GPIO_Set_Pins+0x184>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d12f      	bne.n	8000d4c <MCAL_UART_GPIO_Set_Pins+0x16c>
		pin_cfg.PinNumber = GPIO_PIN_10;
 8000cec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf0:	81bb      	strh	r3, [r7, #12]
		pin_cfg.Mode = GPIO_MODE_Output_AF_PP;
 8000cf2:	2306      	movs	r3, #6
 8000cf4:	73bb      	strb	r3, [r7, #14]
		pin_cfg.Output_speed = GPIO_SPEED_10M;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &pin_cfg);
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4819      	ldr	r0, [pc, #100]	; (8000d68 <MCAL_UART_GPIO_Set_Pins+0x188>)
 8000d02:	f7ff fb59 	bl	80003b8 <MCAL_GPIO_Init>
		pin_cfg.PinNumber = GPIO_PIN_11;
 8000d06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d0a:	81bb      	strh	r3, [r7, #12]
		pin_cfg.Mode = GPIO_MODE_Input_FLU;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &pin_cfg);
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	4619      	mov	r1, r3
 8000d16:	4814      	ldr	r0, [pc, #80]	; (8000d68 <MCAL_UART_GPIO_Set_Pins+0x188>)
 8000d18:	f7ff fb4e 	bl	80003b8 <MCAL_GPIO_Init>
			pin_cfg.PinNumber = GPIO_PIN_13;
 8000d1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d20:	81bb      	strh	r3, [r7, #12]
			pin_cfg.Mode = GPIO_MODE_Input_FLU;
 8000d22:	2301      	movs	r3, #1
 8000d24:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &pin_cfg);
 8000d26:	f107 030c 	add.w	r3, r7, #12
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480e      	ldr	r0, [pc, #56]	; (8000d68 <MCAL_UART_GPIO_Set_Pins+0x188>)
 8000d2e:	f7ff fb43 	bl	80003b8 <MCAL_GPIO_Init>
			pin_cfg.PinNumber = GPIO_PIN_14;
 8000d32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d36:	81bb      	strh	r3, [r7, #12]
			pin_cfg.Mode = GPIO_MODE_Output_AF_PP;
 8000d38:	2306      	movs	r3, #6
 8000d3a:	73bb      	strb	r3, [r7, #14]
			pin_cfg.Output_speed = GPIO_SPEED_10M;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(GPIOB, &pin_cfg);
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	4619      	mov	r1, r3
 8000d46:	4808      	ldr	r0, [pc, #32]	; (8000d68 <MCAL_UART_GPIO_Set_Pins+0x188>)
 8000d48:	f7ff fb36 	bl	80003b8 <MCAL_GPIO_Init>
}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40013800 	.word	0x40013800
 8000d58:	40010800 	.word	0x40010800
 8000d5c:	20000024 	.word	0x20000024
 8000d60:	40004400 	.word	0x40004400
 8000d64:	40004800 	.word	0x40004800
 8000d68:	40010c00 	.word	0x40010c00

08000d6c <MCAL_UART_SendData>:
 * @retval 			-	none
 * Note 			-	none
 *
 */
void MCAL_UART_SendData(USART_TypeDef *USARTx, uint16_t *TxBuffer, enum Polling_mechanism PollingEN)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	4613      	mov	r3, r2
 8000d78:	71fb      	strb	r3, [r7, #7]
	if(PollingEN == enable)
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d106      	bne.n	8000d8e <MCAL_UART_SendData+0x22>
	{
		//wait for transmit data register to be empty
		while(!(USARTx->SR & 1<<7));
 8000d80:	bf00      	nop
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0f9      	beq.n	8000d82 <MCAL_UART_SendData+0x16>
//	the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
//	because it is replaced by the parity.
//	When receiving with the parity enabled, the value read in the MSB bit is the received parity
//	bit
	//check data transmitted is 9BIT OR 8BIT
	if(Global_UART_config->PayLoad_Data == UART_PAYLOAD_DATA_9BIT)
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MCAL_UART_SendData+0x5c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	891b      	ldrh	r3, [r3, #8]
 8000d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d98:	d106      	bne.n	8000da8 <MCAL_UART_SendData+0x3c>
	{
		USARTx->DR = (*((uint16_t *)TxBuffer) & (uint16_t)0x01ff);
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	605a      	str	r2, [r3, #4]
	}
	else if(Global_UART_config->PayLoad_Data == UART_PAYLOAD_DATA_8BIT)
	{
		USARTx->DR = (*((uint16_t *)TxBuffer) & (uint8_t)0xff);
	}
}
 8000da6:	e009      	b.n	8000dbc <MCAL_UART_SendData+0x50>
	else if(Global_UART_config->PayLoad_Data == UART_PAYLOAD_DATA_8BIT)
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <MCAL_UART_SendData+0x5c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	891b      	ldrh	r3, [r3, #8]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d104      	bne.n	8000dbc <MCAL_UART_SendData+0x50>
		USARTx->DR = (*((uint16_t *)TxBuffer) & (uint8_t)0xff);
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	605a      	str	r2, [r3, #4]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000024 	.word	0x20000024

08000dcc <MCAL_UART_ReceiveData>:
 * @retval 			-	none
 * Note 			-	none
 *
 */
void MCAL_UART_ReceiveData(USART_TypeDef *USARTx, uint16_t *RxBuffer, enum Polling_mechanism PollingEN)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	71fb      	strb	r3, [r7, #7]
	if(PollingEN == enable)
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d106      	bne.n	8000dee <MCAL_UART_ReceiveData+0x22>
	{
		//wait for Received data to be ready for read
		while(!(USARTx->SR & 1<<5));
 8000de0:	bf00      	nop
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0320 	and.w	r3, r3, #32
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f9      	beq.n	8000de2 <MCAL_UART_ReceiveData+0x16>
	}
	//check data Received is 9BIT OR 8BIT
	//9 BIT Received Data
	if(Global_UART_config->PayLoad_Data == UART_PAYLOAD_DATA_9BIT)
 8000dee:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <MCAL_UART_ReceiveData+0x94>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	891b      	ldrh	r3, [r3, #8]
 8000df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000df8:	d112      	bne.n	8000e20 <MCAL_UART_ReceiveData+0x54>
	{
		if(Global_UART_config->Parity == UART_PARITY_DISABLE)
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <MCAL_UART_ReceiveData+0x94>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	899b      	ldrh	r3, [r3, #12]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d105      	bne.n	8000e10 <MCAL_UART_ReceiveData+0x44>
		{
			*((uint16_t *)RxBuffer) = USARTx->DR;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	b29a      	uxth	r2, r3
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	801a      	strh	r2, [r3, #0]
		{
			*((uint16_t *)RxBuffer) = (USARTx->DR & (uint8_t)0x7f);
		}

	}
}
 8000e0e:	e021      	b.n	8000e54 <MCAL_UART_ReceiveData+0x88>
			*((uint16_t *)RxBuffer) = (USARTx->DR & (uint8_t)0xff);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	801a      	strh	r2, [r3, #0]
}
 8000e1e:	e019      	b.n	8000e54 <MCAL_UART_ReceiveData+0x88>
	else if(Global_UART_config->PayLoad_Data == UART_PAYLOAD_DATA_8BIT)
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MCAL_UART_ReceiveData+0x94>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	891b      	ldrh	r3, [r3, #8]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d114      	bne.n	8000e54 <MCAL_UART_ReceiveData+0x88>
		if(Global_UART_config->Parity == UART_PARITY_DISABLE)
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <MCAL_UART_ReceiveData+0x94>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	899b      	ldrh	r3, [r3, #12]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d107      	bne.n	8000e44 <MCAL_UART_ReceiveData+0x78>
			*((uint16_t *)RxBuffer) = (USARTx->DR & (uint8_t)0xff);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	801a      	strh	r2, [r3, #0]
}
 8000e42:	e007      	b.n	8000e54 <MCAL_UART_ReceiveData+0x88>
			*((uint16_t *)RxBuffer) = (USARTx->DR & (uint8_t)0x7f);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	801a      	strh	r2, [r3, #0]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000024 	.word	0x20000024

08000e64 <USART1_IRQHandler>:
 *=======================================================================
 *
*/

void USART1_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	GP_IRQ_CallBack();
 8000e68:	4b02      	ldr	r3, [pc, #8]	; (8000e74 <USART1_IRQHandler+0x10>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4798      	blx	r3
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000002c 	.word	0x2000002c

08000e78 <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	GP_IRQ_CallBack();
 8000e7c:	4b02      	ldr	r3, [pc, #8]	; (8000e88 <USART2_IRQHandler+0x10>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4798      	blx	r3
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	2000002c 	.word	0x2000002c

08000e8c <USART3_IRQHandler>:


void USART3_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	GP_IRQ_CallBack();
 8000e90:	4b02      	ldr	r3, [pc, #8]	; (8000e9c <USART3_IRQHandler+0x10>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4798      	blx	r3
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2000002c 	.word	0x2000002c

08000ea0 <__libc_init_array>:
 8000ea0:	b570      	push	{r4, r5, r6, lr}
 8000ea2:	2500      	movs	r5, #0
 8000ea4:	4e0c      	ldr	r6, [pc, #48]	; (8000ed8 <__libc_init_array+0x38>)
 8000ea6:	4c0d      	ldr	r4, [pc, #52]	; (8000edc <__libc_init_array+0x3c>)
 8000ea8:	1ba4      	subs	r4, r4, r6
 8000eaa:	10a4      	asrs	r4, r4, #2
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	d109      	bne.n	8000ec4 <__libc_init_array+0x24>
 8000eb0:	f000 f81a 	bl	8000ee8 <_init>
 8000eb4:	2500      	movs	r5, #0
 8000eb6:	4e0a      	ldr	r6, [pc, #40]	; (8000ee0 <__libc_init_array+0x40>)
 8000eb8:	4c0a      	ldr	r4, [pc, #40]	; (8000ee4 <__libc_init_array+0x44>)
 8000eba:	1ba4      	subs	r4, r4, r6
 8000ebc:	10a4      	asrs	r4, r4, #2
 8000ebe:	42a5      	cmp	r5, r4
 8000ec0:	d105      	bne.n	8000ece <__libc_init_array+0x2e>
 8000ec2:	bd70      	pop	{r4, r5, r6, pc}
 8000ec4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ec8:	4798      	blx	r3
 8000eca:	3501      	adds	r5, #1
 8000ecc:	e7ee      	b.n	8000eac <__libc_init_array+0xc>
 8000ece:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ed2:	4798      	blx	r3
 8000ed4:	3501      	adds	r5, #1
 8000ed6:	e7f2      	b.n	8000ebe <__libc_init_array+0x1e>
 8000ed8:	08000f18 	.word	0x08000f18
 8000edc:	08000f18 	.word	0x08000f18
 8000ee0:	08000f18 	.word	0x08000f18
 8000ee4:	08000f1c 	.word	0x08000f1c

08000ee8 <_init>:
 8000ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eea:	bf00      	nop
 8000eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eee:	bc08      	pop	{r3}
 8000ef0:	469e      	mov	lr, r3
 8000ef2:	4770      	bx	lr

08000ef4 <_fini>:
 8000ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef6:	bf00      	nop
 8000ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000efa:	bc08      	pop	{r3}
 8000efc:	469e      	mov	lr, r3
 8000efe:	4770      	bx	lr
