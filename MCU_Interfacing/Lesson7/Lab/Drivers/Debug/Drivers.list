
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ca0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000dd0  08000dd0  00010dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000df0  08000df0  00010df8  2**0
                  CONTENTS
  4 .ARM          00000000  08000df0  08000df0  00010df8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000df0  08000df8  00010df8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000df0  08000df0  00010df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000df4  08000df4  00010df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010df8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000000  08000df8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08000df8  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010df8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005f55  00000000  00000000  00010e21  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000e4f  00000000  00000000  00016d76  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000fe6  00000000  00000000  00017bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000268  00000000  00000000  00018bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001f0  00000000  00000000  00018e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002783  00000000  00000000  00019008  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002f45  00000000  00000000  0001b78b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009ca6  00000000  00000000  0001e6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00028376  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000007f0  00000000  00000000  000283f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000db8 	.word	0x08000db8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000db8 	.word	0x08000db8

08000170 <EEPROM_Init>:
#include "I2C_Slave_EEPROM.h"



void EEPROM_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b08a      	sub	sp, #40	; 0x28
 8000174:	af00      	add	r7, sp, #0
	//SCL -------> PB6
	//SDA -------> PB7

	//I2C Controller act as a master
	I2C_Config_t I2C_cfg;
	I2C_cfg.I2C_Mode = I2C_Mode_I2C_MODE;
 8000176:	2300      	movs	r3, #0
 8000178:	613b      	str	r3, [r7, #16]
	I2C_cfg.clock_stretching = clock_stretching_Enable;
 800017a:	2300      	movs	r3, #0
 800017c:	607b      	str	r3, [r7, #4]
	I2C_cfg.General_Call = General_Call_Enable;
 800017e:	2340      	movs	r3, #64	; 0x40
 8000180:	60bb      	str	r3, [r7, #8]
	I2C_cfg.I2C_Master_Mode = I2C_Master_Mode_SM;
 8000182:	2300      	movs	r3, #0
 8000184:	60fb      	str	r3, [r7, #12]
	I2C_cfg.clock_speed = CLOCK_SPEED_100KHZ;
 8000186:	4b08      	ldr	r3, [pc, #32]	; (80001a8 <EEPROM_Init+0x38>)
 8000188:	603b      	str	r3, [r7, #0]
	I2C_cfg.I2C_ACK_Control = I2C_ACK_Control_Enable;
 800018a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800018e:	617b      	str	r3, [r7, #20]
	MCAL_I2C_Init(I2C1, &I2C_cfg);
 8000190:	463b      	mov	r3, r7
 8000192:	4619      	mov	r1, r3
 8000194:	4805      	ldr	r0, [pc, #20]	; (80001ac <EEPROM_Init+0x3c>)
 8000196:	f000 f9ef 	bl	8000578 <MCAL_I2C_Init>
	MCAL_I2C_GPIO_Set_Pins(I2C1);
 800019a:	4804      	ldr	r0, [pc, #16]	; (80001ac <EEPROM_Init+0x3c>)
 800019c:	f000 fa74 	bl	8000688 <MCAL_I2C_GPIO_Set_Pins>
}
 80001a0:	bf00      	nop
 80001a2:	3728      	adds	r7, #40	; 0x28
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	000186a0 	.word	0x000186a0
 80001ac:	40005400 	.word	0x40005400

080001b0 <EEPROM_write_NBytes>:



uint8_t EEPROM_write_NBytes(uint32_t Memory_address, uint8_t *Byte, uint32_t Data_Length)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b0c8      	sub	sp, #288	; 0x120
 80001b4:	af02      	add	r7, sp, #8
 80001b6:	f107 030c 	add.w	r3, r7, #12
 80001ba:	6018      	str	r0, [r3, #0]
 80001bc:	f107 0308 	add.w	r3, r7, #8
 80001c0:	6019      	str	r1, [r3, #0]
 80001c2:	1d3b      	adds	r3, r7, #4
 80001c4:	601a      	str	r2, [r3, #0]
	int i = 0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint8_t Buffer[256];
	Buffer[0] = (uint8_t)(Memory_address >> 8);		//high address
 80001cc:	f107 030c 	add.w	r3, r7, #12
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	0a1b      	lsrs	r3, r3, #8
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	f107 0314 	add.w	r3, r7, #20
 80001da:	701a      	strb	r2, [r3, #0]
	Buffer[1] = (uint8_t)(Memory_address);					//low address
 80001dc:	f107 030c 	add.w	r3, r7, #12
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	705a      	strb	r2, [r3, #1]
	for(i=2; i<(Data_Length+2); i++)
 80001ea:	2302      	movs	r3, #2
 80001ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80001f0:	e013      	b.n	800021a <EEPROM_write_NBytes+0x6a>
	{
		Buffer[i]= Byte[i-2];
 80001f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80001f6:	3b02      	subs	r3, #2
 80001f8:	f107 0208 	add.w	r2, r7, #8
 80001fc:	6812      	ldr	r2, [r2, #0]
 80001fe:	4413      	add	r3, r2
 8000200:	7819      	ldrb	r1, [r3, #0]
 8000202:	f107 0214 	add.w	r2, r7, #20
 8000206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800020a:	4413      	add	r3, r2
 800020c:	460a      	mov	r2, r1
 800020e:	701a      	strb	r2, [r3, #0]
	for(i=2; i<(Data_Length+2); i++)
 8000210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000214:	3301      	adds	r3, #1
 8000216:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	1c9a      	adds	r2, r3, #2
 8000220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000224:	429a      	cmp	r2, r3
 8000226:	d8e4      	bhi.n	80001f2 <EEPROM_write_NBytes+0x42>
	}
	MCAL_I2C_MASTER_TX(I2C1, EEPROM_ADDRESS, Buffer, (Data_Length+2), With_STOP, START);
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	b2db      	uxtb	r3, r3
 800022e:	3302      	adds	r3, #2
 8000230:	b2d9      	uxtb	r1, r3
 8000232:	f107 0214 	add.w	r2, r7, #20
 8000236:	2300      	movs	r3, #0
 8000238:	9301      	str	r3, [sp, #4]
 800023a:	2300      	movs	r3, #0
 800023c:	9300      	str	r3, [sp, #0]
 800023e:	460b      	mov	r3, r1
 8000240:	212a      	movs	r1, #42	; 0x2a
 8000242:	4804      	ldr	r0, [pc, #16]	; (8000254 <EEPROM_write_NBytes+0xa4>)
 8000244:	f000 fa6a 	bl	800071c <MCAL_I2C_MASTER_TX>
	return 0;
 8000248:	2300      	movs	r3, #0
}
 800024a:	4618      	mov	r0, r3
 800024c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	40005400 	.word	0x40005400

08000258 <EEPROM_Read_NBytes>:



uint8_t EEPROM_Read_NBytes(uint32_t Memory_address, uint8_t *Byte, uint32_t Data_Length)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b088      	sub	sp, #32
 800025c:	af02      	add	r7, sp, #8
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	607a      	str	r2, [r7, #4]
	uint8_t Buffer[2];
	Buffer[0] = (uint8_t)(Memory_address >> 8);		//high address
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	0a1b      	lsrs	r3, r3, #8
 8000268:	b2db      	uxtb	r3, r3
 800026a:	753b      	strb	r3, [r7, #20]
	Buffer[1] = (uint8_t)(Memory_address);			//low address
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	b2db      	uxtb	r3, r3
 8000270:	757b      	strb	r3, [r7, #21]
	MCAL_I2C_MASTER_TX(I2C1, EEPROM_ADDRESS, Buffer, 2, Without_STOP, START);
 8000272:	f107 0214 	add.w	r2, r7, #20
 8000276:	2300      	movs	r3, #0
 8000278:	9301      	str	r3, [sp, #4]
 800027a:	2301      	movs	r3, #1
 800027c:	9300      	str	r3, [sp, #0]
 800027e:	2302      	movs	r3, #2
 8000280:	212a      	movs	r1, #42	; 0x2a
 8000282:	480a      	ldr	r0, [pc, #40]	; (80002ac <EEPROM_Read_NBytes+0x54>)
 8000284:	f000 fa4a 	bl	800071c <MCAL_I2C_MASTER_TX>
	MCAL_I2C_MASTER_RX(I2C1, EEPROM_ADDRESS, Byte, Data_Length, With_STOP, Repeated_START);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	b2da      	uxtb	r2, r3
 800028c:	2301      	movs	r3, #1
 800028e:	9301      	str	r3, [sp, #4]
 8000290:	2300      	movs	r3, #0
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	4613      	mov	r3, r2
 8000296:	68ba      	ldr	r2, [r7, #8]
 8000298:	212a      	movs	r1, #42	; 0x2a
 800029a:	4804      	ldr	r0, [pc, #16]	; (80002ac <EEPROM_Read_NBytes+0x54>)
 800029c:	f000 fa96 	bl	80007cc <MCAL_I2C_MASTER_RX>
	return 0;
 80002a0:	2300      	movs	r3, #0
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	3718      	adds	r7, #24
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40005400 	.word	0x40005400

080002b0 <clock_init>:

#include "stm32_f103c6_I2C_driver.h"
#include "I2C_Slave_EEPROM.h"

void clock_init(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	RCC_GPIOB_CLK_EN();
 80002b4:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <clock_init+0x24>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a06      	ldr	r2, [pc, #24]	; (80002d4 <clock_init+0x24>)
 80002ba:	f043 0308 	orr.w	r3, r3, #8
 80002be:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80002c0:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <clock_init+0x24>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a03      	ldr	r2, [pc, #12]	; (80002d4 <clock_init+0x24>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6193      	str	r3, [r2, #24]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	40021000 	.word	0x40021000

080002d8 <main>:

int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
	clock_init();
 80002de:	f7ff ffe7 	bl	80002b0 <clock_init>
	EEPROM_Init();
 80002e2:	f7ff ff45 	bl	8000170 <EEPROM_Init>
	//Test Case 1
	uint8_t ch1[] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07};
 80002e6:	4a1a      	ldr	r2, [pc, #104]	; (8000350 <main+0x78>)
 80002e8:	f107 0308 	add.w	r3, r7, #8
 80002ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002f0:	6018      	str	r0, [r3, #0]
 80002f2:	3304      	adds	r3, #4
 80002f4:	8019      	strh	r1, [r3, #0]
 80002f6:	3302      	adds	r3, #2
 80002f8:	0c0a      	lsrs	r2, r1, #16
 80002fa:	701a      	strb	r2, [r3, #0]
	uint8_t ch2[7] = {0};
 80002fc:	463b      	mov	r3, r7
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	f8c3 2003 	str.w	r2, [r3, #3]
	EEPROM_write_NBytes(0xAF, ch1, 7);
 8000306:	f107 0308 	add.w	r3, r7, #8
 800030a:	2207      	movs	r2, #7
 800030c:	4619      	mov	r1, r3
 800030e:	20af      	movs	r0, #175	; 0xaf
 8000310:	f7ff ff4e 	bl	80001b0 <EEPROM_write_NBytes>
	EEPROM_Read_NBytes(0xAF, ch2, 7);
 8000314:	463b      	mov	r3, r7
 8000316:	2207      	movs	r2, #7
 8000318:	4619      	mov	r1, r3
 800031a:	20af      	movs	r0, #175	; 0xaf
 800031c:	f7ff ff9c 	bl	8000258 <EEPROM_Read_NBytes>
	//Test Case 2
	ch1[0] = 0xA;
 8000320:	230a      	movs	r3, #10
 8000322:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB;
 8000324:	230b      	movs	r3, #11
 8000326:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC;
 8000328:	230c      	movs	r3, #12
 800032a:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD;
 800032c:	230d      	movs	r3, #13
 800032e:	72fb      	strb	r3, [r7, #11]
	EEPROM_write_NBytes(0xFFF, ch1, 4);
 8000330:	f107 0308 	add.w	r3, r7, #8
 8000334:	2204      	movs	r2, #4
 8000336:	4619      	mov	r1, r3
 8000338:	f640 70ff 	movw	r0, #4095	; 0xfff
 800033c:	f7ff ff38 	bl	80001b0 <EEPROM_write_NBytes>
	EEPROM_Read_NBytes(0xFFF, ch2, 4);
 8000340:	463b      	mov	r3, r7
 8000342:	2204      	movs	r2, #4
 8000344:	4619      	mov	r1, r3
 8000346:	f640 70ff 	movw	r0, #4095	; 0xfff
 800034a:	f7ff ff85 	bl	8000258 <EEPROM_Read_NBytes>
    while(1)
 800034e:	e7fe      	b.n	800034e <main+0x76>
 8000350:	08000dd0 	.word	0x08000dd0

08000354 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000354:	480d      	ldr	r0, [pc, #52]	; (800038c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000356:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000358:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800035c:	480c      	ldr	r0, [pc, #48]	; (8000390 <LoopForever+0x6>)
  ldr r1, =_edata
 800035e:	490d      	ldr	r1, [pc, #52]	; (8000394 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000360:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <LoopForever+0xe>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800036c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000372:	4a0a      	ldr	r2, [pc, #40]	; (800039c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000374:	4c0a      	ldr	r4, [pc, #40]	; (80003a0 <LoopForever+0x16>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000382:	f000 fcf5 	bl	8000d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000386:	f7ff ffa7 	bl	80002d8 <main>

0800038a <LoopForever>:

LoopForever:
    b LoopForever
 800038a:	e7fe      	b.n	800038a <LoopForever>
  ldr   r0, =_estack
 800038c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000394:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000398:	08000df8 	.word	0x08000df8
  ldr r2, =_sbss
 800039c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a0:	20000078 	.word	0x20000078

080003a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a4:	e7fe      	b.n	80003a4 <ADC1_2_IRQHandler>

080003a6 <get_position>:

#include "stm32_f103c6_gpio_drivers.h"


uint8_t get_position(uint16_t pin_number)
{
 80003a6:	b480      	push	{r7}
 80003a8:	b083      	sub	sp, #12
 80003aa:	af00      	add	r7, sp, #0
 80003ac:	4603      	mov	r3, r0
 80003ae:	80fb      	strh	r3, [r7, #6]
	switch(pin_number)
 80003b0:	88fb      	ldrh	r3, [r7, #6]
 80003b2:	2b80      	cmp	r3, #128	; 0x80
 80003b4:	d042      	beq.n	800043c <get_position+0x96>
 80003b6:	2b80      	cmp	r3, #128	; 0x80
 80003b8:	dc11      	bgt.n	80003de <get_position+0x38>
 80003ba:	2b08      	cmp	r3, #8
 80003bc:	d036      	beq.n	800042c <get_position+0x86>
 80003be:	2b08      	cmp	r3, #8
 80003c0:	dc06      	bgt.n	80003d0 <get_position+0x2a>
 80003c2:	2b02      	cmp	r3, #2
 80003c4:	d02e      	beq.n	8000424 <get_position+0x7e>
 80003c6:	2b04      	cmp	r3, #4
 80003c8:	d02e      	beq.n	8000428 <get_position+0x82>
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d028      	beq.n	8000420 <get_position+0x7a>
 80003ce:	e047      	b.n	8000460 <get_position+0xba>
 80003d0:	2b20      	cmp	r3, #32
 80003d2:	d02f      	beq.n	8000434 <get_position+0x8e>
 80003d4:	2b40      	cmp	r3, #64	; 0x40
 80003d6:	d02f      	beq.n	8000438 <get_position+0x92>
 80003d8:	2b10      	cmp	r3, #16
 80003da:	d029      	beq.n	8000430 <get_position+0x8a>
 80003dc:	e040      	b.n	8000460 <get_position+0xba>
 80003de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003e2:	d033      	beq.n	800044c <get_position+0xa6>
 80003e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003e8:	dc09      	bgt.n	80003fe <get_position+0x58>
 80003ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003ee:	d029      	beq.n	8000444 <get_position+0x9e>
 80003f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003f4:	d028      	beq.n	8000448 <get_position+0xa2>
 80003f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003fa:	d021      	beq.n	8000440 <get_position+0x9a>
 80003fc:	e030      	b.n	8000460 <get_position+0xba>
 80003fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000402:	d027      	beq.n	8000454 <get_position+0xae>
 8000404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000408:	dc03      	bgt.n	8000412 <get_position+0x6c>
 800040a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800040e:	d01f      	beq.n	8000450 <get_position+0xaa>
 8000410:	e026      	b.n	8000460 <get_position+0xba>
 8000412:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000416:	d01f      	beq.n	8000458 <get_position+0xb2>
 8000418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800041c:	d01e      	beq.n	800045c <get_position+0xb6>
 800041e:	e01f      	b.n	8000460 <get_position+0xba>
	{
	case  GPIO_PIN_0 :
		return 0;
 8000420:	2300      	movs	r3, #0
 8000422:	e01e      	b.n	8000462 <get_position+0xbc>
		break;
	case  GPIO_PIN_1 :
		return 4;
 8000424:	2304      	movs	r3, #4
 8000426:	e01c      	b.n	8000462 <get_position+0xbc>
		break;
	case  GPIO_PIN_2 :
		return 8;
 8000428:	2308      	movs	r3, #8
 800042a:	e01a      	b.n	8000462 <get_position+0xbc>
		break;
	case  GPIO_PIN_3 :
		return 12;
 800042c:	230c      	movs	r3, #12
 800042e:	e018      	b.n	8000462 <get_position+0xbc>
		break;
	case  GPIO_PIN_4 :
		return 16;
 8000430:	2310      	movs	r3, #16
 8000432:	e016      	b.n	8000462 <get_position+0xbc>
		break;
	case  GPIO_PIN_5 :
		return 20;
 8000434:	2314      	movs	r3, #20
 8000436:	e014      	b.n	8000462 <get_position+0xbc>
		break;
	case  GPIO_PIN_6 :
		return 24;
 8000438:	2318      	movs	r3, #24
 800043a:	e012      	b.n	8000462 <get_position+0xbc>
		break;
	case  GPIO_PIN_7 :
		return 28;
 800043c:	231c      	movs	r3, #28
 800043e:	e010      	b.n	8000462 <get_position+0xbc>
		break;
	case  GPIO_PIN_8 :
		return 0;
 8000440:	2300      	movs	r3, #0
 8000442:	e00e      	b.n	8000462 <get_position+0xbc>
		break;
	case  GPIO_PIN_9 :
		return 4;
 8000444:	2304      	movs	r3, #4
 8000446:	e00c      	b.n	8000462 <get_position+0xbc>
		break;
	case  GPIO_PIN_10 :
		return 8;
 8000448:	2308      	movs	r3, #8
 800044a:	e00a      	b.n	8000462 <get_position+0xbc>
		break;
	case  GPIO_PIN_11 :
		return 12;
 800044c:	230c      	movs	r3, #12
 800044e:	e008      	b.n	8000462 <get_position+0xbc>
		break;
	case  GPIO_PIN_12 :
		return 16;
 8000450:	2310      	movs	r3, #16
 8000452:	e006      	b.n	8000462 <get_position+0xbc>
		break;
	case  GPIO_PIN_13 :
		return 20;
 8000454:	2314      	movs	r3, #20
 8000456:	e004      	b.n	8000462 <get_position+0xbc>
		break;
	case  GPIO_PIN_14 :
		return 24;
 8000458:	2318      	movs	r3, #24
 800045a:	e002      	b.n	8000462 <get_position+0xbc>
		break;
	case  GPIO_PIN_15 :
		return 28;
 800045c:	231c      	movs	r3, #28
 800045e:	e000      	b.n	8000462 <get_position+0xbc>
		break;
	}
	return 0;
 8000460:	2300      	movs	r3, #0
}
 8000462:	4618      	mov	r0, r3
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <MCAL_GPIO_Init>:
 * @retval 			-	none
 * Note 			-	STM32f103c6 MCU has GPIO A,B,B,D,E modules
 *                      but LQFP48 Package has only A,B, Part of C,D
 */
void MCAL_GPIO_Init(GPIO_TypeDef * GPIOx, GPIO_Pinconfig_t * pinconfig)
{
 800046c:	b590      	push	{r4, r7, lr}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) pins 0 >>> 7
	//Port configuration register high (GPIOx_CRH) pins 8 >>> 15
	volatile uint32_t * configreg = NULL;
 8000476:	2300      	movs	r3, #0
 8000478:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 800047a:	2300      	movs	r3, #0
 800047c:	73fb      	strb	r3, [r7, #15]
	configreg = (pinconfig->PinNumber < GPIO_PIN_8)? &GPIOx->CRL: &GPIOx->CRH;
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	881b      	ldrh	r3, [r3, #0]
 8000482:	2bff      	cmp	r3, #255	; 0xff
 8000484:	d801      	bhi.n	800048a <MCAL_GPIO_Init+0x1e>
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	e001      	b.n	800048e <MCAL_GPIO_Init+0x22>
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	3304      	adds	r3, #4
 800048e:	60bb      	str	r3, [r7, #8]
	//clear CNFy[1:0] , MODEy[1:0]
	*(configreg) &= ~(0xf << get_position(pinconfig->PinNumber));
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	881b      	ldrh	r3, [r3, #0]
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff ff86 	bl	80003a6 <get_position>
 800049a:	4603      	mov	r3, r0
 800049c:	461a      	mov	r2, r3
 800049e:	230f      	movs	r3, #15
 80004a0:	4093      	lsls	r3, r2
 80004a2:	43da      	mvns	r2, r3
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	401a      	ands	r2, r3
 80004aa:	68bb      	ldr	r3, [r7, #8]
 80004ac:	601a      	str	r2, [r3, #0]
	//if pin is output
	if ( (pinconfig ->Mode == GPIO_MODE_Output_PP || pinconfig ->Mode == GPIO_MODE_Output_OD || pinconfig ->Mode == GPIO_MODE_Output_AF_PP || pinconfig ->Mode == GPIO_MODE_Output_AF_OD) )
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	789b      	ldrb	r3, [r3, #2]
 80004b2:	2b04      	cmp	r3, #4
 80004b4:	d00b      	beq.n	80004ce <MCAL_GPIO_Init+0x62>
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	789b      	ldrb	r3, [r3, #2]
 80004ba:	2b05      	cmp	r3, #5
 80004bc:	d007      	beq.n	80004ce <MCAL_GPIO_Init+0x62>
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	789b      	ldrb	r3, [r3, #2]
 80004c2:	2b06      	cmp	r3, #6
 80004c4:	d003      	beq.n	80004ce <MCAL_GPIO_Init+0x62>
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	789b      	ldrb	r3, [r3, #2]
 80004ca:	2b07      	cmp	r3, #7
 80004cc:	d10e      	bne.n	80004ec <MCAL_GPIO_Init+0x80>
	{
		PIN_Config = ( ((pinconfig ->Mode - 4) << 2) | (pinconfig ->Output_speed  & 0x0f) );
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	789b      	ldrb	r3, [r3, #2]
 80004d2:	3b04      	subs	r3, #4
 80004d4:	009b      	lsls	r3, r3, #2
 80004d6:	b25a      	sxtb	r2, r3
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	78db      	ldrb	r3, [r3, #3]
 80004dc:	b25b      	sxtb	r3, r3
 80004de:	f003 030f 	and.w	r3, r3, #15
 80004e2:	b25b      	sxtb	r3, r3
 80004e4:	4313      	orrs	r3, r2
 80004e6:	b25b      	sxtb	r3, r3
 80004e8:	73fb      	strb	r3, [r7, #15]
 80004ea:	e032      	b.n	8000552 <MCAL_GPIO_Init+0xe6>
	}
	//if pin is input
	else	//MODEy[1:0] = 00: Input mode (reset state)
	{
		//Input with pull-up / pull-down mode
		if( pinconfig ->Mode == GPIO_MODE_Input_PD || pinconfig ->Mode == GPIO_MODE_Input_PU )
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	789b      	ldrb	r3, [r3, #2]
 80004f0:	2b03      	cmp	r3, #3
 80004f2:	d003      	beq.n	80004fc <MCAL_GPIO_Init+0x90>
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	789b      	ldrb	r3, [r3, #2]
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	d11a      	bne.n	8000532 <MCAL_GPIO_Init+0xc6>
		{
			PIN_Config = ( ((GPIO_MODE_Input_PU << 2) | 0x0) & 0x0f );
 80004fc:	2308      	movs	r3, #8
 80004fe:	73fb      	strb	r3, [r7, #15]
			//check if mode is pull-down
			if( pinconfig ->Mode == GPIO_MODE_Input_PD )
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	789b      	ldrb	r3, [r3, #2]
 8000504:	2b03      	cmp	r3, #3
 8000506:	d108      	bne.n	800051a <MCAL_GPIO_Init+0xae>
			{
				//According to Table 20. Port bit configuration table : PxODR = 0
				GPIOx ->ODR  &= ~(pinconfig ->PinNumber);
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	683a      	ldr	r2, [r7, #0]
 800050e:	8812      	ldrh	r2, [r2, #0]
 8000510:	43d2      	mvns	r2, r2
 8000512:	401a      	ands	r2, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	60da      	str	r2, [r3, #12]
			if( pinconfig ->Mode == GPIO_MODE_Input_PD )
 8000518:	e01a      	b.n	8000550 <MCAL_GPIO_Init+0xe4>
			}
			//check if mode is pull-up
			else if( pinconfig ->Mode == GPIO_MODE_Input_PU )
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	789b      	ldrb	r3, [r3, #2]
 800051e:	2b02      	cmp	r3, #2
 8000520:	d116      	bne.n	8000550 <MCAL_GPIO_Init+0xe4>
			{
				//According to Table 20. Port bit configuration table : PxODR = 1
				GPIOx ->ODR  |= (pinconfig ->PinNumber);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	68db      	ldr	r3, [r3, #12]
 8000526:	683a      	ldr	r2, [r7, #0]
 8000528:	8812      	ldrh	r2, [r2, #0]
 800052a:	431a      	orrs	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	60da      	str	r2, [r3, #12]
			if( pinconfig ->Mode == GPIO_MODE_Input_PD )
 8000530:	e00e      	b.n	8000550 <MCAL_GPIO_Init+0xe4>
			}
		}
		else if ( pinconfig ->Mode == GPIO_MODE_AF_Input)	//consider it  as input floating
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	789b      	ldrb	r3, [r3, #2]
 8000536:	2b08      	cmp	r3, #8
 8000538:	d102      	bne.n	8000540 <MCAL_GPIO_Init+0xd4>
		{
			PIN_Config = ( ((GPIO_MODE_Input_FLU << 2) | 0x0) & 0x0f );
 800053a:	2304      	movs	r3, #4
 800053c:	73fb      	strb	r3, [r7, #15]
 800053e:	e008      	b.n	8000552 <MCAL_GPIO_Init+0xe6>
		}
		else	//Analog mode , input floating
		{
			PIN_Config = ( ((pinconfig ->Mode << 2) | 0x0) & 0x0f );
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	789b      	ldrb	r3, [r3, #2]
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	b2db      	uxtb	r3, r3
 8000548:	f003 030f 	and.w	r3, r3, #15
 800054c:	73fb      	strb	r3, [r7, #15]
 800054e:	e000      	b.n	8000552 <MCAL_GPIO_Init+0xe6>
			if( pinconfig ->Mode == GPIO_MODE_Input_PD )
 8000550:	bf00      	nop
		}
	}
	//Write on CRL or CRH
	*(configreg) |= ( (PIN_Config) << get_position(pinconfig ->PinNumber) );
 8000552:	7bfc      	ldrb	r4, [r7, #15]
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	881b      	ldrh	r3, [r3, #0]
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ff24 	bl	80003a6 <get_position>
 800055e:	4603      	mov	r3, r0
 8000560:	fa04 f203 	lsl.w	r2, r4, r3
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	431a      	orrs	r2, r3
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	601a      	str	r2, [r3, #0]
}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	bd90      	pop	{r4, r7, pc}
	...

08000578 <MCAL_I2C_Init>:
 * Note 			-	Supported for I2C SM mode only
 * 					-	Support only 7-bit address mode
 *
 */
void MCAL_I2C_Init(I2C_TypeDef *I2Cx, I2C_Config_t *I2C_Config)
{
 8000578:	b5b0      	push	{r4, r5, r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
	uint32_t FREQ_Range = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]

	//Enable RCC Clock For Selected I2C
	if(I2Cx == I2C1)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4a3b      	ldr	r2, [pc, #236]	; (8000678 <MCAL_I2C_Init+0x100>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d112      	bne.n	80005b4 <MCAL_I2C_Init+0x3c>
	{
		RCC_I2C1_CLK_EN();
 800058e:	4b3b      	ldr	r3, [pc, #236]	; (800067c <MCAL_I2C_Init+0x104>)
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	4a3a      	ldr	r2, [pc, #232]	; (800067c <MCAL_I2C_Init+0x104>)
 8000594:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000598:	61d3      	str	r3, [r2, #28]
		Global_I2C_Config[I2C1_INDEX] = *I2C_Config;
 800059a:	4a39      	ldr	r2, [pc, #228]	; (8000680 <MCAL_I2C_Init+0x108>)
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	4614      	mov	r4, r2
 80005a0:	461d      	mov	r5, r3
 80005a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005ae:	e884 0003 	stmia.w	r4, {r0, r1}
 80005b2:	e012      	b.n	80005da <MCAL_I2C_Init+0x62>
	}
	else
	{
		RCC_I2C2_CLK_EN();
 80005b4:	4b31      	ldr	r3, [pc, #196]	; (800067c <MCAL_I2C_Init+0x104>)
 80005b6:	69db      	ldr	r3, [r3, #28]
 80005b8:	4a30      	ldr	r2, [pc, #192]	; (800067c <MCAL_I2C_Init+0x104>)
 80005ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005be:	61d3      	str	r3, [r2, #28]
		Global_I2C_Config[I2C2_INDEX] = *I2C_Config;
 80005c0:	4b2f      	ldr	r3, [pc, #188]	; (8000680 <MCAL_I2C_Init+0x108>)
 80005c2:	683a      	ldr	r2, [r7, #0]
 80005c4:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80005c8:	4615      	mov	r5, r2
 80005ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005d6:	e884 0003 	stmia.w	r4, {r0, r1}
	}


	//Enable or disable stretching mode
	I2Cx->I2C_CR1 |= I2C_Config->clock_stretching;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	431a      	orrs	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	601a      	str	r2, [r3, #0]

	//Enable or disable general call
	I2Cx->I2C_CR1 |= I2C_Config->General_Call;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	431a      	orrs	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	601a      	str	r2, [r3, #0]

	//select SMBUS mode or I2C Mode
	I2Cx->I2C_CR1 |= I2C_Config->I2C_Mode;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	691b      	ldr	r3, [r3, #16]
 80005fe:	431a      	orrs	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	601a      	str	r2, [r3, #0]

	//Enable or disable Automatic ACK
	I2Cx->I2C_CR1 |= I2C_Config->I2C_ACK_Control;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	431a      	orrs	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	601a      	str	r2, [r3, #0]

	#ifdef I2C_MASTER_MODE

	//choose master mode SM or FM
	I2Cx->I2C_CCR |= I2C_Config->I2C_Master_Mode;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	69da      	ldr	r2, [r3, #28]
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	68db      	ldr	r3, [r3, #12]
 800061a:	431a      	orrs	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	61da      	str	r2, [r3, #28]
//	0b000001: Not allowed
//	0b000010: 2 MHz
//	...
//	0b110010: 50 MHz
//	Higher than 0b100100: Not allowed
	FREQ_Range = (uint32_t)((MCAL_RCC_getPCLK1Freq() / 1000000));
 8000620:	f000 fae6 	bl	8000bf0 <MCAL_RCC_getPCLK1Freq>
 8000624:	4602      	mov	r2, r0
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MCAL_I2C_Init+0x10c>)
 8000628:	fba3 2302 	umull	r2, r3, r3, r2
 800062c:	0c9b      	lsrs	r3, r3, #18
 800062e:	60fb      	str	r3, [r7, #12]
	I2Cx->I2C_CR2 |= FREQ_Range;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	685a      	ldr	r2, [r3, #4]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	431a      	orrs	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	605a      	str	r2, [r3, #4]
//	Bits 11:0 CCR[11:0]: Clock control register in Fm/Sm mode (Master mode)
//	Controls the SCL clock in master mode.
//	Sm mode or SMBus:
//	Thigh = CCR * TPCLK1
//	Tlow = CCR * TPCLK1
	I2Cx->I2C_CCR |= (uint32_t)( (MCAL_RCC_getPCLK1Freq()) / (I2C_Config->clock_speed << 1) );		//(I2C_Config->clock_speed << 1) = 2 * I2C_Config->clock_speed
 800063c:	f000 fad8 	bl	8000bf0 <MCAL_RCC_getPCLK1Freq>
 8000640:	4602      	mov	r2, r0
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	fbb2 f2f3 	udiv	r2, r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	69db      	ldr	r3, [r3, #28]
 8000650:	431a      	orrs	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	61da      	str	r2, [r3, #28]

	//3- configure Maximum rise time in SM mode(TRISE REG)
	//Bits 5:0 TRISE[5:0]: Maximum rise time in Fm/Sm mode (Master mode)
	I2Cx->I2C_TRISE |= (uint32_t)( FREQ_Range + 1 );
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6a1a      	ldr	r2, [r3, #32]
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	431a      	orrs	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	621a      	str	r2, [r3, #32]

	#endif


	//Enable Selected I2C peripheral
	I2Cx->I2C_CR1 |= (1<<0);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f043 0201 	orr.w	r2, r3, #1
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	601a      	str	r2, [r3, #0]
}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bdb0      	pop	{r4, r5, r7, pc}
 8000678:	40005400 	.word	0x40005400
 800067c:	40021000 	.word	0x40021000
 8000680:	20000024 	.word	0x20000024
 8000684:	431bde83 	.word	0x431bde83

08000688 <MCAL_I2C_GPIO_Set_Pins>:
 * Note 			-	Must open clock for AFIO & GPIO After GPIO Initialization
 * 					-	Supported for I2C SM MODE only
 *
 */
void MCAL_I2C_GPIO_Set_Pins(I2C_TypeDef *I2Cx)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	GPIO_Pinconfig_t	GPIO_CFG;
	if(I2Cx == I2C1)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4a1f      	ldr	r2, [pc, #124]	; (8000710 <MCAL_I2C_GPIO_Set_Pins+0x88>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d118      	bne.n	80006ca <MCAL_I2C_GPIO_Set_Pins+0x42>
	{
		//I2C1_SCL
		GPIO_CFG.PinNumber = GPIO_PIN_6;
 8000698:	2340      	movs	r3, #64	; 0x40
 800069a:	81bb      	strh	r3, [r7, #12]
		GPIO_CFG.Mode = GPIO_MODE_Output_AF_OD;
 800069c:	2307      	movs	r3, #7
 800069e:	73bb      	strb	r3, [r7, #14]
		GPIO_CFG.Output_speed = GPIO_SPEED_10M;
 80006a0:	2301      	movs	r3, #1
 80006a2:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &GPIO_CFG);
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	4619      	mov	r1, r3
 80006aa:	481a      	ldr	r0, [pc, #104]	; (8000714 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 80006ac:	f7ff fede 	bl	800046c <MCAL_GPIO_Init>
		//I2C1_SDA
		GPIO_CFG.PinNumber = GPIO_PIN_7;
 80006b0:	2380      	movs	r3, #128	; 0x80
 80006b2:	81bb      	strh	r3, [r7, #12]
		GPIO_CFG.Mode = GPIO_MODE_Output_AF_OD;
 80006b4:	2307      	movs	r3, #7
 80006b6:	73bb      	strb	r3, [r7, #14]
		GPIO_CFG.Output_speed = GPIO_SPEED_10M;
 80006b8:	2301      	movs	r3, #1
 80006ba:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &GPIO_CFG);
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	4619      	mov	r1, r3
 80006c2:	4814      	ldr	r0, [pc, #80]	; (8000714 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 80006c4:	f7ff fed2 	bl	800046c <MCAL_GPIO_Init>
		GPIO_CFG.PinNumber = GPIO_PIN_11;
		GPIO_CFG.Mode = GPIO_MODE_Output_AF_OD;
		GPIO_CFG.Output_speed = GPIO_SPEED_10M;
		MCAL_GPIO_Init(GPIOB, &GPIO_CFG);
	}
}
 80006c8:	e01d      	b.n	8000706 <MCAL_I2C_GPIO_Set_Pins+0x7e>
	else if(I2Cx == I2C2)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a12      	ldr	r2, [pc, #72]	; (8000718 <MCAL_I2C_GPIO_Set_Pins+0x90>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d119      	bne.n	8000706 <MCAL_I2C_GPIO_Set_Pins+0x7e>
		GPIO_CFG.PinNumber = GPIO_PIN_10;
 80006d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006d6:	81bb      	strh	r3, [r7, #12]
		GPIO_CFG.Mode = GPIO_MODE_Output_AF_OD;
 80006d8:	2307      	movs	r3, #7
 80006da:	73bb      	strb	r3, [r7, #14]
		GPIO_CFG.Output_speed = GPIO_SPEED_10M;
 80006dc:	2301      	movs	r3, #1
 80006de:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &GPIO_CFG);
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	4619      	mov	r1, r3
 80006e6:	480b      	ldr	r0, [pc, #44]	; (8000714 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 80006e8:	f7ff fec0 	bl	800046c <MCAL_GPIO_Init>
		GPIO_CFG.PinNumber = GPIO_PIN_11;
 80006ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006f0:	81bb      	strh	r3, [r7, #12]
		GPIO_CFG.Mode = GPIO_MODE_Output_AF_OD;
 80006f2:	2307      	movs	r3, #7
 80006f4:	73bb      	strb	r3, [r7, #14]
		GPIO_CFG.Output_speed = GPIO_SPEED_10M;
 80006f6:	2301      	movs	r3, #1
 80006f8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &GPIO_CFG);
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	4619      	mov	r1, r3
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MCAL_I2C_GPIO_Set_Pins+0x8c>)
 8000702:	f7ff feb3 	bl	800046c <MCAL_GPIO_Init>
}
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40005400 	.word	0x40005400
 8000714:	40010c00 	.word	0x40010c00
 8000718:	40005800 	.word	0x40005800

0800071c <MCAL_I2C_MASTER_TX>:
 * @retval 			-	none
 * Note 			-	none
 *
 */
void MCAL_I2C_MASTER_TX(I2C_TypeDef *I2Cx, uint16_t device_address, uint8_t *data, uint8_t data_len, STOP_Condition Stop, START_Condition start)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	607a      	str	r2, [r7, #4]
 8000726:	461a      	mov	r2, r3
 8000728:	460b      	mov	r3, r1
 800072a:	817b      	strh	r3, [r7, #10]
 800072c:	4613      	mov	r3, r2
 800072e:	727b      	strb	r3, [r7, #9]
	int i = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
	//1- Send start bit
	I2C_Generate_Start(I2Cx, start, Enable);
 8000734:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000738:	2201      	movs	r2, #1
 800073a:	4619      	mov	r1, r3
 800073c:	68f8      	ldr	r0, [r7, #12]
 800073e:	f000 f93d 	bl	80009bc <I2C_Generate_Start>
	//check if start bit is sent
	while(! (I2C_Get_FlagStatus(I2Cx, SB)));
 8000742:	bf00      	nop
 8000744:	2101      	movs	r1, #1
 8000746:	68f8      	ldr	r0, [r7, #12]
 8000748:	f000 f8bc 	bl	80008c4 <I2C_Get_FlagStatus>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d0f8      	beq.n	8000744 <MCAL_I2C_MASTER_TX+0x28>

	//2- Send Slave Address(7-bit) + Write
	I2C_Send_Address(I2Cx, device_address, Transmitter);
 8000752:	897b      	ldrh	r3, [r7, #10]
 8000754:	2200      	movs	r2, #0
 8000756:	4619      	mov	r1, r3
 8000758:	68f8      	ldr	r0, [r7, #12]
 800075a:	f000 f959 	bl	8000a10 <I2C_Send_Address>
	//check if Address is sent
	while(! (I2C_Get_FlagStatus(I2Cx, ADDR)));
 800075e:	bf00      	nop
 8000760:	2102      	movs	r1, #2
 8000762:	68f8      	ldr	r0, [r7, #12]
 8000764:	f000 f8ae 	bl	80008c4 <I2C_Get_FlagStatus>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d0f8      	beq.n	8000760 <MCAL_I2C_MASTER_TX+0x44>

	//3- check if BUSY,TRA,MSL,TXE are all set (check for busy flag here to handle if master lost Arbitration)
	while(! (I2C_Get_FlagStatus(I2Cx, Master_Transmitter_Event)));
 800076e:	bf00      	nop
 8000770:	4915      	ldr	r1, [pc, #84]	; (80007c8 <MCAL_I2C_MASTER_TX+0xac>)
 8000772:	68f8      	ldr	r0, [r7, #12]
 8000774:	f000 f8a6 	bl	80008c4 <I2C_Get_FlagStatus>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f8      	beq.n	8000770 <MCAL_I2C_MASTER_TX+0x54>

	//4- send data
	for(i=0; i<data_len; i++)
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	e011      	b.n	80007a8 <MCAL_I2C_MASTER_TX+0x8c>
	{
		I2Cx->I2C_DR = data[i];
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	4413      	add	r3, r2
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	611a      	str	r2, [r3, #16]
		//check for EV8: TxE=1, shift register not empty, data register empty, cleared by writing DR register
		while(! (I2C_Get_FlagStatus(I2Cx, TXE)));
 8000792:	bf00      	nop
 8000794:	2103      	movs	r1, #3
 8000796:	68f8      	ldr	r0, [r7, #12]
 8000798:	f000 f894 	bl	80008c4 <I2C_Get_FlagStatus>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0f8      	beq.n	8000794 <MCAL_I2C_MASTER_TX+0x78>
	for(i=0; i<data_len; i++)
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	3301      	adds	r3, #1
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	7a7b      	ldrb	r3, [r7, #9]
 80007aa:	697a      	ldr	r2, [r7, #20]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	dbe9      	blt.n	8000784 <MCAL_I2C_MASTER_TX+0x68>
	}

	//5- send stop bit
	if(Stop == With_STOP)
 80007b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d103      	bne.n	80007c0 <MCAL_I2C_MASTER_TX+0xa4>
	{
		I2C_Stop(I2Cx, Enable);
 80007b8:	2101      	movs	r1, #1
 80007ba:	68f8      	ldr	r0, [r7, #12]
 80007bc:	f000 f948 	bl	8000a50 <I2C_Stop>
	}
}
 80007c0:	bf00      	nop
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	00070080 	.word	0x00070080

080007cc <MCAL_I2C_MASTER_RX>:
 * @retval 			-	none
 * Note 			-	none
 *
 */
void MCAL_I2C_MASTER_RX(I2C_TypeDef *I2Cx, uint16_t device_address, uint8_t *data, uint8_t data_len, STOP_Condition Stop, START_Condition start)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	461a      	mov	r2, r3
 80007d8:	460b      	mov	r3, r1
 80007da:	817b      	strh	r3, [r7, #10]
 80007dc:	4613      	mov	r3, r2
 80007de:	727b      	strb	r3, [r7, #9]
	int i = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
	uint8_t index = I2Cx == I2C1? I2C1_INDEX : I2C2_INDEX;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	4a35      	ldr	r2, [pc, #212]	; (80008bc <MCAL_I2C_MASTER_RX+0xf0>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	bf14      	ite	ne
 80007ec:	2301      	movne	r3, #1
 80007ee:	2300      	moveq	r3, #0
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	74fb      	strb	r3, [r7, #19]
	//1- Send start bit
	I2C_Generate_Start(I2Cx, start, Enable);
 80007f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80007f8:	2201      	movs	r2, #1
 80007fa:	4619      	mov	r1, r3
 80007fc:	68f8      	ldr	r0, [r7, #12]
 80007fe:	f000 f8dd 	bl	80009bc <I2C_Generate_Start>
	//check if start bit is sent
	while(! (I2C_Get_FlagStatus(I2Cx, SB)));
 8000802:	bf00      	nop
 8000804:	2101      	movs	r1, #1
 8000806:	68f8      	ldr	r0, [r7, #12]
 8000808:	f000 f85c 	bl	80008c4 <I2C_Get_FlagStatus>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0f8      	beq.n	8000804 <MCAL_I2C_MASTER_RX+0x38>

	//2- Send Slave Address(7-bit) + Read
	I2C_Send_Address(I2Cx, device_address, Receiver);
 8000812:	897b      	ldrh	r3, [r7, #10]
 8000814:	2201      	movs	r2, #1
 8000816:	4619      	mov	r1, r3
 8000818:	68f8      	ldr	r0, [r7, #12]
 800081a:	f000 f8f9 	bl	8000a10 <I2C_Send_Address>
	//check if Address is sent
	while(! (I2C_Get_FlagStatus(I2Cx, ADDR)));
 800081e:	bf00      	nop
 8000820:	2102      	movs	r1, #2
 8000822:	68f8      	ldr	r0, [r7, #12]
 8000824:	f000 f84e 	bl	80008c4 <I2C_Get_FlagStatus>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d0f8      	beq.n	8000820 <MCAL_I2C_MASTER_RX+0x54>

	//3- Enable automatic ACK
	I2C_ACKConfig(I2Cx, Enable);
 800082e:	2101      	movs	r1, #1
 8000830:	68f8      	ldr	r0, [r7, #12]
 8000832:	f000 f928 	bl	8000a86 <I2C_ACKConfig>

	//4- Read Data
	if(data_len)
 8000836:	7a7b      	ldrb	r3, [r7, #9]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d019      	beq.n	8000870 <MCAL_I2C_MASTER_RX+0xa4>
	{
		for(i=0; i<data_len; i++)
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	e012      	b.n	8000868 <MCAL_I2C_MASTER_RX+0x9c>
		{
			//check for EV7 : RXNE=1 cleared by reading DR register
			while(! (I2C_Get_FlagStatus(I2Cx, RXNE)));
 8000842:	bf00      	nop
 8000844:	2104      	movs	r1, #4
 8000846:	68f8      	ldr	r0, [r7, #12]
 8000848:	f000 f83c 	bl	80008c4 <I2C_Get_FlagStatus>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d0f8      	beq.n	8000844 <MCAL_I2C_MASTER_RX+0x78>
			//Read Data
			*data = I2Cx->I2C_DR;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	691b      	ldr	r3, [r3, #16]
 8000856:	b2da      	uxtb	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	701a      	strb	r2, [r3, #0]
			data++;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3301      	adds	r3, #1
 8000860:	607b      	str	r3, [r7, #4]
		for(i=0; i<data_len; i++)
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	3301      	adds	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	7a7b      	ldrb	r3, [r7, #9]
 800086a:	697a      	ldr	r2, [r7, #20]
 800086c:	429a      	cmp	r2, r3
 800086e:	dbe8      	blt.n	8000842 <MCAL_I2C_MASTER_RX+0x76>
		}
	}

	//5- send NACK
	I2C_ACKConfig(I2Cx, Disable);
 8000870:	2100      	movs	r1, #0
 8000872:	68f8      	ldr	r0, [r7, #12]
 8000874:	f000 f907 	bl	8000a86 <I2C_ACKConfig>

	//6- send stop bit
	if(Stop == With_STOP)
 8000878:	f897 3020 	ldrb.w	r3, [r7, #32]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d103      	bne.n	8000888 <MCAL_I2C_MASTER_RX+0xbc>
	{
		I2C_Stop(I2Cx, Enable);
 8000880:	2101      	movs	r1, #1
 8000882:	68f8      	ldr	r0, [r7, #12]
 8000884:	f000 f8e4 	bl	8000a50 <I2C_Stop>
	}

	//7- ReEnable automatic ACK
	if(Global_I2C_Config[index].I2C_ACK_Control == I2C_ACK_Control_Enable)
 8000888:	7cfa      	ldrb	r2, [r7, #19]
 800088a:	490d      	ldr	r1, [pc, #52]	; (80008c0 <MCAL_I2C_MASTER_RX+0xf4>)
 800088c:	4613      	mov	r3, r2
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	4413      	add	r3, r2
 8000892:	00db      	lsls	r3, r3, #3
 8000894:	440b      	add	r3, r1
 8000896:	3314      	adds	r3, #20
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800089e:	d104      	bne.n	80008aa <MCAL_I2C_MASTER_RX+0xde>
		I2C_ACKConfig(I2Cx, Enable);
 80008a0:	2101      	movs	r1, #1
 80008a2:	68f8      	ldr	r0, [r7, #12]
 80008a4:	f000 f8ef 	bl	8000a86 <I2C_ACKConfig>
	else
		I2C_ACKConfig(I2Cx, Disable);

}
 80008a8:	e003      	b.n	80008b2 <MCAL_I2C_MASTER_RX+0xe6>
		I2C_ACKConfig(I2Cx, Disable);
 80008aa:	2100      	movs	r1, #0
 80008ac:	68f8      	ldr	r0, [r7, #12]
 80008ae:	f000 f8ea 	bl	8000a86 <I2C_ACKConfig>
}
 80008b2:	bf00      	nop
 80008b4:	3718      	adds	r7, #24
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40005400 	.word	0x40005400
 80008c0:	20000024 	.word	0x20000024

080008c4 <I2C_Get_FlagStatus>:
 *
*/


Flagstatus I2C_Get_FlagStatus(I2C_TypeDef *I2Cx, status flag)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b087      	sub	sp, #28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
	//volatile uint32_t dummy_read;
	Flagstatus bit_status = RESET;
 80008ce:	2300      	movs	r3, #0
 80008d0:	75fb      	strb	r3, [r7, #23]
	uint32_t flag1 = 0, flag2 = 0, last_event = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
	switch(flag)
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d026      	beq.n	8000932 <I2C_Get_FlagStatus+0x6e>
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d804      	bhi.n	80008f2 <I2C_Get_FlagStatus+0x2e>
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d00a      	beq.n	8000902 <I2C_Get_FlagStatus+0x3e>
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d014      	beq.n	800091a <I2C_Get_FlagStatus+0x56>
 80008f0:	e05c      	b.n	80009ac <I2C_Get_FlagStatus+0xe8>
 80008f2:	2b04      	cmp	r3, #4
 80008f4:	d04e      	beq.n	8000994 <I2C_Get_FlagStatus+0xd0>
 80008f6:	2b04      	cmp	r3, #4
 80008f8:	d327      	bcc.n	800094a <I2C_Get_FlagStatus+0x86>
 80008fa:	4a2f      	ldr	r2, [pc, #188]	; (80009b8 <I2C_Get_FlagStatus+0xf4>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d030      	beq.n	8000962 <I2C_Get_FlagStatus+0x9e>
 8000900:	e054      	b.n	80009ac <I2C_Get_FlagStatus+0xe8>
	{
	case BUS_BUSY :
	{
		if(I2Cx->I2C_SR2 & ((uint32_t)(1<<1)) )
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	2b00      	cmp	r3, #0
 800090c:	d002      	beq.n	8000914 <I2C_Get_FlagStatus+0x50>
			bit_status = SET;
 800090e:	2301      	movs	r3, #1
 8000910:	75fb      	strb	r3, [r7, #23]
		else
			bit_status = RESET;
	}
	break;
 8000912:	e04b      	b.n	80009ac <I2C_Get_FlagStatus+0xe8>
			bit_status = RESET;
 8000914:	2300      	movs	r3, #0
 8000916:	75fb      	strb	r3, [r7, #23]
	break;
 8000918:	e048      	b.n	80009ac <I2C_Get_FlagStatus+0xe8>
	case SB :
	{
		if(I2Cx->I2C_SR1 & ((uint32_t)(1<<0)) )
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	2b00      	cmp	r3, #0
 8000924:	d002      	beq.n	800092c <I2C_Get_FlagStatus+0x68>
			bit_status = SET;
 8000926:	2301      	movs	r3, #1
 8000928:	75fb      	strb	r3, [r7, #23]
		else
			bit_status = RESET;
	}
	break;
 800092a:	e03f      	b.n	80009ac <I2C_Get_FlagStatus+0xe8>
			bit_status = RESET;
 800092c:	2300      	movs	r3, #0
 800092e:	75fb      	strb	r3, [r7, #23]
	break;
 8000930:	e03c      	b.n	80009ac <I2C_Get_FlagStatus+0xe8>
	case ADDR :
	{
		if(I2Cx->I2C_SR1 & ((uint32_t)(1<<1)) )
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	2b00      	cmp	r3, #0
 800093c:	d002      	beq.n	8000944 <I2C_Get_FlagStatus+0x80>
			bit_status = SET;
 800093e:	2301      	movs	r3, #1
 8000940:	75fb      	strb	r3, [r7, #23]
			bit_status = RESET;

		//This bit is cleared by software reading SR1 register followed reading SR2
		//dummy_read = I2Cx->I2C_SR2;
	}
	break;
 8000942:	e033      	b.n	80009ac <I2C_Get_FlagStatus+0xe8>
			bit_status = RESET;
 8000944:	2300      	movs	r3, #0
 8000946:	75fb      	strb	r3, [r7, #23]
	break;
 8000948:	e030      	b.n	80009ac <I2C_Get_FlagStatus+0xe8>
	case TXE :
	{
		if(I2Cx->I2C_SR1 & ((uint32_t)(1<<7)) )
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000952:	2b00      	cmp	r3, #0
 8000954:	d002      	beq.n	800095c <I2C_Get_FlagStatus+0x98>
			bit_status = SET;
 8000956:	2301      	movs	r3, #1
 8000958:	75fb      	strb	r3, [r7, #23]
		else
			bit_status = RESET;
	}
	break;
 800095a:	e027      	b.n	80009ac <I2C_Get_FlagStatus+0xe8>
			bit_status = RESET;
 800095c:	2300      	movs	r3, #0
 800095e:	75fb      	strb	r3, [r7, #23]
	break;
 8000960:	e024      	b.n	80009ac <I2C_Get_FlagStatus+0xe8>
	case Master_Transmitter_Event :
	{
		flag1 = Master_Transmitter_Event & (0x0000ffff);
 8000962:	2380      	movs	r3, #128	; 0x80
 8000964:	613b      	str	r3, [r7, #16]
		flag2 =  Master_Transmitter_Event >> 16;
 8000966:	2307      	movs	r3, #7
 8000968:	60fb      	str	r3, [r7, #12]
		last_event = ((I2Cx->I2C_SR1 & flag1) | ((I2Cx->I2C_SR2 & flag2) << 16) );
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	695a      	ldr	r2, [r3, #20]
 800096e:	693b      	ldr	r3, [r7, #16]
 8000970:	401a      	ands	r2, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6999      	ldr	r1, [r3, #24]
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	400b      	ands	r3, r1
 800097a:	041b      	lsls	r3, r3, #16
 800097c:	4313      	orrs	r3, r2
 800097e:	60bb      	str	r3, [r7, #8]
		if(last_event == flag)
 8000980:	68ba      	ldr	r2, [r7, #8]
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	429a      	cmp	r2, r3
 8000986:	d102      	bne.n	800098e <I2C_Get_FlagStatus+0xca>
			bit_status = SET;
 8000988:	2301      	movs	r3, #1
 800098a:	75fb      	strb	r3, [r7, #23]
		else
			bit_status = RESET;
	}
	break;
 800098c:	e00e      	b.n	80009ac <I2C_Get_FlagStatus+0xe8>
			bit_status = RESET;
 800098e:	2300      	movs	r3, #0
 8000990:	75fb      	strb	r3, [r7, #23]
	break;
 8000992:	e00b      	b.n	80009ac <I2C_Get_FlagStatus+0xe8>
	case RXNE :
	{
		if(I2Cx->I2C_SR1 & ((uint32_t)(1<<6)) )
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800099c:	2b00      	cmp	r3, #0
 800099e:	d002      	beq.n	80009a6 <I2C_Get_FlagStatus+0xe2>
			bit_status = SET;
 80009a0:	2301      	movs	r3, #1
 80009a2:	75fb      	strb	r3, [r7, #23]
		else
			bit_status = RESET;
	}
	break;
 80009a4:	e001      	b.n	80009aa <I2C_Get_FlagStatus+0xe6>
			bit_status = RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	75fb      	strb	r3, [r7, #23]
	break;
 80009aa:	bf00      	nop


	}

	return bit_status;
 80009ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	371c      	adds	r7, #28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	00070080 	.word	0x00070080

080009bc <I2C_Generate_Start>:



void I2C_Generate_Start(I2C_TypeDef *I2Cx,START_Condition start, functional_state new_state)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	460b      	mov	r3, r1
 80009c6:	70fb      	strb	r3, [r7, #3]
 80009c8:	4613      	mov	r3, r2
 80009ca:	70bb      	strb	r3, [r7, #2]
	//check if bus is busy
	if(start != Repeated_START)
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d007      	beq.n	80009e2 <I2C_Generate_Start+0x26>
		while(I2C_Get_FlagStatus(I2Cx, BUS_BUSY));
 80009d2:	bf00      	nop
 80009d4:	2100      	movs	r1, #0
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff ff74 	bl	80008c4 <I2C_Get_FlagStatus>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d1f8      	bne.n	80009d4 <I2C_Generate_Start+0x18>
	if(new_state == Enable)
 80009e2:	78bb      	ldrb	r3, [r7, #2]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d106      	bne.n	80009f6 <I2C_Generate_Start+0x3a>
	{
		//Send Start
		I2Cx->I2C_CR1 |= (uint32_t)(1<<8);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	601a      	str	r2, [r3, #0]
	else if(new_state == Disable)
	{
		I2Cx->I2C_CR1 &= ~((uint32_t)(1<<8));
	}

}
 80009f4:	e008      	b.n	8000a08 <I2C_Generate_Start+0x4c>
	else if(new_state == Disable)
 80009f6:	78bb      	ldrb	r3, [r7, #2]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d105      	bne.n	8000a08 <I2C_Generate_Start+0x4c>
		I2Cx->I2C_CR1 &= ~((uint32_t)(1<<8));
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <I2C_Send_Address>:



void I2C_Send_Address(I2C_TypeDef *I2Cx, uint16_t device_address,I2C_Direction direction)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	460b      	mov	r3, r1
 8000a1a:	807b      	strh	r3, [r7, #2]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	707b      	strb	r3, [r7, #1]
	//support 7-bit address mode only
	if(direction == Receiver)
 8000a20:	787b      	ldrb	r3, [r7, #1]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d107      	bne.n	8000a36 <I2C_Send_Address+0x26>
	{
		I2Cx->I2C_DR = ((device_address<<1) | (0x01));
 8000a26:	887b      	ldrh	r3, [r7, #2]
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	461a      	mov	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	611a      	str	r2, [r3, #16]
	}
	else if(direction == Transmitter)
	{
		I2Cx->I2C_DR = (device_address<<1);
	}
}
 8000a34:	e007      	b.n	8000a46 <I2C_Send_Address+0x36>
	else if(direction == Transmitter)
 8000a36:	787b      	ldrb	r3, [r7, #1]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d104      	bne.n	8000a46 <I2C_Send_Address+0x36>
		I2Cx->I2C_DR = (device_address<<1);
 8000a3c:	887b      	ldrh	r3, [r7, #2]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	461a      	mov	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	611a      	str	r2, [r3, #16]
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <I2C_Stop>:



void I2C_Stop(I2C_TypeDef *I2Cx, functional_state new_state)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	70fb      	strb	r3, [r7, #3]
	if(new_state == Enable)
 8000a5c:	78fb      	ldrb	r3, [r7, #3]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d106      	bne.n	8000a70 <I2C_Stop+0x20>
	{
		//enable stop bit
		I2Cx->I2C_CR1 |= ((uint32_t)(1<<9));
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	601a      	str	r2, [r3, #0]
	else
	{
		//disable stop
		I2Cx->I2C_CR1 &= ~(((uint32_t) (1<<9)));
	}
}
 8000a6e:	e005      	b.n	8000a7c <I2C_Stop+0x2c>
		I2Cx->I2C_CR1 &= ~(((uint32_t) (1<<9)));
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	601a      	str	r2, [r3, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr

08000a86 <I2C_ACKConfig>:


void I2C_ACKConfig(I2C_TypeDef *I2Cx, functional_state new_state)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b083      	sub	sp, #12
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	70fb      	strb	r3, [r7, #3]
	if(new_state == Enable)
 8000a92:	78fb      	ldrb	r3, [r7, #3]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d106      	bne.n	8000aa6 <I2C_ACKConfig+0x20>
	{
		I2Cx->I2C_CR1 |= ((uint32_t)(1<<10));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		I2Cx->I2C_CR1 &= ~((uint32_t)(1<<10));
	}
}
 8000aa4:	e005      	b.n	8000ab2 <I2C_ACKConfig+0x2c>
		I2Cx->I2C_CR1 &= ~((uint32_t)(1<<10));
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <I2C1_EV_IRQHandler>:
 *=======================================================================
 *
*/

void I2C1_EV_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
	volatile uint32_t dummy = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
	uint32_t temp1 = 0, temp2 = 0, temp3 = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
	temp1 = (I2C1->I2C_CR2 & ((uint32_t)1<<9));		//ITEVTEN
 8000ad2:	4b3c      	ldr	r3, [pc, #240]	; (8000bc4 <I2C1_EV_IRQHandler+0x108>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ada:	60fb      	str	r3, [r7, #12]
	temp2 = (I2C1->I2C_CR2 & ((uint32_t)1<<10));	//ITBUFEN
 8000adc:	4b39      	ldr	r3, [pc, #228]	; (8000bc4 <I2C1_EV_IRQHandler+0x108>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ae4:	60bb      	str	r3, [r7, #8]
	temp3 = (I2C1->I2C_SR1 & ((uint32_t)1<<4));		//STOPF
 8000ae6:	4b37      	ldr	r3, [pc, #220]	; (8000bc4 <I2C1_EV_IRQHandler+0x108>)
 8000ae8:	695b      	ldr	r3, [r3, #20]
 8000aea:	f003 0310 	and.w	r3, r3, #16
 8000aee:	607b      	str	r3, [r7, #4]

	//Handle Stop Condition Event
	if(temp1 && temp3)
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d00a      	beq.n	8000b0c <I2C1_EV_IRQHandler+0x50>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d007      	beq.n	8000b0c <I2C1_EV_IRQHandler+0x50>
	{
		//STOPF Cleared by software reading the SR1 register followed by a write in the CR1 register,
		// i have already read SR1 in temp3
		//then next statement i write to CR1
		I2C1->I2C_CR1 |= 0x0000;
 8000afc:	4b31      	ldr	r3, [pc, #196]	; (8000bc4 <I2C1_EV_IRQHandler+0x108>)
 8000afe:	4a31      	ldr	r2, [pc, #196]	; (8000bc4 <I2C1_EV_IRQHandler+0x108>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	6013      	str	r3, [r2, #0]
		Global_I2C_Config[I2C1_INDEX].Slave_CallBack(I2C_EV_STOP);
 8000b04:	4b30      	ldr	r3, [pc, #192]	; (8000bc8 <I2C1_EV_IRQHandler+0x10c>)
 8000b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b08:	2000      	movs	r0, #0
 8000b0a:	4798      	blx	r3
	}
	//----------------------------------------------------------
	//Handle Received address matched.
	temp3 = (I2C1->I2C_SR1 & ((uint32_t)1<<1));		//ADDR
 8000b0c:	4b2d      	ldr	r3, [pc, #180]	; (8000bc4 <I2C1_EV_IRQHandler+0x108>)
 8000b0e:	695b      	ldr	r3, [r3, #20]
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	607b      	str	r3, [r7, #4]
	if(temp1 && temp3)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d012      	beq.n	8000b42 <I2C1_EV_IRQHandler+0x86>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d00f      	beq.n	8000b42 <I2C1_EV_IRQHandler+0x86>
	{
		//clear ADDR flag
		//In slave mode, it is recommended to perform the complete clearing sequence (READ
		//SR1 then READ SR2) after ADDR is set.
		dummy  = I2C1->I2C_SR1;
 8000b22:	4b28      	ldr	r3, [pc, #160]	; (8000bc4 <I2C1_EV_IRQHandler+0x108>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	603b      	str	r3, [r7, #0]
		dummy  = I2C1->I2C_SR2;
 8000b28:	4b26      	ldr	r3, [pc, #152]	; (8000bc4 <I2C1_EV_IRQHandler+0x108>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	603b      	str	r3, [r7, #0]
		//check master mode or slave mode
		if( I2C1->I2C_SR2 & ((uint32_t)(1<<0)) )
 8000b2e:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <I2C1_EV_IRQHandler+0x108>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d103      	bne.n	8000b42 <I2C1_EV_IRQHandler+0x86>
			//master mode(using polling mechanism not interrupt)
		}
		else
		{
			//slave mode
			Global_I2C_Config[I2C1_INDEX].Slave_CallBack(I2C_EV_ADD_MATCHED);
 8000b3a:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <I2C1_EV_IRQHandler+0x10c>)
 8000b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b3e:	2001      	movs	r0, #1
 8000b40:	4798      	blx	r3
		}

	}
	//----------------------------------------------------------
	//Handle TxE: Data register empty (master request data from slave)-->slave_transmitter
	temp3 = (I2C1->I2C_SR1 & ((uint32_t)1<<7));		//TXE
 8000b42:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <I2C1_EV_IRQHandler+0x108>)
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4a:	607b      	str	r3, [r7, #4]
	if(temp1 && temp2 && temp3)		//in case TXE=1, ITEVTEN=1, ITBUFEN=1
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d015      	beq.n	8000b7e <I2C1_EV_IRQHandler+0xc2>
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d012      	beq.n	8000b7e <I2C1_EV_IRQHandler+0xc2>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d00f      	beq.n	8000b7e <I2C1_EV_IRQHandler+0xc2>
	{
		//check master mode or slave mode
		if( I2C1->I2C_SR2 & ((uint32_t)(1<<0)) )
 8000b5e:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <I2C1_EV_IRQHandler+0x108>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d109      	bne.n	8000b7e <I2C1_EV_IRQHandler+0xc2>
		}
		else
		{
			//slave mode
			//check if slave in transmit mode
			if(I2C1->I2C_SR2 & ((uint32_t)(1<<2)))		//TRA: Transmitter/receiver: 1: Data bytes transmitted
 8000b6a:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <I2C1_EV_IRQHandler+0x108>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <I2C1_EV_IRQHandler+0xc2>
			{
				Global_I2C_Config[I2C1_INDEX].Slave_CallBack(I2C_EV_DATA_REQ);
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <I2C1_EV_IRQHandler+0x10c>)
 8000b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7a:	2002      	movs	r0, #2
 8000b7c:	4798      	blx	r3

		}
	}
	//----------------------------------------------------------
	//Handle RxNE: Data register not empty (slave receive data)-->slave_Receiver
	temp3 = (I2C1->I2C_SR1 & ((uint32_t)1<<6));		//RXNE
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <I2C1_EV_IRQHandler+0x108>)
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b86:	607b      	str	r3, [r7, #4]
	if(temp1 && temp2 && temp3)		//in case RXNE=1, ITEVTEN=1, ITBUFEN=1
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d015      	beq.n	8000bba <I2C1_EV_IRQHandler+0xfe>
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d012      	beq.n	8000bba <I2C1_EV_IRQHandler+0xfe>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d00f      	beq.n	8000bba <I2C1_EV_IRQHandler+0xfe>
	{
		//check master mode or slave mode
		if( I2C1->I2C_SR2 & ((uint32_t)(1<<0)) )
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <I2C1_EV_IRQHandler+0x108>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d109      	bne.n	8000bba <I2C1_EV_IRQHandler+0xfe>
			//master mode(using polling mechanism not interrupt)
		}
		else
		{
			//slave mode
			if(!(I2C1->I2C_SR2 & ((uint32_t)(1<<2))))		//TRA: Transmitter/receiver: 0: Data bytes received
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <I2C1_EV_IRQHandler+0x108>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d103      	bne.n	8000bba <I2C1_EV_IRQHandler+0xfe>
			{
				Global_I2C_Config[I2C1_INDEX].Slave_CallBack(I2C_EV_DATA_RCV);
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <I2C1_EV_IRQHandler+0x10c>)
 8000bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb6:	2003      	movs	r0, #3
 8000bb8:	4798      	blx	r3
			}
		}
	}
}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40005400 	.word	0x40005400
 8000bc8:	20000024 	.word	0x20000024

08000bcc <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <I2C2_ER_IRQHandler>:


void I2C2_ER_IRQHandler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <MCAL_RCC_getPCLK1Freq>:
//100: HCLK divided by 2
//101: HCLK divided by 4
//110: HCLK divided by 8
//111: HCLK divided by 16
uint32_t MCAL_RCC_getPCLK1Freq(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
	return (MCAL_RCC_getHCLKFreq() >> (APBPrescaler_table[(RCC ->CFGR >> 8) & 0b111]) )  ;
 8000bf4:	f000 f810 	bl	8000c18 <MCAL_RCC_getHCLKFreq>
 8000bf8:	4601      	mov	r1, r0
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <MCAL_RCC_getPCLK1Freq+0x20>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	0a1b      	lsrs	r3, r3, #8
 8000c00:	f003 0307 	and.w	r3, r3, #7
 8000c04:	4a03      	ldr	r2, [pc, #12]	; (8000c14 <MCAL_RCC_getPCLK1Freq+0x24>)
 8000c06:	5cd3      	ldrb	r3, [r2, r3]
 8000c08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40021000 	.word	0x40021000
 8000c14:	08000dd8 	.word	0x08000dd8

08000c18 <MCAL_RCC_getHCLKFreq>:
//1101: SYSCLK divided by 128
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512

uint32_t MCAL_RCC_getHCLKFreq(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	return (MCAL_RCC_getSysCLKFreq() >> (AHBPrescaler_table[(RCC ->CFGR >> 4) & 0xf]) )  ;
 8000c1c:	f000 f810 	bl	8000c40 <MCAL_RCC_getSysCLKFreq>
 8000c20:	4601      	mov	r1, r0
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <MCAL_RCC_getHCLKFreq+0x20>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	091b      	lsrs	r3, r3, #4
 8000c28:	f003 030f 	and.w	r3, r3, #15
 8000c2c:	4a03      	ldr	r2, [pc, #12]	; (8000c3c <MCAL_RCC_getHCLKFreq+0x24>)
 8000c2e:	5cd3      	ldrb	r3, [r2, r3]
 8000c30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	08000de0 	.word	0x08000de0

08000c40 <MCAL_RCC_getSysCLKFreq>:


uint32_t MCAL_RCC_getSysCLKFreq(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
	//Set and cleared by hardware to indicate which clock source is used as system clock.
	//00: HSI oscillator used as system clock
	//01: HSE oscillator used as system clock
	//10: PLL used as system clock
	//11: Not applicable
	switch((RCC ->CFGR >> 2) &0b11)
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <MCAL_RCC_getSysCLKFreq+0x30>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	089b      	lsrs	r3, r3, #2
 8000c4a:	f003 0303 	and.w	r3, r3, #3
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d006      	beq.n	8000c60 <MCAL_RCC_getSysCLKFreq+0x20>
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d302      	bcc.n	8000c5c <MCAL_RCC_getSysCLKFreq+0x1c>
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d004      	beq.n	8000c64 <MCAL_RCC_getSysCLKFreq+0x24>
 8000c5a:	e005      	b.n	8000c68 <MCAL_RCC_getSysCLKFreq+0x28>
	{
	case 0 :
		return (HSI_RC_CLOCK);
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <MCAL_RCC_getSysCLKFreq+0x34>)
 8000c5e:	e003      	b.n	8000c68 <MCAL_RCC_getSysCLKFreq+0x28>
		break;
	case 1 :
		return (HSE_CLOCK);
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <MCAL_RCC_getSysCLKFreq+0x38>)
 8000c62:	e001      	b.n	8000c68 <MCAL_RCC_getSysCLKFreq+0x28>
		break;
	case 2 :
		return ((uint32_t)(16000000));
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <MCAL_RCC_getSysCLKFreq+0x38>)
 8000c66:	e7ff      	b.n	8000c68 <MCAL_RCC_getSysCLKFreq+0x28>
		break;
	}
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	40021000 	.word	0x40021000
 8000c74:	007a1200 	.word	0x007a1200
 8000c78:	00f42400 	.word	0x00f42400

08000c7c <SPI1_IRQHandler>:
 *=======================================================================
 *
*/

void SPI1_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
	struct S_IRQ_Src irq;
	irq.TXE = ((SPI1->SPI_SR & (1<<1)) >> 1);
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <SPI1_IRQHandler+0x54>)
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	085b      	lsrs	r3, r3, #1
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	793b      	ldrb	r3, [r7, #4]
 8000c90:	f362 0300 	bfi	r3, r2, #0, #1
 8000c94:	713b      	strb	r3, [r7, #4]
	irq.RXNE = ((SPI1->SPI_SR & (1<<0)) >> 0);
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <SPI1_IRQHandler+0x54>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	793b      	ldrb	r3, [r7, #4]
 8000ca2:	f362 0341 	bfi	r3, r2, #1, #1
 8000ca6:	713b      	strb	r3, [r7, #4]
	irq.ERRI = ((SPI1->SPI_SR & (1<<4)) >> 4);
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <SPI1_IRQHandler+0x54>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	091b      	lsrs	r3, r3, #4
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	793b      	ldrb	r3, [r7, #4]
 8000cb6:	f362 0382 	bfi	r3, r2, #2, #1
 8000cba:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq);
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <SPI1_IRQHandler+0x58>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	7938      	ldrb	r0, [r7, #4]
 8000cc4:	4798      	blx	r3
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40013000 	.word	0x40013000
 8000cd4:	2000001c 	.word	0x2000001c

08000cd8 <SPI2_IRQHandler>:


void SPI2_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
	struct S_IRQ_Src irq;
	irq.TXE = ((SPI2->SPI_SR & (1<<1)) >> 1);
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <SPI2_IRQHandler+0x54>)
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	085b      	lsrs	r3, r3, #1
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	793b      	ldrb	r3, [r7, #4]
 8000cec:	f362 0300 	bfi	r3, r2, #0, #1
 8000cf0:	713b      	strb	r3, [r7, #4]
	irq.RXNE = ((SPI2->SPI_SR & (1<<0)) >> 0);
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <SPI2_IRQHandler+0x54>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	793b      	ldrb	r3, [r7, #4]
 8000cfe:	f362 0341 	bfi	r3, r2, #1, #1
 8000d02:	713b      	strb	r3, [r7, #4]
	irq.ERRI = ((SPI2->SPI_SR & (1<<4)) >> 4);
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <SPI2_IRQHandler+0x54>)
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	091b      	lsrs	r3, r3, #4
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	793b      	ldrb	r3, [r7, #4]
 8000d12:	f362 0382 	bfi	r3, r2, #2, #1
 8000d16:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq);
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <SPI2_IRQHandler+0x58>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	7938      	ldrb	r0, [r7, #4]
 8000d20:	4798      	blx	r3
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40003800 	.word	0x40003800
 8000d30:	2000001c 	.word	0x2000001c

08000d34 <USART1_IRQHandler>:
 *=======================================================================
 *
*/

void USART1_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	GP_IRQ_CallBack();
 8000d38:	4b02      	ldr	r3, [pc, #8]	; (8000d44 <USART1_IRQHandler+0x10>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4798      	blx	r3
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000074 	.word	0x20000074

08000d48 <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	GP_IRQ_CallBack();
 8000d4c:	4b02      	ldr	r3, [pc, #8]	; (8000d58 <USART2_IRQHandler+0x10>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4798      	blx	r3
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000074 	.word	0x20000074

08000d5c <USART3_IRQHandler>:


void USART3_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	GP_IRQ_CallBack();
 8000d60:	4b02      	ldr	r3, [pc, #8]	; (8000d6c <USART3_IRQHandler+0x10>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4798      	blx	r3
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000074 	.word	0x20000074

08000d70 <__libc_init_array>:
 8000d70:	b570      	push	{r4, r5, r6, lr}
 8000d72:	2500      	movs	r5, #0
 8000d74:	4e0c      	ldr	r6, [pc, #48]	; (8000da8 <__libc_init_array+0x38>)
 8000d76:	4c0d      	ldr	r4, [pc, #52]	; (8000dac <__libc_init_array+0x3c>)
 8000d78:	1ba4      	subs	r4, r4, r6
 8000d7a:	10a4      	asrs	r4, r4, #2
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	d109      	bne.n	8000d94 <__libc_init_array+0x24>
 8000d80:	f000 f81a 	bl	8000db8 <_init>
 8000d84:	2500      	movs	r5, #0
 8000d86:	4e0a      	ldr	r6, [pc, #40]	; (8000db0 <__libc_init_array+0x40>)
 8000d88:	4c0a      	ldr	r4, [pc, #40]	; (8000db4 <__libc_init_array+0x44>)
 8000d8a:	1ba4      	subs	r4, r4, r6
 8000d8c:	10a4      	asrs	r4, r4, #2
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	d105      	bne.n	8000d9e <__libc_init_array+0x2e>
 8000d92:	bd70      	pop	{r4, r5, r6, pc}
 8000d94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d98:	4798      	blx	r3
 8000d9a:	3501      	adds	r5, #1
 8000d9c:	e7ee      	b.n	8000d7c <__libc_init_array+0xc>
 8000d9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000da2:	4798      	blx	r3
 8000da4:	3501      	adds	r5, #1
 8000da6:	e7f2      	b.n	8000d8e <__libc_init_array+0x1e>
 8000da8:	08000df0 	.word	0x08000df0
 8000dac:	08000df0 	.word	0x08000df0
 8000db0:	08000df0 	.word	0x08000df0
 8000db4:	08000df4 	.word	0x08000df4

08000db8 <_init>:
 8000db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dba:	bf00      	nop
 8000dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dbe:	bc08      	pop	{r3}
 8000dc0:	469e      	mov	lr, r3
 8000dc2:	4770      	bx	lr

08000dc4 <_fini>:
 8000dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc6:	bf00      	nop
 8000dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dca:	bc08      	pop	{r3}
 8000dcc:	469e      	mov	lr, r3
 8000dce:	4770      	bx	lr
